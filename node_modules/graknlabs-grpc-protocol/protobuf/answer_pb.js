// source: protobuf/answer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var protobuf_concept_pb = require('../protobuf/concept_pb.js');
goog.object.extend(proto, protobuf_concept_pb);
goog.exportSymbol('proto.grakn.protocol.Answer', null, global);
goog.exportSymbol('proto.grakn.protocol.Answer.AnswerCase', null, global);
goog.exportSymbol('proto.grakn.protocol.AnswerGroup', null, global);
goog.exportSymbol('proto.grakn.protocol.ConceptMap', null, global);
goog.exportSymbol('proto.grakn.protocol.Number', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grakn.protocol.Answer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.grakn.protocol.Answer.oneofGroups_);
};
goog.inherits(proto.grakn.protocol.Answer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grakn.protocol.Answer.displayName = 'proto.grakn.protocol.Answer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grakn.protocol.AnswerGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grakn.protocol.AnswerGroup.repeatedFields_, null);
};
goog.inherits(proto.grakn.protocol.AnswerGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grakn.protocol.AnswerGroup.displayName = 'proto.grakn.protocol.AnswerGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grakn.protocol.ConceptMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grakn.protocol.ConceptMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grakn.protocol.ConceptMap.displayName = 'proto.grakn.protocol.ConceptMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grakn.protocol.Number = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grakn.protocol.Number, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.grakn.protocol.Number.displayName = 'proto.grakn.protocol.Number';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.grakn.protocol.Answer.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.grakn.protocol.Answer.AnswerCase = {
  ANSWER_NOT_SET: 0,
  ANSWER_GROUP: 1,
  CONCEPT_MAP: 2,
  NUMBER: 3
};

/**
 * @return {proto.grakn.protocol.Answer.AnswerCase}
 */
proto.grakn.protocol.Answer.prototype.getAnswerCase = function() {
  return /** @type {proto.grakn.protocol.Answer.AnswerCase} */(jspb.Message.computeOneofCase(this, proto.grakn.protocol.Answer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grakn.protocol.Answer.prototype.toObject = function(opt_includeInstance) {
  return proto.grakn.protocol.Answer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grakn.protocol.Answer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grakn.protocol.Answer.toObject = function(includeInstance, msg) {
  var f, obj = {
    answerGroup: (f = msg.getAnswerGroup()) && proto.grakn.protocol.AnswerGroup.toObject(includeInstance, f),
    conceptMap: (f = msg.getConceptMap()) && proto.grakn.protocol.ConceptMap.toObject(includeInstance, f),
    number: (f = msg.getNumber()) && proto.grakn.protocol.Number.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grakn.protocol.Answer}
 */
proto.grakn.protocol.Answer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grakn.protocol.Answer;
  return proto.grakn.protocol.Answer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grakn.protocol.Answer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grakn.protocol.Answer}
 */
proto.grakn.protocol.Answer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grakn.protocol.AnswerGroup;
      reader.readMessage(value,proto.grakn.protocol.AnswerGroup.deserializeBinaryFromReader);
      msg.setAnswerGroup(value);
      break;
    case 2:
      var value = new proto.grakn.protocol.ConceptMap;
      reader.readMessage(value,proto.grakn.protocol.ConceptMap.deserializeBinaryFromReader);
      msg.setConceptMap(value);
      break;
    case 3:
      var value = new proto.grakn.protocol.Number;
      reader.readMessage(value,proto.grakn.protocol.Number.deserializeBinaryFromReader);
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grakn.protocol.Answer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grakn.protocol.Answer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grakn.protocol.Answer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grakn.protocol.Answer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswerGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grakn.protocol.AnswerGroup.serializeBinaryToWriter
    );
  }
  f = message.getConceptMap();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grakn.protocol.ConceptMap.serializeBinaryToWriter
    );
  }
  f = message.getNumber();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.grakn.protocol.Number.serializeBinaryToWriter
    );
  }
};


/**
 * optional AnswerGroup answer_group = 1;
 * @return {?proto.grakn.protocol.AnswerGroup}
 */
proto.grakn.protocol.Answer.prototype.getAnswerGroup = function() {
  return /** @type{?proto.grakn.protocol.AnswerGroup} */ (
    jspb.Message.getWrapperField(this, proto.grakn.protocol.AnswerGroup, 1));
};


/**
 * @param {?proto.grakn.protocol.AnswerGroup|undefined} value
 * @return {!proto.grakn.protocol.Answer} returns this
*/
proto.grakn.protocol.Answer.prototype.setAnswerGroup = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.grakn.protocol.Answer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grakn.protocol.Answer} returns this
 */
proto.grakn.protocol.Answer.prototype.clearAnswerGroup = function() {
  return this.setAnswerGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grakn.protocol.Answer.prototype.hasAnswerGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConceptMap concept_map = 2;
 * @return {?proto.grakn.protocol.ConceptMap}
 */
proto.grakn.protocol.Answer.prototype.getConceptMap = function() {
  return /** @type{?proto.grakn.protocol.ConceptMap} */ (
    jspb.Message.getWrapperField(this, proto.grakn.protocol.ConceptMap, 2));
};


/**
 * @param {?proto.grakn.protocol.ConceptMap|undefined} value
 * @return {!proto.grakn.protocol.Answer} returns this
*/
proto.grakn.protocol.Answer.prototype.setConceptMap = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.grakn.protocol.Answer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grakn.protocol.Answer} returns this
 */
proto.grakn.protocol.Answer.prototype.clearConceptMap = function() {
  return this.setConceptMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grakn.protocol.Answer.prototype.hasConceptMap = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Number number = 3;
 * @return {?proto.grakn.protocol.Number}
 */
proto.grakn.protocol.Answer.prototype.getNumber = function() {
  return /** @type{?proto.grakn.protocol.Number} */ (
    jspb.Message.getWrapperField(this, proto.grakn.protocol.Number, 3));
};


/**
 * @param {?proto.grakn.protocol.Number|undefined} value
 * @return {!proto.grakn.protocol.Answer} returns this
*/
proto.grakn.protocol.Answer.prototype.setNumber = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.grakn.protocol.Answer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grakn.protocol.Answer} returns this
 */
proto.grakn.protocol.Answer.prototype.clearNumber = function() {
  return this.setNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grakn.protocol.Answer.prototype.hasNumber = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grakn.protocol.AnswerGroup.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grakn.protocol.AnswerGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.grakn.protocol.AnswerGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grakn.protocol.AnswerGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grakn.protocol.AnswerGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && protobuf_concept_pb.Concept.toObject(includeInstance, f),
    answersList: jspb.Message.toObjectList(msg.getAnswersList(),
    proto.grakn.protocol.Answer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grakn.protocol.AnswerGroup}
 */
proto.grakn.protocol.AnswerGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grakn.protocol.AnswerGroup;
  return proto.grakn.protocol.AnswerGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grakn.protocol.AnswerGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grakn.protocol.AnswerGroup}
 */
proto.grakn.protocol.AnswerGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new protobuf_concept_pb.Concept;
      reader.readMessage(value,protobuf_concept_pb.Concept.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 2:
      var value = new proto.grakn.protocol.Answer;
      reader.readMessage(value,proto.grakn.protocol.Answer.deserializeBinaryFromReader);
      msg.addAnswers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grakn.protocol.AnswerGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grakn.protocol.AnswerGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grakn.protocol.AnswerGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grakn.protocol.AnswerGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      protobuf_concept_pb.Concept.serializeBinaryToWriter
    );
  }
  f = message.getAnswersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.grakn.protocol.Answer.serializeBinaryToWriter
    );
  }
};


/**
 * optional Concept owner = 1;
 * @return {?proto.grakn.protocol.Concept}
 */
proto.grakn.protocol.AnswerGroup.prototype.getOwner = function() {
  return /** @type{?proto.grakn.protocol.Concept} */ (
    jspb.Message.getWrapperField(this, protobuf_concept_pb.Concept, 1));
};


/**
 * @param {?proto.grakn.protocol.Concept|undefined} value
 * @return {!proto.grakn.protocol.AnswerGroup} returns this
*/
proto.grakn.protocol.AnswerGroup.prototype.setOwner = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.grakn.protocol.AnswerGroup} returns this
 */
proto.grakn.protocol.AnswerGroup.prototype.clearOwner = function() {
  return this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.grakn.protocol.AnswerGroup.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Answer answers = 2;
 * @return {!Array<!proto.grakn.protocol.Answer>}
 */
proto.grakn.protocol.AnswerGroup.prototype.getAnswersList = function() {
  return /** @type{!Array<!proto.grakn.protocol.Answer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grakn.protocol.Answer, 2));
};


/**
 * @param {!Array<!proto.grakn.protocol.Answer>} value
 * @return {!proto.grakn.protocol.AnswerGroup} returns this
*/
proto.grakn.protocol.AnswerGroup.prototype.setAnswersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.grakn.protocol.Answer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grakn.protocol.Answer}
 */
proto.grakn.protocol.AnswerGroup.prototype.addAnswers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.grakn.protocol.Answer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.grakn.protocol.AnswerGroup} returns this
 */
proto.grakn.protocol.AnswerGroup.prototype.clearAnswersList = function() {
  return this.setAnswersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grakn.protocol.ConceptMap.prototype.toObject = function(opt_includeInstance) {
  return proto.grakn.protocol.ConceptMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grakn.protocol.ConceptMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grakn.protocol.ConceptMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapMap: (f = msg.getMapMap()) ? f.toObject(includeInstance, proto.grakn.protocol.Concept.toObject) : [],
    pattern: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grakn.protocol.ConceptMap}
 */
proto.grakn.protocol.ConceptMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grakn.protocol.ConceptMap;
  return proto.grakn.protocol.ConceptMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grakn.protocol.ConceptMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grakn.protocol.ConceptMap}
 */
proto.grakn.protocol.ConceptMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.grakn.protocol.Concept.deserializeBinaryFromReader, "", new proto.grakn.protocol.Concept());
         });
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPattern(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grakn.protocol.ConceptMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grakn.protocol.ConceptMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grakn.protocol.ConceptMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grakn.protocol.ConceptMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.grakn.protocol.Concept.serializeBinaryToWriter);
  }
  f = message.getPattern();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * map<string, Concept> map = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.grakn.protocol.Concept>}
 */
proto.grakn.protocol.ConceptMap.prototype.getMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.grakn.protocol.Concept>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.grakn.protocol.Concept));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.grakn.protocol.ConceptMap} returns this
 */
proto.grakn.protocol.ConceptMap.prototype.clearMapMap = function() {
  this.getMapMap().clear();
  return this;};


/**
 * optional string pattern = 2;
 * @return {string}
 */
proto.grakn.protocol.ConceptMap.prototype.getPattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.grakn.protocol.ConceptMap} returns this
 */
proto.grakn.protocol.ConceptMap.prototype.setPattern = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grakn.protocol.Number.prototype.toObject = function(opt_includeInstance) {
  return proto.grakn.protocol.Number.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grakn.protocol.Number} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grakn.protocol.Number.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grakn.protocol.Number}
 */
proto.grakn.protocol.Number.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grakn.protocol.Number;
  return proto.grakn.protocol.Number.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grakn.protocol.Number} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grakn.protocol.Number}
 */
proto.grakn.protocol.Number.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grakn.protocol.Number.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grakn.protocol.Number.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grakn.protocol.Number} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grakn.protocol.Number.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.grakn.protocol.Number.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.grakn.protocol.Number} returns this
 */
proto.grakn.protocol.Number.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.grakn.protocol);
