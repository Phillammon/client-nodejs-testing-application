/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/Grakn", ["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Grakn = void 0;
    var Grakn;
    (function (Grakn) {
        let SessionType;
        (function (SessionType) {
            SessionType[SessionType["DATA"] = 0] = "DATA";
            SessionType[SessionType["SCHEMA"] = 1] = "SCHEMA";
        })(SessionType = Grakn.SessionType || (Grakn.SessionType = {}));
        let TransactionType;
        (function (TransactionType) {
            TransactionType[TransactionType["READ"] = 0] = "READ";
            TransactionType[TransactionType["WRITE"] = 1] = "WRITE";
        })(TransactionType = Grakn.TransactionType || (Grakn.TransactionType = {}));
    })(Grakn = exports.Grakn || (exports.Grakn = {}));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3Jha24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9HcmFrbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7Ozs7Ozs7Ozs7Ozs7SUFNSCxJQUFpQixLQUFLLENBd0RyQjtJQXhERCxXQUFpQixLQUFLO1FBK0JsQixJQUFZLFdBR1g7UUFIRCxXQUFZLFdBQVc7WUFDbkIsNkNBQUksQ0FBQTtZQUNKLGlEQUFNLENBQUE7UUFDVixDQUFDLEVBSFcsV0FBVyxHQUFYLGlCQUFXLEtBQVgsaUJBQVcsUUFHdEI7UUFrQkQsSUFBWSxlQUdYO1FBSEQsV0FBWSxlQUFlO1lBQ3ZCLHFEQUFJLENBQUE7WUFDSix1REFBSyxDQUFBO1FBQ1QsQ0FBQyxFQUhXLGVBQWUsR0FBZixxQkFBZSxLQUFmLHFCQUFlLFFBRzFCO0lBQ0wsQ0FBQyxFQXhEZ0IsS0FBSyxHQUFMLGFBQUssS0FBTCxhQUFLLFFBd0RyQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBHcmFrbk9wdGlvbnMgfSBmcm9tIFwiLi9kZXBlbmRlbmNpZXNfaW50ZXJuYWxcIjtcbmltcG9ydCB7IENvbmNlcHRNYW5hZ2VyIH0gZnJvbSBcIi4vZGVwZW5kZW5jaWVzX2ludGVybmFsXCI7XG5pbXBvcnQgeyBRdWVyeU1hbmFnZXIgfSBmcm9tIFwiLi9kZXBlbmRlbmNpZXNfaW50ZXJuYWxcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBHcmFrbiB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBDbGllbnQge1xuICAgICAgICBzZXNzaW9uKGRhdGFiYXNlTmFtZTogc3RyaW5nLCB0eXBlOiBTZXNzaW9uVHlwZSwgb3B0aW9ucz86IEdyYWtuT3B0aW9ucyk6IFByb21pc2U8U2Vzc2lvbj47XG5cbiAgICAgICAgZGF0YWJhc2VzKCk6IERhdGFiYXNlTWFuYWdlcjtcblxuICAgICAgICBjbG9zZSgpOiB2b2lkO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRGF0YWJhc2VNYW5hZ2VyIHtcbiAgICAgICAgY29udGFpbnMobmFtZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPjtcblxuICAgICAgICBjcmVhdGUobmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcblxuICAgICAgICBkZWxldGUobmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcblxuICAgICAgICBhbGwoKTogUHJvbWlzZTxzdHJpbmdbXT47XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uIHtcbiAgICAgICAgdHJhbnNhY3Rpb24odHlwZTogVHJhbnNhY3Rpb25UeXBlLCBvcHRpb25zPzogR3Jha25PcHRpb25zKTogUHJvbWlzZTxUcmFuc2FjdGlvbj47XG5cbiAgICAgICAgdHlwZSgpOiBTZXNzaW9uVHlwZTtcblxuICAgICAgICBpc09wZW4oKTogYm9vbGVhbjtcblxuICAgICAgICBjbG9zZSgpOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgICAgIGRhdGFiYXNlKCk6IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgZW51bSBTZXNzaW9uVHlwZSB7XG4gICAgICAgIERBVEEsXG4gICAgICAgIFNDSEVNQSxcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uIHtcbiAgICAgICAgdHlwZSgpOiBUcmFuc2FjdGlvblR5cGU7XG5cbiAgICAgICAgaXNPcGVuKCk6IGJvb2xlYW47XG5cbiAgICAgICAgY29uY2VwdHMoKTogQ29uY2VwdE1hbmFnZXI7XG5cbiAgICAgICAgcXVlcnkoKTogUXVlcnlNYW5hZ2VyO1xuXG4gICAgICAgIGNvbW1pdCgpOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgICAgIHJvbGxiYWNrKCk6IFByb21pc2U8dm9pZD47XG5cbiAgICAgICAgY2xvc2UoKTogUHJvbWlzZTx2b2lkPjtcbiAgICB9XG5cbiAgICBleHBvcnQgZW51bSBUcmFuc2FjdGlvblR5cGUge1xuICAgICAgICBSRUFELFxuICAgICAgICBXUklURSxcbiAgICB9XG59XG4iXX0=