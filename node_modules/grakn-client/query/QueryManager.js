/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/query/QueryManager", ["require", "exports", "grakn-client/dependencies_internal", "graknlabs-protocol/protobuf/query_pb", "graknlabs-protocol/protobuf/transaction_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryManager = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    const query_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/query_pb"));
    var Query = query_pb_1.default.Query;
    var Graql = query_pb_1.default.Graql;
    const transaction_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/transaction_pb"));
    var Transaction = transaction_pb_1.default.Transaction;
    class QueryManager {
        constructor(transaction) {
            this._rpcTransaction = transaction;
        }
        match(query, options) {
            const matchQuery = new Query.Req().setMatchReq(new Graql.Match.Req().setQuery(query));
            return this.iterateQuery(matchQuery, options ? options : new dependencies_internal_1.GraknOptions(), (res) => res.getQueryRes().getMatchRes().getAnswerList().map(dependencies_internal_1.ConceptMap.of));
        }
        insert(query, options) {
            const insertQuery = new Query.Req().setInsertReq(new Graql.Insert.Req().setQuery(query));
            return this.iterateQuery(insertQuery, options ? options : new dependencies_internal_1.GraknOptions(), (res) => res.getQueryRes().getInsertRes().getAnswerList().map(dependencies_internal_1.ConceptMap.of));
        }
        delete(query, options) {
            const deleteQuery = new Query.Req().setDeleteReq(new Graql.Delete.Req().setQuery(query));
            return this.runQuery(deleteQuery, options ? options : new dependencies_internal_1.GraknOptions());
        }
        define(query, options) {
            const defineQuery = new Query.Req().setDefineReq(new Graql.Define.Req().setQuery(query));
            return this.runQuery(defineQuery, options ? options : new dependencies_internal_1.GraknOptions());
        }
        undefine(query, options) {
            const undefineQuery = new Query.Req().setUndefineReq(new Graql.Undefine.Req().setQuery(query));
            return this.runQuery(undefineQuery, options ? options : new dependencies_internal_1.GraknOptions());
        }
        runQuery(request, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const transactionRequest = new Transaction.Req()
                    .setQueryReq(request.setOptions(dependencies_internal_1.ProtoBuilder.options(options)));
                yield this._rpcTransaction.execute(transactionRequest);
            });
        }
        iterateQuery(request, options, responseReader) {
            const transactionRequest = new Transaction.Req()
                .setQueryReq(request.setOptions(dependencies_internal_1.ProtoBuilder.options(options)));
            return this._rpcTransaction.stream(transactionRequest, responseReader);
        }
    }
    exports.QueryManager = QueryManager;
});
//# sourceMappingURL=data:application/json;base64,