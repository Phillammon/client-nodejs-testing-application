/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/rpc/RPCSession", ["require", "exports", "grakn-client/Grakn", "graknlabs-grpc-protocol/protobuf/session_pb", "grakn-client/common/ProtoBuilder", "grakn-client/GraknOptions", "grakn-client/rpc/RPCTransaction"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RPCSession = void 0;
    const Grakn_1 = require("grakn-client/Grakn");
    const session_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/session_pb"));
    const ProtoBuilder_1 = require("grakn-client/common/ProtoBuilder");
    const GraknOptions_1 = require("grakn-client/GraknOptions");
    const RPCTransaction_1 = require("grakn-client/rpc/RPCTransaction");
    class RPCSession {
        constructor(grpcClient, database, type) {
            this._database = database;
            this._type = type;
            this._grpcClient = grpcClient;
        }
        open(options = new GraknOptions_1.GraknOptions()) {
            return __awaiter(this, void 0, void 0, function* () {
                const openReq = new session_pb_1.default.Session.Open.Req()
                    .setDatabase(this._database)
                    .setType(sessionType(this._type))
                    .setOptions(ProtoBuilder_1.ProtoBuilder.options(options));
                this._isOpen = true;
                const res = yield new Promise((resolve, reject) => {
                    this._grpcClient.session_open(openReq, (err, res) => {
                        if (err)
                            reject(err);
                        else
                            resolve(res);
                    });
                });
                this._sessionId = res.getSessionId_asB64();
                return this;
            });
        }
        transaction(type, options = new GraknOptions_1.GraknOptions()) {
            const transaction = new RPCTransaction_1.RPCTransaction(this._grpcClient, type);
            return transaction.open(this._sessionId, options);
        }
        type() {
            return this._type;
        }
        isOpen() {
            return this._isOpen;
        }
        close() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this._isOpen) {
                    this._isOpen = false;
                    const req = new session_pb_1.default.Session.Close.Req().setSessionId(this._sessionId);
                    yield new Promise((resolve, reject) => {
                        this._grpcClient.session_close(req, (err) => {
                            if (err)
                                reject(err);
                            else
                                resolve();
                        });
                    });
                }
            });
        }
        database() {
            return this._database;
        }
    }
    exports.RPCSession = RPCSession;
    function sessionType(type) {
        switch (type) {
            case Grakn_1.Grakn.SessionType.DATA:
                return session_pb_1.default.Session.Type.DATA;
            case Grakn_1.Grakn.SessionType.SCHEMA:
                return session_pb_1.default.Session.Type.SCHEMA;
            default:
                throw "Unrecognized Type";
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUlBDU2Vzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3JwYy9SUENTZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUVILDhDQUFpQztJQUdqQyw2RkFBdUU7SUFDdkUsbUVBQXNEO0lBQ3RELDREQUErQztJQUMvQyxvRUFBa0Q7SUFFbEQsTUFBYSxVQUFVO1FBT25CLFlBQVksVUFBcUIsRUFBRSxRQUFnQixFQUFFLElBQXVCO1lBQ3hFLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1lBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO1FBQ2xDLENBQUM7UUFFSyxJQUFJLENBQUMsVUFBd0IsSUFBSSwyQkFBWSxFQUFFOztnQkFDakQsTUFBTSxPQUFPLEdBQUcsSUFBSSxvQkFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO3FCQUM5QyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztxQkFDM0IsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ2hDLFVBQVUsQ0FBQywyQkFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUMvQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDcEIsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLE9BQU8sQ0FBZ0MsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7b0JBQzdFLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTt3QkFDaEQsSUFBSSxHQUFHOzRCQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7NEJBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDdEIsQ0FBQyxDQUFDLENBQUM7Z0JBQ1AsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztnQkFDM0MsT0FBTyxJQUFJLENBQUM7WUFDaEIsQ0FBQztTQUFBO1FBRUQsV0FBVyxDQUFDLElBQTJCLEVBQUUsVUFBd0IsSUFBSSwyQkFBWSxFQUFFO1lBQy9FLE1BQU0sV0FBVyxHQUFHLElBQUksK0JBQWMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQy9ELE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3RELENBQUM7UUFFRCxJQUFJO1lBQ0EsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RCLENBQUM7UUFFRCxNQUFNO1lBQ0YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3hCLENBQUM7UUFFSyxLQUFLOztnQkFDUCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7b0JBQ2QsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7b0JBQ3JCLE1BQU0sR0FBRyxHQUFHLElBQUksb0JBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQy9FLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7d0JBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFOzRCQUN4QyxJQUFJLEdBQUc7Z0NBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztnQ0FDaEIsT0FBTyxFQUFFLENBQUM7d0JBQ25CLENBQUMsQ0FBQyxDQUFDO29CQUNQLENBQUMsQ0FBQyxDQUFDO2lCQUNOO1lBQ0wsQ0FBQztTQUFBO1FBRUQsUUFBUTtZQUNKLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUMxQixDQUFDO0tBQ0o7SUExREQsZ0NBMERDO0lBRUQsU0FBUyxXQUFXLENBQUMsSUFBdUI7UUFDeEMsUUFBUSxJQUFJLEVBQUU7WUFDVixLQUFLLGFBQUssQ0FBQyxXQUFXLENBQUMsSUFBSTtnQkFDdkIsT0FBTyxvQkFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzFDLEtBQUssYUFBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNO2dCQUN6QixPQUFPLG9CQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDNUM7Z0JBQ0ksTUFBTSxtQkFBbUIsQ0FBQztTQUNqQztJQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgR3Jha24gfSBmcm9tIFwiLi4vR3Jha25cIjtcbmltcG9ydCBHcmFrblByb3RvIGZyb20gXCJncmFrbmxhYnMtZ3JwYy1wcm90b2NvbC9wcm90b2J1Zi9ncmFrbl9ncnBjX3BiXCI7XG5pbXBvcnQgR3Jha25HcnBjID0gR3Jha25Qcm90by5HcmFrbkNsaWVudDtcbmltcG9ydCBTZXNzaW9uUHJvdG8gZnJvbSBcImdyYWtubGFicy1ncnBjLXByb3RvY29sL3Byb3RvYnVmL3Nlc3Npb25fcGJcIjtcbmltcG9ydCB7IFByb3RvQnVpbGRlciB9IGZyb20gXCIuLi9jb21tb24vUHJvdG9CdWlsZGVyXCI7XG5pbXBvcnQgeyBHcmFrbk9wdGlvbnMgfSBmcm9tIFwiLi4vR3Jha25PcHRpb25zXCI7XG5pbXBvcnQgeyBSUENUcmFuc2FjdGlvbiB9IGZyb20gXCIuL1JQQ1RyYW5zYWN0aW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBSUENTZXNzaW9uIGltcGxlbWVudHMgR3Jha24uU2Vzc2lvbiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfZ3JwY0NsaWVudDogR3Jha25HcnBjO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2RhdGFiYXNlOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfdHlwZTogR3Jha24uU2Vzc2lvblR5cGU7XG4gICAgcHJpdmF0ZSBfc2Vzc2lvbklkOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfaXNPcGVuOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZ3JwY0NsaWVudDogR3Jha25HcnBjLCBkYXRhYmFzZTogc3RyaW5nLCB0eXBlOiBHcmFrbi5TZXNzaW9uVHlwZSkge1xuICAgICAgICB0aGlzLl9kYXRhYmFzZSA9IGRhdGFiYXNlO1xuICAgICAgICB0aGlzLl90eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5fZ3JwY0NsaWVudCA9IGdycGNDbGllbnQ7XG4gICAgfVxuXG4gICAgYXN5bmMgb3BlbihvcHRpb25zOiBHcmFrbk9wdGlvbnMgPSBuZXcgR3Jha25PcHRpb25zKCkpOiBQcm9taXNlPEdyYWtuLlNlc3Npb24+IHtcbiAgICAgICAgY29uc3Qgb3BlblJlcSA9IG5ldyBTZXNzaW9uUHJvdG8uU2Vzc2lvbi5PcGVuLlJlcSgpXG4gICAgICAgICAgICAuc2V0RGF0YWJhc2UodGhpcy5fZGF0YWJhc2UpXG4gICAgICAgICAgICAuc2V0VHlwZShzZXNzaW9uVHlwZSh0aGlzLl90eXBlKSlcbiAgICAgICAgICAgIC5zZXRPcHRpb25zKFByb3RvQnVpbGRlci5vcHRpb25zKG9wdGlvbnMpKTtcbiAgICAgICAgdGhpcy5faXNPcGVuID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgbmV3IFByb21pc2U8U2Vzc2lvblByb3RvLlNlc3Npb24uT3Blbi5SZXM+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2dycGNDbGllbnQuc2Vzc2lvbl9vcGVuKG9wZW5SZXEsIChlcnIsIHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIGVsc2UgcmVzb2x2ZShyZXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zZXNzaW9uSWQgPSByZXMuZ2V0U2Vzc2lvbklkX2FzQjY0KCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRyYW5zYWN0aW9uKHR5cGU6IEdyYWtuLlRyYW5zYWN0aW9uVHlwZSwgb3B0aW9uczogR3Jha25PcHRpb25zID0gbmV3IEdyYWtuT3B0aW9ucygpKTogUHJvbWlzZTxHcmFrbi5UcmFuc2FjdGlvbj4ge1xuICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IG5ldyBSUENUcmFuc2FjdGlvbih0aGlzLl9ncnBjQ2xpZW50LCB0eXBlKTtcbiAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uLm9wZW4odGhpcy5fc2Vzc2lvbklkLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICB0eXBlKCk6IEdyYWtuLlNlc3Npb25UeXBlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3R5cGU7XG4gICAgfVxuXG4gICAgaXNPcGVuKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNPcGVuO1xuICAgIH1cblxuICAgIGFzeW5jIGNsb3NlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAodGhpcy5faXNPcGVuKSB7XG4gICAgICAgICAgICB0aGlzLl9pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IHJlcSA9IG5ldyBTZXNzaW9uUHJvdG8uU2Vzc2lvbi5DbG9zZS5SZXEoKS5zZXRTZXNzaW9uSWQodGhpcy5fc2Vzc2lvbklkKTtcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ncnBjQ2xpZW50LnNlc3Npb25fY2xvc2UocmVxLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGF0YWJhc2UoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFiYXNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2Vzc2lvblR5cGUodHlwZTogR3Jha24uU2Vzc2lvblR5cGUpOiBTZXNzaW9uUHJvdG8uU2Vzc2lvbi5UeXBlIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBHcmFrbi5TZXNzaW9uVHlwZS5EQVRBOlxuICAgICAgICAgICAgcmV0dXJuIFNlc3Npb25Qcm90by5TZXNzaW9uLlR5cGUuREFUQTtcbiAgICAgICAgY2FzZSBHcmFrbi5TZXNzaW9uVHlwZS5TQ0hFTUE6XG4gICAgICAgICAgICByZXR1cm4gU2Vzc2lvblByb3RvLlNlc3Npb24uVHlwZS5TQ0hFTUE7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBcIlVucmVjb2duaXplZCBUeXBlXCI7XG4gICAgfVxufVxuIl19