/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/rpc/RPCSession", ["require", "exports", "grakn-client/dependencies_internal", "graknlabs-grpc-protocol/protobuf/session_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RPCSession = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    const session_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/session_pb"));
    class RPCSession {
        constructor(grpcClient, database, type) {
            this._database = database;
            this._type = type;
            this._grpcClient = grpcClient;
        }
        open(options = new dependencies_internal_1.GraknOptions()) {
            return __awaiter(this, void 0, void 0, function* () {
                const openReq = new session_pb_1.default.Session.Open.Req()
                    .setDatabase(this._database)
                    .setType(sessionType(this._type))
                    .setOptions(dependencies_internal_1.ProtoBuilder.options(options));
                this._isOpen = true;
                const res = yield new Promise((resolve, reject) => {
                    this._grpcClient.session_open(openReq, (err, res) => {
                        if (err)
                            reject(err);
                        else
                            resolve(res);
                    });
                });
                this._sessionId = res.getSessionId_asB64();
                return this;
            });
        }
        transaction(type, options = new dependencies_internal_1.GraknOptions()) {
            const transaction = new dependencies_internal_1.RPCTransaction(this._grpcClient, type);
            return transaction.open(this._sessionId, options);
        }
        type() {
            return this._type;
        }
        isOpen() {
            return this._isOpen;
        }
        close() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this._isOpen) {
                    this._isOpen = false;
                    const req = new session_pb_1.default.Session.Close.Req().setSessionId(this._sessionId);
                    yield new Promise((resolve, reject) => {
                        this._grpcClient.session_close(req, (err) => {
                            if (err)
                                reject(err);
                            else
                                resolve();
                        });
                    });
                }
            });
        }
        database() {
            return this._database;
        }
    }
    exports.RPCSession = RPCSession;
    function sessionType(type) {
        switch (type) {
            case dependencies_internal_1.Grakn.SessionType.DATA:
                return session_pb_1.default.Session.Type.DATA;
            case dependencies_internal_1.Grakn.SessionType.SCHEMA:
                return session_pb_1.default.Session.Type.SCHEMA;
            default:
                throw "Unrecognized Type";
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUlBDU2Vzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3JwYy9SUENTZXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUVILDhFQUtrQztJQUdsQyw2RkFBdUU7SUFFdkUsTUFBYSxVQUFVO1FBT25CLFlBQVksVUFBcUIsRUFBRSxRQUFnQixFQUFFLElBQXVCO1lBQ3hFLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1lBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO1FBQ2xDLENBQUM7UUFFSyxJQUFJLENBQUMsVUFBd0IsSUFBSSxvQ0FBWSxFQUFFOztnQkFDakQsTUFBTSxPQUFPLEdBQUcsSUFBSSxvQkFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO3FCQUM5QyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztxQkFDM0IsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ2hDLFVBQVUsQ0FBQyxvQ0FBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUMvQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDcEIsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLE9BQU8sQ0FBZ0MsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7b0JBQzdFLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTt3QkFDaEQsSUFBSSxHQUFHOzRCQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7NEJBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDdEIsQ0FBQyxDQUFDLENBQUM7Z0JBQ1AsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztnQkFDM0MsT0FBTyxJQUFJLENBQUM7WUFDaEIsQ0FBQztTQUFBO1FBRUQsV0FBVyxDQUFDLElBQTJCLEVBQUUsVUFBd0IsSUFBSSxvQ0FBWSxFQUFFO1lBQy9FLE1BQU0sV0FBVyxHQUFHLElBQUksc0NBQWMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQy9ELE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3RELENBQUM7UUFFRCxJQUFJO1lBQ0EsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RCLENBQUM7UUFFRCxNQUFNO1lBQ0YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3hCLENBQUM7UUFFSyxLQUFLOztnQkFDUCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7b0JBQ2QsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7b0JBQ3JCLE1BQU0sR0FBRyxHQUFHLElBQUksb0JBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQy9FLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7d0JBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFOzRCQUN4QyxJQUFJLEdBQUc7Z0NBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztnQ0FDaEIsT0FBTyxFQUFFLENBQUM7d0JBQ25CLENBQUMsQ0FBQyxDQUFDO29CQUNQLENBQUMsQ0FBQyxDQUFDO2lCQUNOO1lBQ0wsQ0FBQztTQUFBO1FBRUQsUUFBUTtZQUNKLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUMxQixDQUFDO0tBQ0o7SUExREQsZ0NBMERDO0lBRUQsU0FBUyxXQUFXLENBQUMsSUFBdUI7UUFDeEMsUUFBUSxJQUFJLEVBQUU7WUFDVixLQUFLLDZCQUFLLENBQUMsV0FBVyxDQUFDLElBQUk7Z0JBQ3ZCLE9BQU8sb0JBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUMxQyxLQUFLLDZCQUFLLENBQUMsV0FBVyxDQUFDLE1BQU07Z0JBQ3pCLE9BQU8sb0JBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUM1QztnQkFDSSxNQUFNLG1CQUFtQixDQUFDO1NBQ2pDO0lBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIEdyYWtuLFxuICAgIFByb3RvQnVpbGRlcixcbiAgICBHcmFrbk9wdGlvbnMsXG4gICAgUlBDVHJhbnNhY3Rpb24sXG59IGZyb20gXCIuLi9kZXBlbmRlbmNpZXNfaW50ZXJuYWxcIjtcbmltcG9ydCBHcmFrblByb3RvIGZyb20gXCJncmFrbmxhYnMtZ3JwYy1wcm90b2NvbC9wcm90b2J1Zi9ncmFrbl9ncnBjX3BiXCI7XG5pbXBvcnQgR3Jha25HcnBjID0gR3Jha25Qcm90by5HcmFrbkNsaWVudDtcbmltcG9ydCBTZXNzaW9uUHJvdG8gZnJvbSBcImdyYWtubGFicy1ncnBjLXByb3RvY29sL3Byb3RvYnVmL3Nlc3Npb25fcGJcIjtcblxuZXhwb3J0IGNsYXNzIFJQQ1Nlc3Npb24gaW1wbGVtZW50cyBHcmFrbi5TZXNzaW9uIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ncnBjQ2xpZW50OiBHcmFrbkdycGM7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfZGF0YWJhc2U6IHN0cmluZztcbiAgICBwcml2YXRlIHJlYWRvbmx5IF90eXBlOiBHcmFrbi5TZXNzaW9uVHlwZTtcbiAgICBwcml2YXRlIF9zZXNzaW9uSWQ6IHN0cmluZztcbiAgICBwcml2YXRlIF9pc09wZW46IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihncnBjQ2xpZW50OiBHcmFrbkdycGMsIGRhdGFiYXNlOiBzdHJpbmcsIHR5cGU6IEdyYWtuLlNlc3Npb25UeXBlKSB7XG4gICAgICAgIHRoaXMuX2RhdGFiYXNlID0gZGF0YWJhc2U7XG4gICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLl9ncnBjQ2xpZW50ID0gZ3JwY0NsaWVudDtcbiAgICB9XG5cbiAgICBhc3luYyBvcGVuKG9wdGlvbnM6IEdyYWtuT3B0aW9ucyA9IG5ldyBHcmFrbk9wdGlvbnMoKSk6IFByb21pc2U8R3Jha24uU2Vzc2lvbj4ge1xuICAgICAgICBjb25zdCBvcGVuUmVxID0gbmV3IFNlc3Npb25Qcm90by5TZXNzaW9uLk9wZW4uUmVxKClcbiAgICAgICAgICAgIC5zZXREYXRhYmFzZSh0aGlzLl9kYXRhYmFzZSlcbiAgICAgICAgICAgIC5zZXRUeXBlKHNlc3Npb25UeXBlKHRoaXMuX3R5cGUpKVxuICAgICAgICAgICAgLnNldE9wdGlvbnMoUHJvdG9CdWlsZGVyLm9wdGlvbnMob3B0aW9ucykpO1xuICAgICAgICB0aGlzLl9pc09wZW4gPSB0cnVlO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBuZXcgUHJvbWlzZTxTZXNzaW9uUHJvdG8uU2Vzc2lvbi5PcGVuLlJlcz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fZ3JwY0NsaWVudC5zZXNzaW9uX29wZW4ob3BlblJlcSwgKGVyciwgcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgZWxzZSByZXNvbHZlKHJlcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3Nlc3Npb25JZCA9IHJlcy5nZXRTZXNzaW9uSWRfYXNCNjQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdHJhbnNhY3Rpb24odHlwZTogR3Jha24uVHJhbnNhY3Rpb25UeXBlLCBvcHRpb25zOiBHcmFrbk9wdGlvbnMgPSBuZXcgR3Jha25PcHRpb25zKCkpOiBQcm9taXNlPEdyYWtuLlRyYW5zYWN0aW9uPiB7XG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gbmV3IFJQQ1RyYW5zYWN0aW9uKHRoaXMuX2dycGNDbGllbnQsIHR5cGUpO1xuICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb24ub3Blbih0aGlzLl9zZXNzaW9uSWQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHR5cGUoKTogR3Jha24uU2Vzc2lvblR5cGUge1xuICAgICAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgICB9XG5cbiAgICBpc09wZW4oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc09wZW47XG4gICAgfVxuXG4gICAgYXN5bmMgY2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICh0aGlzLl9pc09wZW4pIHtcbiAgICAgICAgICAgIHRoaXMuX2lzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgcmVxID0gbmV3IFNlc3Npb25Qcm90by5TZXNzaW9uLkNsb3NlLlJlcSgpLnNldFNlc3Npb25JZCh0aGlzLl9zZXNzaW9uSWQpO1xuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2dycGNDbGllbnQuc2Vzc2lvbl9jbG9zZShyZXEsIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkYXRhYmFzZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YWJhc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXNzaW9uVHlwZSh0eXBlOiBHcmFrbi5TZXNzaW9uVHlwZSk6IFNlc3Npb25Qcm90by5TZXNzaW9uLlR5cGUge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIEdyYWtuLlNlc3Npb25UeXBlLkRBVEE6XG4gICAgICAgICAgICByZXR1cm4gU2Vzc2lvblByb3RvLlNlc3Npb24uVHlwZS5EQVRBO1xuICAgICAgICBjYXNlIEdyYWtuLlNlc3Npb25UeXBlLlNDSEVNQTpcbiAgICAgICAgICAgIHJldHVybiBTZXNzaW9uUHJvdG8uU2Vzc2lvbi5UeXBlLlNDSEVNQTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IFwiVW5yZWNvZ25pemVkIFR5cGVcIjtcbiAgICB9XG59XG4iXX0=