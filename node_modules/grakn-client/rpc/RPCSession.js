/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/rpc/RPCSession", ["require", "exports", "grakn-client/dependencies_internal", "graknlabs-protocol/protobuf/session_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RPCSession = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    const session_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/session_pb"));
    class RPCSession {
        constructor(grpcClient, database, type) {
            this._database = database;
            this._type = type;
            this._grpcClient = grpcClient;
        }
        open(options = new dependencies_internal_1.GraknOptions()) {
            return __awaiter(this, void 0, void 0, function* () {
                const openReq = new session_pb_1.default.Session.Open.Req()
                    .setDatabase(this._database)
                    .setType(sessionType(this._type))
                    .setOptions(dependencies_internal_1.ProtoBuilder.options(options));
                this._isOpen = true;
                const res = yield new Promise((resolve, reject) => {
                    this._grpcClient.session_open(openReq, (err, res) => {
                        if (err)
                            reject(err);
                        else
                            resolve(res);
                    });
                });
                this._sessionId = res.getSessionId_asB64();
                this._pulse = setTimeout(() => this.pulse(), 5000);
                return this;
            });
        }
        transaction(type, options = new dependencies_internal_1.GraknOptions()) {
            const transaction = new dependencies_internal_1.RPCTransaction(this._grpcClient, type);
            return transaction.open(this._sessionId, options);
        }
        type() {
            return this._type;
        }
        isOpen() {
            return this._isOpen;
        }
        close() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this._isOpen) {
                    this._isOpen = false;
                    clearTimeout(this._pulse);
                    const req = new session_pb_1.default.Session.Close.Req().setSessionId(this._sessionId);
                    yield new Promise((resolve, reject) => {
                        this._grpcClient.session_close(req, (err) => {
                            if (err)
                                reject(err);
                            else
                                resolve();
                        });
                    });
                }
            });
        }
        database() {
            return this._database;
        }
        pulse() {
            if (!this._isOpen)
                return;
            const pulse = new session_pb_1.default.Session.Pulse.Req().setSessionId(this._sessionId);
            this._grpcClient.session_pulse(pulse, (err) => {
                if (err)
                    return; // Generally means the session has been closed, which is fine
                else
                    this._pulse = setTimeout(() => this.pulse(), 5000);
            });
        }
    }
    exports.RPCSession = RPCSession;
    function sessionType(type) {
        switch (type) {
            case dependencies_internal_1.Grakn.SessionType.DATA:
                return session_pb_1.default.Session.Type.DATA;
            case dependencies_internal_1.Grakn.SessionType.SCHEMA:
                return session_pb_1.default.Session.Type.SCHEMA;
            default:
                throw new dependencies_internal_1.GraknClientError(dependencies_internal_1.ErrorMessage.Client.UNRECOGNISED_SESSION_TYPE.message());
        }
    }
});
//# sourceMappingURL=data:application/json;base64,