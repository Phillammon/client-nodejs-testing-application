/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/rpc/Stream", ["require", "exports", "graknlabs-protocol/protobuf/transaction_pb", "grakn-client/dependencies_internal"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Stream = void 0;
    const transaction_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/transaction_pb"));
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    class Stream {
        constructor(requestId, writableStream, responseCollector, transformResponse) {
            this._requestId = requestId;
            this._transformResponse = transformResponse;
            this._writableStream = writableStream;
            this._responseCollector = responseCollector;
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        [Symbol.asyncIterator]() {
            return __asyncGenerator(this, arguments, function* _a() {
                while (true) {
                    const next = yield __await(this.next());
                    if (next != null)
                        yield yield __await(next);
                    else
                        break;
                }
            });
        }
        next() {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                if ((_a = this._receivedAnswers) === null || _a === void 0 ? void 0 : _a.length) {
                    return this._receivedAnswers.shift();
                }
                const res = yield this._responseCollector.take();
                switch (res.getResCase()) {
                    case transaction_pb_1.default.Transaction.Res.ResCase.CONTINUE:
                        this._writableStream.write(new transaction_pb_1.default.Transaction.Req()
                            .setId(this._requestId).setContinue(true));
                        return this.next();
                    case transaction_pb_1.default.Transaction.Res.ResCase.DONE:
                        return undefined;
                    case transaction_pb_1.default.Transaction.Res.ResCase.RES_NOT_SET:
                        throw new dependencies_internal_1.GraknClientError(dependencies_internal_1.ErrorMessage.Client.MISSING_RESPONSE.message());
                    default:
                        this._receivedAnswers = this._transformResponse(res);
                        return this.next();
                }
            });
        }
        collect() {
            var e_1, _a;
            return __awaiter(this, void 0, void 0, function* () {
                const answers = [];
                try {
                    for (var _b = __asyncValues(this), _c; _c = yield _b.next(), !_c.done;) {
                        const answer = _c.value;
                        answers.push(answer);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return answers;
            });
        }
        map(callbackFn) {
            return new Stream(this._requestId, this._writableStream, this._responseCollector, res => this._transformResponse(res).map(callbackFn));
        }
    }
    exports.Stream = Stream;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RyZWFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcnBjL1N0cmVhbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBR0gsZ0dBQTBFO0lBQzFFLDhFQUlrQztJQUVsQyxNQUFhLE1BQU07UUFTZixZQUFtQixTQUFpQixFQUFFLGNBQXNFLEVBQ3pGLGlCQUFvQyxFQUFFLGlCQUFpRTtZQUN0SCxJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztZQUM1QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsaUJBQWlCLENBQUM7WUFDNUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7WUFDdEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGlCQUFpQixDQUFDO1FBQ2hELENBQUM7UUFFRCw4REFBOEQ7UUFDdkQsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztnQkFDekIsT0FBTyxJQUFJLEVBQUU7b0JBQ1QsTUFBTSxJQUFJLEdBQUcsY0FBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUEsQ0FBQTtvQkFDOUIsSUFBSSxJQUFJLElBQUksSUFBSTt3QkFBRSxvQkFBTSxJQUFJLENBQUEsQ0FBQzs7d0JBQ3hCLE1BQU07aUJBQ2Q7WUFDTCxDQUFDO1NBQUE7UUFFSyxJQUFJOzs7Z0JBQ04sVUFBSSxJQUFJLENBQUMsZ0JBQWdCLDBDQUFFLE1BQU0sRUFBRTtvQkFDL0IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7aUJBQ3hDO2dCQUVELE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNqRCxRQUFRLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRTtvQkFDdEIsS0FBSyx3QkFBZ0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRO3dCQUNsRCxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLHdCQUFnQixDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7NkJBQzVELEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBQy9DLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO29CQUN2QixLQUFLLHdCQUFnQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUk7d0JBQzlDLE9BQU8sU0FBUyxDQUFDO29CQUNyQixLQUFLLHdCQUFnQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVc7d0JBQ3JELE1BQU0sSUFBSSx3Q0FBZ0IsQ0FBQyxvQ0FBWSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO29CQUMvRTt3QkFDSSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUNyRCxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDMUI7O1NBQ0o7UUFFSyxPQUFPOzs7Z0JBQ1QsTUFBTSxPQUFPLEdBQVEsRUFBRSxDQUFDOztvQkFDeEIsS0FBMkIsSUFBQSxLQUFBLGNBQUEsSUFBSSxDQUFBLElBQUE7d0JBQXBCLE1BQU0sTUFBTSxXQUFBLENBQUE7d0JBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7cUJBQ3hCOzs7Ozs7Ozs7Z0JBQ0QsT0FBTyxPQUFPLENBQUM7O1NBQ2xCO1FBRUQsR0FBRyxDQUFVLFVBQWlDO1lBQzFDLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUMzSSxDQUFDO0tBQ0o7SUExREQsd0JBMERDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENsaWVudFdyaXRhYmxlU3RyZWFtIH0gZnJvbSBcIkBncnBjL2dycGMtanNcIjtcbmltcG9ydCBUcmFuc2FjdGlvblByb3RvIGZyb20gXCJncmFrbmxhYnMtcHJvdG9jb2wvcHJvdG9idWYvdHJhbnNhY3Rpb25fcGJcIjtcbmltcG9ydCB7XG4gICAgRXJyb3JNZXNzYWdlLFxuICAgIEdyYWtuQ2xpZW50RXJyb3IsXG4gICAgUmVzcG9uc2VDb2xsZWN0b3IsXG59IGZyb20gXCIuLi9kZXBlbmRlbmNpZXNfaW50ZXJuYWxcIjtcblxuZXhwb3J0IGNsYXNzIFN0cmVhbTxUPiBpbXBsZW1lbnRzIEFzeW5jSXRlcmFibGU8VD4ge1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBfcmVxdWVzdElkOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfd3JpdGFibGVTdHJlYW06IENsaWVudFdyaXRhYmxlU3RyZWFtPFRyYW5zYWN0aW9uUHJvdG8uVHJhbnNhY3Rpb24uUmVxPjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9yZXNwb25zZUNvbGxlY3RvcjogUmVzcG9uc2VDb2xsZWN0b3I7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfdHJhbnNmb3JtUmVzcG9uc2U6IChyZXM6IFRyYW5zYWN0aW9uUHJvdG8uVHJhbnNhY3Rpb24uUmVzKSA9PiBUW107XG5cbiAgICBwcml2YXRlIF9yZWNlaXZlZEFuc3dlcnM6IFRbXTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihyZXF1ZXN0SWQ6IHN0cmluZywgd3JpdGFibGVTdHJlYW06IENsaWVudFdyaXRhYmxlU3RyZWFtPFRyYW5zYWN0aW9uUHJvdG8uVHJhbnNhY3Rpb24uUmVxPixcbiAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VDb2xsZWN0b3I6IFJlc3BvbnNlQ29sbGVjdG9yLCB0cmFuc2Zvcm1SZXNwb25zZTogKHJlczogVHJhbnNhY3Rpb25Qcm90by5UcmFuc2FjdGlvbi5SZXMpID0+IFRbXSkge1xuICAgICAgICB0aGlzLl9yZXF1ZXN0SWQgPSByZXF1ZXN0SWQ7XG4gICAgICAgIHRoaXMuX3RyYW5zZm9ybVJlc3BvbnNlID0gdHJhbnNmb3JtUmVzcG9uc2U7XG4gICAgICAgIHRoaXMuX3dyaXRhYmxlU3RyZWFtID0gd3JpdGFibGVTdHJlYW07XG4gICAgICAgIHRoaXMuX3Jlc3BvbnNlQ29sbGVjdG9yID0gcmVzcG9uc2VDb2xsZWN0b3I7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBhc3luYyogW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpOiBBc3luY0l0ZXJhdG9yPFQsIGFueSwgdW5kZWZpbmVkPiB7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gYXdhaXQgdGhpcy5uZXh0KClcbiAgICAgICAgICAgIGlmIChuZXh0ICE9IG51bGwpIHlpZWxkIG5leHQ7XG4gICAgICAgICAgICBlbHNlIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgbmV4dCgpOiBQcm9taXNlPFQ+IHtcbiAgICAgICAgaWYgKHRoaXMuX3JlY2VpdmVkQW5zd2Vycz8ubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjZWl2ZWRBbnN3ZXJzLnNoaWZ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLl9yZXNwb25zZUNvbGxlY3Rvci50YWtlKCk7XG4gICAgICAgIHN3aXRjaCAocmVzLmdldFJlc0Nhc2UoKSkge1xuICAgICAgICAgICAgY2FzZSBUcmFuc2FjdGlvblByb3RvLlRyYW5zYWN0aW9uLlJlcy5SZXNDYXNlLkNPTlRJTlVFOlxuICAgICAgICAgICAgICAgIHRoaXMuX3dyaXRhYmxlU3RyZWFtLndyaXRlKG5ldyBUcmFuc2FjdGlvblByb3RvLlRyYW5zYWN0aW9uLlJlcSgpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJZCh0aGlzLl9yZXF1ZXN0SWQpLnNldENvbnRpbnVlKHRydWUpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZXh0KCk7XG4gICAgICAgICAgICBjYXNlIFRyYW5zYWN0aW9uUHJvdG8uVHJhbnNhY3Rpb24uUmVzLlJlc0Nhc2UuRE9ORTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FzZSBUcmFuc2FjdGlvblByb3RvLlRyYW5zYWN0aW9uLlJlcy5SZXNDYXNlLlJFU19OT1RfU0VUOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBHcmFrbkNsaWVudEVycm9yKEVycm9yTWVzc2FnZS5DbGllbnQuTUlTU0lOR19SRVNQT05TRS5tZXNzYWdlKCkpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNlaXZlZEFuc3dlcnMgPSB0aGlzLl90cmFuc2Zvcm1SZXNwb25zZShyZXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5leHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGNvbGxlY3QoKTogUHJvbWlzZTxUW10+IHtcbiAgICAgICAgY29uc3QgYW5zd2VyczogVFtdID0gW107XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgYW5zd2VyIG9mIHRoaXMpIHtcbiAgICAgICAgICAgIGFuc3dlcnMucHVzaChhbnN3ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbnN3ZXJzO1xuICAgIH1cblxuICAgIG1hcDxUUmVzdWx0PihjYWxsYmFja0ZuOiAodmFsdWU6IFQpID0+IFRSZXN1bHQpOiBTdHJlYW08VFJlc3VsdD4ge1xuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbSh0aGlzLl9yZXF1ZXN0SWQsIHRoaXMuX3dyaXRhYmxlU3RyZWFtLCB0aGlzLl9yZXNwb25zZUNvbGxlY3RvciwgcmVzID0+IHRoaXMuX3RyYW5zZm9ybVJlc3BvbnNlKHJlcykubWFwKGNhbGxiYWNrRm4pKTtcbiAgICB9XG59XG4iXX0=