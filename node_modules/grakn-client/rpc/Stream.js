/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/rpc/Stream", ["require", "exports", "graknlabs-grpc-protocol/protobuf/transaction_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Stream = void 0;
    const transaction_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/transaction_pb"));
    class Stream {
        constructor(requestId, writableStream, responseCollector, transformResponse) {
            this._requestId = requestId;
            this._transformResponse = transformResponse;
            this._writableStream = writableStream;
            this._responseCollector = responseCollector;
        }
        *[Symbol.iterator]() {
            while (true)
                yield this.next();
        }
        next() {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                if ((_a = this._receivedAnswers) === null || _a === void 0 ? void 0 : _a.length) {
                    return this._receivedAnswers.shift();
                }
                const res = yield this._responseCollector.take();
                switch (res.getResCase()) {
                    case transaction_pb_1.default.Transaction.Res.ResCase.CONTINUE:
                        const continueReq = new transaction_pb_1.default.Transaction.Req()
                            .setId(this._requestId).setContinue(true);
                        this._writableStream.write(continueReq);
                        return this.next();
                    case transaction_pb_1.default.Transaction.Res.ResCase.DONE:
                        return undefined;
                    case transaction_pb_1.default.Transaction.Res.ResCase.RES_NOT_SET:
                        throw "Missing response";
                    default:
                        this._receivedAnswers = this._transformResponse(res);
                        return this.next();
                }
            });
        }
        collect() {
            return __awaiter(this, void 0, void 0, function* () {
                const answers = [];
                for (const getAnswer of this) {
                    const answer = yield getAnswer;
                    if (answer != null)
                        answers.push(answer);
                    else
                        break;
                }
                return answers;
            });
        }
    }
    exports.Stream = Stream;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RyZWFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcnBjL1N0cmVhbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFHSCxxR0FBK0U7SUFHL0UsTUFBYSxNQUFNO1FBU2YsWUFBbUIsU0FBaUIsRUFBRSxjQUFzRSxFQUN6RixpQkFBb0MsRUFBRSxpQkFBaUU7WUFDdEgsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7WUFDNUIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGlCQUFpQixDQUFDO1lBQzVDLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQztRQUNoRCxDQUFDO1FBRUQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7WUFDZCxPQUFPLElBQUk7Z0JBQUUsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbkMsQ0FBQztRQUVLLElBQUk7OztnQkFDTixVQUFJLElBQUksQ0FBQyxnQkFBZ0IsMENBQUUsTUFBTSxFQUFFO29CQUMvQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDeEM7Z0JBRUQsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2pELFFBQVEsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFO29CQUN0QixLQUFLLHdCQUFnQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVE7d0JBQ2xELE1BQU0sV0FBVyxHQUFHLElBQUksd0JBQWdCLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRTs2QkFDckQsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQzlDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO3dCQUN4QyxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDdkIsS0FBSyx3QkFBZ0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJO3dCQUM5QyxPQUFPLFNBQVMsQ0FBQztvQkFDckIsS0FBSyx3QkFBZ0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXO3dCQUNyRCxNQUFNLGtCQUFrQixDQUFDO29CQUM3Qjt3QkFDSSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUNyRCxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDMUI7O1NBQ0o7UUFFSyxPQUFPOztnQkFDVCxNQUFNLE9BQU8sR0FBUSxFQUFFLENBQUM7Z0JBQ3hCLEtBQUssTUFBTSxTQUFTLElBQUksSUFBSSxFQUFFO29CQUMxQixNQUFNLE1BQU0sR0FBRyxNQUFNLFNBQVMsQ0FBQztvQkFDL0IsSUFBSSxNQUFNLElBQUksSUFBSTt3QkFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOzt3QkFDcEMsTUFBTTtpQkFDZDtnQkFDRCxPQUFPLE9BQU8sQ0FBQztZQUNuQixDQUFDO1NBQUE7S0FDSjtJQXBERCx3QkFvREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ2xpZW50V3JpdGFibGVTdHJlYW0gfSBmcm9tIFwiQGdycGMvZ3JwYy1qc1wiO1xuaW1wb3J0IFRyYW5zYWN0aW9uUHJvdG8gZnJvbSBcImdyYWtubGFicy1ncnBjLXByb3RvY29sL3Byb3RvYnVmL3RyYW5zYWN0aW9uX3BiXCI7XG5pbXBvcnQgeyBSZXNwb25zZUNvbGxlY3RvciB9IGZyb20gXCIuL1JQQ1RyYW5zYWN0aW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBTdHJlYW08VD4gaW1wbGVtZW50cyBJdGVyYWJsZTxQcm9taXNlPFQ+PiB7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9yZXF1ZXN0SWQ6IHN0cmluZztcbiAgICBwcml2YXRlIHJlYWRvbmx5IF93cml0YWJsZVN0cmVhbTogQ2xpZW50V3JpdGFibGVTdHJlYW08VHJhbnNhY3Rpb25Qcm90by5UcmFuc2FjdGlvbi5SZXE+O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX3Jlc3BvbnNlQ29sbGVjdG9yOiBSZXNwb25zZUNvbGxlY3RvcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF90cmFuc2Zvcm1SZXNwb25zZTogKHJlczogVHJhbnNhY3Rpb25Qcm90by5UcmFuc2FjdGlvbi5SZXMpID0+IFRbXTtcblxuICAgIHByaXZhdGUgX3JlY2VpdmVkQW5zd2VyczogVFtdO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHJlcXVlc3RJZDogc3RyaW5nLCB3cml0YWJsZVN0cmVhbTogQ2xpZW50V3JpdGFibGVTdHJlYW08VHJhbnNhY3Rpb25Qcm90by5UcmFuc2FjdGlvbi5SZXE+LFxuICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZUNvbGxlY3RvcjogUmVzcG9uc2VDb2xsZWN0b3IsIHRyYW5zZm9ybVJlc3BvbnNlOiAocmVzOiBUcmFuc2FjdGlvblByb3RvLlRyYW5zYWN0aW9uLlJlcykgPT4gVFtdKSB7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RJZCA9IHJlcXVlc3RJZDtcbiAgICAgICAgdGhpcy5fdHJhbnNmb3JtUmVzcG9uc2UgPSB0cmFuc2Zvcm1SZXNwb25zZTtcbiAgICAgICAgdGhpcy5fd3JpdGFibGVTdHJlYW0gPSB3cml0YWJsZVN0cmVhbTtcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VDb2xsZWN0b3IgPSByZXNwb25zZUNvbGxlY3RvcjtcbiAgICB9XG5cbiAgICAqW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmF0b3I8UHJvbWlzZTxUPj4ge1xuICAgICAgICB3aGlsZSAodHJ1ZSkgeWllbGQgdGhpcy5uZXh0KCk7XG4gICAgfVxuXG4gICAgYXN5bmMgbmV4dCgpOiBQcm9taXNlPFQ+IHtcbiAgICAgICAgaWYgKHRoaXMuX3JlY2VpdmVkQW5zd2Vycz8ubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjZWl2ZWRBbnN3ZXJzLnNoaWZ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLl9yZXNwb25zZUNvbGxlY3Rvci50YWtlKCk7XG4gICAgICAgIHN3aXRjaCAocmVzLmdldFJlc0Nhc2UoKSkge1xuICAgICAgICAgICAgY2FzZSBUcmFuc2FjdGlvblByb3RvLlRyYW5zYWN0aW9uLlJlcy5SZXNDYXNlLkNPTlRJTlVFOlxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRpbnVlUmVxID0gbmV3IFRyYW5zYWN0aW9uUHJvdG8uVHJhbnNhY3Rpb24uUmVxKClcbiAgICAgICAgICAgICAgICAgICAgLnNldElkKHRoaXMuX3JlcXVlc3RJZCkuc2V0Q29udGludWUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd3JpdGFibGVTdHJlYW0ud3JpdGUoY29udGludWVSZXEpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgIGNhc2UgVHJhbnNhY3Rpb25Qcm90by5UcmFuc2FjdGlvbi5SZXMuUmVzQ2FzZS5ET05FOlxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYXNlIFRyYW5zYWN0aW9uUHJvdG8uVHJhbnNhY3Rpb24uUmVzLlJlc0Nhc2UuUkVTX05PVF9TRVQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJNaXNzaW5nIHJlc3BvbnNlXCI7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuX3JlY2VpdmVkQW5zd2VycyA9IHRoaXMuX3RyYW5zZm9ybVJlc3BvbnNlKHJlcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgY29sbGVjdCgpOiBQcm9taXNlPFRbXT4ge1xuICAgICAgICBjb25zdCBhbnN3ZXJzOiBUW10gPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBnZXRBbnN3ZXIgb2YgdGhpcykge1xuICAgICAgICAgICAgY29uc3QgYW5zd2VyID0gYXdhaXQgZ2V0QW5zd2VyO1xuICAgICAgICAgICAgaWYgKGFuc3dlciAhPSBudWxsKSBhbnN3ZXJzLnB1c2goYW5zd2VyKTtcbiAgICAgICAgICAgIGVsc2UgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuc3dlcnM7XG4gICAgfVxufVxuIl19