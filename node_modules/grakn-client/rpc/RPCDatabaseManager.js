/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/rpc/RPCDatabaseManager", ["require", "exports", "graknlabs-grpc-protocol/protobuf/database_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RPCDatabaseManager = void 0;
    //import { Database } from "graknlabs-grpc-protocol/protobuf/database_pb";
    const database_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/database_pb"));
    const { Database } = database_pb_1.default;
    class RPCDatabaseManager {
        constructor(client) {
            this._grpcClient = client;
        }
        contains(name) {
            if (!name)
                throw "Database name cannot be null or empty.";
            const req = new Database.Contains.Req().setName(name);
            return new Promise((resolve, reject) => {
                this._grpcClient.database_contains(req, (err, res) => {
                    if (err)
                        reject(err);
                    else
                        resolve(res.getContains());
                });
            });
        }
        create(name) {
            if (!name)
                throw "Database name cannot be null or empty.";
            const req = new Database.Create.Req().setName(name);
            return new Promise((resolve, reject) => {
                this._grpcClient.database_create(req, (err) => {
                    if (err)
                        reject(err);
                    else
                        resolve();
                });
            });
        }
        delete(name) {
            if (!name)
                throw "Database name cannot be null or empty.";
            const req = new Database.Delete.Req().setName(name);
            return new Promise((resolve, reject) => {
                this._grpcClient.database_delete(req, (err) => {
                    if (err)
                        reject(err);
                    else
                        resolve();
                });
            });
        }
        all() {
            const allRequest = new Database.All.Req();
            return new Promise((resolve, reject) => {
                this._grpcClient.database_all(allRequest, (err, res) => {
                    if (err)
                        reject(err);
                    else
                        resolve(res.getNamesList());
                });
            });
        }
    }
    exports.RPCDatabaseManager = RPCDatabaseManager;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUlBDRGF0YWJhc2VNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcnBjL1JQQ0RhdGFiYXNlTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7Ozs7Ozs7Ozs7Ozs7Ozs7SUFNSCwwRUFBMEU7SUFDMUUsK0ZBQXVFO0lBQ3ZFLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxxQkFBVyxDQUFDO0lBRWpDLE1BQWEsa0JBQWtCO1FBRzNCLFlBQVksTUFBaUI7WUFDekIsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUM7UUFDOUIsQ0FBQztRQUVELFFBQVEsQ0FBQyxJQUFZO1lBQ2pCLElBQUksQ0FBQyxJQUFJO2dCQUFFLE1BQU0sd0NBQXdDLENBQUM7WUFDMUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN0RCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO2dCQUNuQyxJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtvQkFDakQsSUFBSSxHQUFHO3dCQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7d0JBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztnQkFDcEMsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBWTtZQUNmLElBQUksQ0FBQyxJQUFJO2dCQUFFLE1BQU0sd0NBQXdDLENBQUM7WUFDMUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO2dCQUNuQyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtvQkFDMUMsSUFBSSxHQUFHO3dCQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7d0JBQ2hCLE9BQU8sRUFBRSxDQUFDO2dCQUNuQixDQUFDLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFZO1lBQ2YsSUFBSSxDQUFDLElBQUk7Z0JBQUUsTUFBTSx3Q0FBd0MsQ0FBQztZQUMxRCxNQUFNLEdBQUcsR0FBRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7Z0JBQ25DLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO29CQUMxQyxJQUFJLEdBQUc7d0JBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDOzt3QkFDaEIsT0FBTyxFQUFFLENBQUM7Z0JBQ25CLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO1FBRUQsR0FBRztZQUNDLE1BQU0sVUFBVSxHQUFHLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUMxQyxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO2dCQUNuQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7b0JBQ25ELElBQUksR0FBRzt3QkFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7O3dCQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7Z0JBQ3JDLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO0tBQ0o7SUFqREQsZ0RBaURDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEdyYWtuQ2xpZW50IGFzIEdyYWtuR3JwYyB9IGZyb20gXCJncmFrbmxhYnMtZ3JwYy1wcm90b2NvbC9wcm90b2J1Zi9ncmFrbl9ncnBjX3BiXCJcbmltcG9ydCB7XG4gICAgR3Jha25cbn0gZnJvbSBcIi4uL2RlcGVuZGVuY2llc19pbnRlcm5hbFwiO1xuLy9pbXBvcnQgeyBEYXRhYmFzZSB9IGZyb20gXCJncmFrbmxhYnMtZ3JwYy1wcm90b2NvbC9wcm90b2J1Zi9kYXRhYmFzZV9wYlwiO1xuaW1wb3J0IGRhdGFiYXNlX3BiIGZyb20gXCJncmFrbmxhYnMtZ3JwYy1wcm90b2NvbC9wcm90b2J1Zi9kYXRhYmFzZV9wYlwiO1xuY29uc3QgeyBEYXRhYmFzZSB9ID0gZGF0YWJhc2VfcGI7XG5cbmV4cG9ydCBjbGFzcyBSUENEYXRhYmFzZU1hbmFnZXIgaW1wbGVtZW50cyBHcmFrbi5EYXRhYmFzZU1hbmFnZXIge1xuICAgIHByaXZhdGUgX2dycGNDbGllbnQ6IEdyYWtuR3JwYztcblxuICAgIGNvbnN0cnVjdG9yKGNsaWVudDogR3Jha25HcnBjKSB7XG4gICAgICAgIHRoaXMuX2dycGNDbGllbnQgPSBjbGllbnQ7XG4gICAgfVxuXG4gICAgY29udGFpbnMobmFtZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGlmICghbmFtZSkgdGhyb3cgXCJEYXRhYmFzZSBuYW1lIGNhbm5vdCBiZSBudWxsIG9yIGVtcHR5LlwiO1xuICAgICAgICBjb25zdCByZXEgPSBuZXcgRGF0YWJhc2UuQ29udGFpbnMuUmVxKCkuc2V0TmFtZShuYW1lKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2dycGNDbGllbnQuZGF0YWJhc2VfY29udGFpbnMocmVxLCAoZXJyLCByZXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICBlbHNlIHJlc29sdmUocmVzLmdldENvbnRhaW5zKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNyZWF0ZShuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKCFuYW1lKSB0aHJvdyBcIkRhdGFiYXNlIG5hbWUgY2Fubm90IGJlIG51bGwgb3IgZW1wdHkuXCI7XG4gICAgICAgIGNvbnN0IHJlcSA9IG5ldyBEYXRhYmFzZS5DcmVhdGUuUmVxKCkuc2V0TmFtZShuYW1lKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2dycGNDbGllbnQuZGF0YWJhc2VfY3JlYXRlKHJlcSwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIGVsc2UgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGRlbGV0ZShuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKCFuYW1lKSB0aHJvdyBcIkRhdGFiYXNlIG5hbWUgY2Fubm90IGJlIG51bGwgb3IgZW1wdHkuXCI7XG4gICAgICAgIGNvbnN0IHJlcSA9IG5ldyBEYXRhYmFzZS5EZWxldGUuUmVxKCkuc2V0TmFtZShuYW1lKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2dycGNDbGllbnQuZGF0YWJhc2VfZGVsZXRlKHJlcSwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIGVsc2UgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFsbCgpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICAgIGNvbnN0IGFsbFJlcXVlc3QgPSBuZXcgRGF0YWJhc2UuQWxsLlJlcSgpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fZ3JwY0NsaWVudC5kYXRhYmFzZV9hbGwoYWxsUmVxdWVzdCwgKGVyciwgcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgZWxzZSByZXNvbHZlKHJlcy5nZXROYW1lc0xpc3QoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19