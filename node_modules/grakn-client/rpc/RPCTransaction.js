/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/rpc/RPCTransaction", ["require", "exports", "grakn-client/Grakn", "grakn-client/concept/ConceptManager", "graknlabs-grpc-protocol/protobuf/transaction_pb", "grakn-client/common/ProtoBuilder", "grakn-client/query/QueryManager", "grakn-client/common/utils", "grakn-client/common/BlockingQueue", "grakn-client/rpc/Stream"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResponseCollector = exports.RPCTransaction = void 0;
    const Grakn_1 = require("grakn-client/Grakn");
    const ConceptManager_1 = require("grakn-client/concept/ConceptManager");
    const transaction_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/transaction_pb"));
    const ProtoBuilder_1 = require("grakn-client/common/ProtoBuilder");
    const QueryManager_1 = require("grakn-client/query/QueryManager");
    const utils_1 = require("grakn-client/common/utils");
    const BlockingQueue_1 = require("grakn-client/common/BlockingQueue");
    const Stream_1 = require("grakn-client/rpc/Stream");
    class RPCTransaction {
        constructor(grpcClient, type) {
            this._type = type;
            this._conceptManager = new ConceptManager_1.ConceptManager(this);
            this._queryManager = new QueryManager_1.QueryManager(this);
            this._collectors = new ResponseCollectors(this);
            this._transactionWasClosed = false;
            this._transactionWasOpened = false;
            this._streamIsOpen = false;
            this._grpcClient = grpcClient;
        }
        open(sessionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                this.openTransactionStream();
                this._streamIsOpen = true;
                const openRequest = new transaction_pb_1.default.Transaction.Req()
                    .setOpenReq(new transaction_pb_1.default.Transaction.Open.Req()
                    .setSessionId(sessionId)
                    .setType(this._type === Grakn_1.Grakn.TransactionType.READ ? transaction_pb_1.default.Transaction.Type.READ : transaction_pb_1.default.Transaction.Type.WRITE)
                    .setOptions(ProtoBuilder_1.ProtoBuilder.options(options)));
                const startTime = new Date().getTime();
                const res = yield this.execute(openRequest, res => res.getOpenRes());
                const endTime = new Date().getTime();
                this._networkLatencyMillis = endTime - startTime - res.getProcessingTimeMillis();
                this._transactionWasOpened = true;
                return this;
            });
        }
        type() {
            return this._type;
        }
        isOpen() {
            return this._transactionWasOpened && !this._transactionWasClosed;
        }
        concepts() {
            return this._conceptManager;
        }
        query() {
            return this._queryManager;
        }
        commit() {
            return __awaiter(this, void 0, void 0, function* () {
                const commitReq = new transaction_pb_1.default.Transaction.Req()
                    .setCommitReq(new transaction_pb_1.default.Transaction.Commit.Req());
                yield this.execute(commitReq);
            });
        }
        rollback() {
            return __awaiter(this, void 0, void 0, function* () {
                const rollbackReq = new transaction_pb_1.default.Transaction.Req()
                    .setRollbackReq(new transaction_pb_1.default.Transaction.Rollback.Req());
                yield this.execute(rollbackReq);
            });
        }
        close() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this._streamIsOpen) {
                    this._streamIsOpen = false;
                    // TODO: close stream, somehow?
                }
                if (!this._transactionWasClosed) {
                    this._transactionWasClosed = true;
                    this._collectors.clearWithError(new ErrorResponse("Transaction closed."));
                }
            });
        }
        execute(request, transformResponse = () => null) {
            const responseCollector = new ResponseCollector();
            const requestId = utils_1.uuidv4();
            request.setId(requestId);
            this._collectors.put(requestId, responseCollector);
            // TODO: we can optionally inject the callback here - perhaps that would be cleaner than using ResponseCollectors?
            this._stream.write(request);
            return responseCollector.take().then(transformResponse);
        }
        stream(request, transformResponse) {
            const responseCollector = new ResponseCollector();
            const requestId = utils_1.uuidv4();
            request.setId(requestId);
            request.setLatencyMillis(this._networkLatencyMillis);
            this._collectors.put(requestId, responseCollector);
            this._stream.write(request);
            return new Stream_1.Stream(requestId, this._stream, responseCollector, transformResponse);
        }
        openTransactionStream() {
            this._stream = this._grpcClient.transaction();
            this._stream.on("data", (res) => {
                const requestId = res.getId();
                const collector = this._collectors.get(requestId);
                if (!collector)
                    throw "Unknown request ID " + requestId;
                collector.add(new OkResponse(res));
            });
            this._stream.on("error", (err) => {
                console.error(err);
            });
            this._stream.on("end", () => {
                this._streamIsOpen = false;
                this.close();
            });
            // TODO: look into _stream.on(status) + any other events
        }
    }
    exports.RPCTransaction = RPCTransaction;
    class ResponseCollectors {
        constructor(transaction) {
            this._map = {};
            this._transaction = transaction;
        }
        get(uuid) {
            return this._map[uuid];
        }
        put(uuid, collector) {
            if (this._transaction["_transactionWasClosed"])
                throw "The transaction has been closed and no further operation is allowed.";
            this._map[uuid] = collector;
        }
        remove(uuid) {
            delete this._map[uuid];
        }
        clearWithError(error) {
            Object.keys(this._map).forEach((requestId) => this._map[requestId].add(error));
            for (const requestId in this._map)
                delete this._map[requestId];
        }
    }
    class ResponseCollector {
        constructor() {
            this._responseBuffer = new BlockingQueue_1.BlockingQueue();
        }
        add(response) {
            this._responseBuffer.add(response);
        }
        take() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._responseBuffer.take();
                return response.read();
            });
        }
    }
    exports.ResponseCollector = ResponseCollector;
    class Response {
    }
    class OkResponse extends Response {
        constructor(res) {
            super();
            this._res = res;
        }
        read() {
            return this._res;
        }
        toString() {
            return "OkResponse {" + this._res.toString() + "}";
        }
    }
    class ErrorResponse extends Response {
        constructor(error) {
            super();
            this._error = error;
        }
        read() {
            throw this._error;
        }
        toString() {
            return "ErrorResponse {" + this._error.toString() + "}";
        }
    }
});
//# sourceMappingURL=data:application/json;base64,