/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/common/ProtoBuilder", ["require", "exports", "graknlabs-grpc-protocol/protobuf/options_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProtoBuilder = void 0;
    const options_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/options_pb"));
    const { Options } = options_pb_1.default;
    var ProtoBuilder;
    (function (ProtoBuilder) {
        function options(options) {
            let optionsProto = new Options();
            if (options) {
                if (options.infer() != null)
                    optionsProto.setInfer(options.infer());
                if (options.explain() != null)
                    optionsProto.setExplain(options.explain());
                if (options.batchSize() != null)
                    optionsProto.setBatchSize(options.batchSize());
            }
            return optionsProto;
        }
        ProtoBuilder.options = options;
    })(ProtoBuilder = exports.ProtoBuilder || (exports.ProtoBuilder = {}));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvdG9CdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29tbW9uL1Byb3RvQnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7Ozs7Ozs7Ozs7Ozs7Ozs7SUFHSCw2RkFBb0U7SUFDcEUsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLG9CQUFVLENBQUM7SUFFL0IsSUFBaUIsWUFBWSxDQVU1QjtJQVZELFdBQWlCLFlBQVk7UUFDekIsU0FBZ0IsT0FBTyxDQUFDLE9BQXNCO1lBQzFDLElBQUksWUFBWSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7WUFDakMsSUFBSSxPQUFPLEVBQUU7Z0JBQ1QsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksSUFBSTtvQkFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQWEsQ0FBQyxDQUFDO2dCQUMvRSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxJQUFJO29CQUFFLFlBQVksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBYSxDQUFDLENBQUM7Z0JBQ3JGLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLElBQUk7b0JBQUUsWUFBWSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFZLENBQUMsQ0FBQzthQUM3RjtZQUNELE9BQU8sWUFBWSxDQUFDO1FBQ3hCLENBQUM7UUFSZSxvQkFBTyxVQVF0QixDQUFBO0lBQ0wsQ0FBQyxFQVZnQixZQUFZLEdBQVosb0JBQVksS0FBWixvQkFBWSxRQVU1QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge0dyYWtuT3B0aW9uc30gZnJvbSBcIi4uL0dyYWtuT3B0aW9uc1wiO1xuaW1wb3J0IG9wdGlvbnNfcGIgZnJvbSBcImdyYWtubGFicy1ncnBjLXByb3RvY29sL3Byb3RvYnVmL29wdGlvbnNfcGJcIlxuY29uc3QgeyBPcHRpb25zIH0gPSBvcHRpb25zX3BiO1xuXG5leHBvcnQgbmFtZXNwYWNlIFByb3RvQnVpbGRlciB7XG4gICAgZXhwb3J0IGZ1bmN0aW9uIG9wdGlvbnMob3B0aW9ucz86IEdyYWtuT3B0aW9ucykge1xuICAgICAgICBsZXQgb3B0aW9uc1Byb3RvID0gbmV3IE9wdGlvbnMoKTtcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmluZmVyKCkgIT0gbnVsbCkgb3B0aW9uc1Byb3RvLnNldEluZmVyKG9wdGlvbnMuaW5mZXIoKSBhcyBib29sZWFuKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmV4cGxhaW4oKSAhPSBudWxsKSBvcHRpb25zUHJvdG8uc2V0RXhwbGFpbihvcHRpb25zLmV4cGxhaW4oKSBhcyBib29sZWFuKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmJhdGNoU2l6ZSgpICE9IG51bGwpIG9wdGlvbnNQcm90by5zZXRCYXRjaFNpemUob3B0aW9ucy5iYXRjaFNpemUoKSBhcyBudW1iZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRpb25zUHJvdG87XG4gICAgfVxufSJdfQ==