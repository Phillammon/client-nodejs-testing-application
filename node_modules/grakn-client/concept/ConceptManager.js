/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/ConceptManager", ["require", "exports", "grakn-client/dependencies_internal", "graknlabs-protocol/protobuf/concept_pb", "graknlabs-protocol/protobuf/transaction_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConceptManager = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    const concept_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/concept_pb"));
    const transaction_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/transaction_pb"));
    class ConceptManager {
        constructor(rpcTransaction) {
            this._rpcTransaction = rpcTransaction;
        }
        getRootThingType() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getType("thing");
            });
        }
        getRootEntityType() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getType("entity");
            });
        }
        getRootRelationType() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getType("relation");
            });
        }
        getRootAttributeType() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getType("attribute");
            });
        }
        putEntityType(label) {
            return __awaiter(this, void 0, void 0, function* () {
                const req = new concept_pb_1.default.ConceptManager.Req()
                    .setPutEntityTypeReq(new concept_pb_1.default.ConceptManager.PutEntityType.Req().setLabel(label));
                const res = yield this.execute(req);
                return dependencies_internal_1.EntityTypeImpl.of(res.getPutEntityTypeRes().getEntityType());
            });
        }
        getEntityType(label) {
            return __awaiter(this, void 0, void 0, function* () {
                const type = yield this.getType(label);
                if (type instanceof dependencies_internal_1.EntityTypeImpl)
                    return type;
                else
                    return null;
            });
        }
        putRelationType(label) {
            return __awaiter(this, void 0, void 0, function* () {
                const req = new concept_pb_1.default.ConceptManager.Req()
                    .setPutRelationTypeReq(new concept_pb_1.default.ConceptManager.PutRelationType.Req().setLabel(label));
                const res = yield this.execute(req);
                return dependencies_internal_1.RelationTypeImpl.of(res.getPutRelationTypeRes().getRelationType());
            });
        }
        getRelationType(label) {
            return __awaiter(this, void 0, void 0, function* () {
                const type = yield this.getType(label);
                if (type instanceof dependencies_internal_1.RelationTypeImpl)
                    return type;
                else
                    return null;
            });
        }
        putAttributeType(label, valueType) {
            return __awaiter(this, void 0, void 0, function* () {
                const req = new concept_pb_1.default.ConceptManager.Req()
                    .setPutAttributeTypeReq(new concept_pb_1.default.ConceptManager.PutAttributeType.Req()
                    .setLabel(label)
                    .setValueType(dependencies_internal_1.ConceptProtoBuilder.valueType(valueType)));
                const res = yield this.execute(req);
                return dependencies_internal_1.ConceptProtoReader.attributeType(res.getPutAttributeTypeRes().getAttributeType());
            });
        }
        getAttributeType(label) {
            return __awaiter(this, void 0, void 0, function* () {
                const type = yield this.getType(label);
                if (type instanceof dependencies_internal_1.AttributeTypeImpl)
                    return type;
                else
                    return null;
            });
        }
        getThing(iid) {
            return __awaiter(this, void 0, void 0, function* () {
                const req = new concept_pb_1.default.ConceptManager.Req()
                    .setGetThingReq(new concept_pb_1.default.ConceptManager.GetThing.Req().setIid(iid));
                const res = yield this.execute(req);
                if (res.getGetThingRes().getResCase() === concept_pb_1.default.ConceptManager.GetThing.Res.ResCase.THING)
                    return dependencies_internal_1.ConceptProtoReader.thing(res.getGetThingRes().getThing());
                else
                    return null;
            });
        }
        getType(label) {
            return __awaiter(this, void 0, void 0, function* () {
                const req = new concept_pb_1.default.ConceptManager.Req()
                    .setGetTypeReq(new concept_pb_1.default.ConceptManager.GetType.Req().setLabel(label));
                const res = yield this.execute(req);
                if (res.getGetTypeRes().getResCase() === concept_pb_1.default.ConceptManager.GetType.Res.ResCase.TYPE)
                    return dependencies_internal_1.ConceptProtoReader.type(res.getGetTypeRes().getType());
                else
                    return null;
            });
        }
        execute(conceptManagerReq) {
            return __awaiter(this, void 0, void 0, function* () {
                const transactionReq = new transaction_pb_1.default.Transaction.Req()
                    .setConceptManagerReq(conceptManagerReq);
                return yield this._rpcTransaction.execute(transactionReq, res => res.getConceptManagerRes());
            });
        }
    }
    exports.ConceptManager = ConceptManager;
});
//# sourceMappingURL=data:application/json;base64,