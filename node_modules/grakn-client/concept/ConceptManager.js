/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/ConceptManager", ["require", "exports", "graknlabs-grpc-protocol/protobuf/concept_pb", "graknlabs-grpc-protocol/protobuf/transaction_pb", "grakn-client/concept/Type/Impl/EntityTypeImpl", "grakn-client/concept/Type/Impl/TypeImpl", "grakn-client/concept/Type/Impl/RuleImpl", "grakn-client/concept/Type/Impl/RelationTypeImpl", "grakn-client/concept/Type/Impl/AttributeTypeImpl", "grakn-client/concept/Proto/ConceptProtoReader"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConceptManager = void 0;
    const concept_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/concept_pb"));
    var ProtoConceptManager = concept_pb_1.default.ConceptManager;
    const transaction_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/transaction_pb"));
    const EntityTypeImpl_1 = require("grakn-client/concept/Type/Impl/EntityTypeImpl");
    const TypeImpl_1 = require("grakn-client/concept/Type/Impl/TypeImpl");
    const RuleImpl_1 = require("grakn-client/concept/Type/Impl/RuleImpl");
    const RelationTypeImpl_1 = require("grakn-client/concept/Type/Impl/RelationTypeImpl");
    const AttributeTypeImpl_1 = require("grakn-client/concept/Type/Impl/AttributeTypeImpl");
    const ConceptProtoReader_1 = require("grakn-client/concept/Proto/ConceptProtoReader");
    class ConceptManager {
        constructor(rpcTransaction) {
            this._rpcTransaction = rpcTransaction;
        }
        getRootThingType() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getType("thing");
            });
        }
        getRootEntityType() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getType("entity");
            });
        }
        getRootRelationType() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getType("relation");
            });
        }
        getRootAttributeType() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getType("attribute");
            });
        }
        putEntityType(label) {
            return __awaiter(this, void 0, void 0, function* () {
                const req = new ProtoConceptManager.Req()
                    .setPutEntityTypeReq(new ProtoConceptManager.PutEntityType.Req().setLabel(label));
                const res = yield this.execute(req);
                return EntityTypeImpl_1.EntityTypeImpl.of(res.getPutEntityTypeRes().getEntityType());
            });
        }
        getEntityType(label) {
            const concept = this.getType(label);
            if (concept instanceof EntityTypeImpl_1.EntityTypeImpl)
                return concept;
            return null;
        }
        putRelationType(label) {
            return __awaiter(this, void 0, void 0, function* () {
                const req = new ProtoConceptManager.Req()
                    .setPutRelationTypeReq(new ProtoConceptManager.PutRelationType.Req().setLabel(label));
                const res = yield this.execute(req);
                return RelationTypeImpl_1.RelationTypeImpl.of(res.getPutRelationTypeRes().getRelationType());
            });
        }
        getRelationType(label) {
            const concept = this.getType(label);
            if (concept instanceof RelationTypeImpl_1.RelationTypeImpl)
                return concept;
            return null;
        }
        putAttributeType(label) {
            return __awaiter(this, void 0, void 0, function* () {
                const req = new ProtoConceptManager.Req()
                    .setPutAttributeTypeReq(new ProtoConceptManager.PutAttributeType.Req().setLabel(label));
                const res = yield this.execute(req);
                return AttributeTypeImpl_1.AttributeTypeImpl.of(res.getPutAttributeTypeRes().getAttributeType());
            });
        }
        getAttributeType(label) {
            const concept = this.getType(label);
            if (concept instanceof AttributeTypeImpl_1.AttributeTypeImpl)
                return concept;
            return null;
        }
        putRule(label, when, then) {
            return __awaiter(this, void 0, void 0, function* () {
                const req = new ProtoConceptManager.Req()
                    .setPutRuleReq(new ProtoConceptManager.PutRule.Req()
                    .setLabel(label)
                    .setWhen(when)
                    .setThen(then));
                const res = yield this.execute(req);
                return RuleImpl_1.RuleImpl.of(res.getPutRuleRes().getRule());
            });
        }
        getThing(iid) {
            return __awaiter(this, void 0, void 0, function* () {
                const req = new ProtoConceptManager.Req()
                    .setGetThingReq(new ProtoConceptManager.GetThing.Req().setIid(iid));
                const res = yield this.execute(req);
                if (res.getGetThingRes().getResCase() === ProtoConceptManager.GetThing.Res.ResCase.THING)
                    return ConceptProtoReader_1.ConceptProtoReader.thing(res.getGetThingRes().getThing());
                else
                    return null;
            });
        }
        getType(label) {
            return __awaiter(this, void 0, void 0, function* () {
                const req = new ProtoConceptManager.Req()
                    .setGetTypeReq(new ProtoConceptManager.GetType.Req().setLabel(label));
                const res = yield this.execute(req);
                if (res.getGetTypeRes().getResCase() === ProtoConceptManager.GetType.Res.ResCase.TYPE)
                    return TypeImpl_1.TypeImpl.of(res.getGetTypeRes().getType());
                else
                    return null;
            });
        }
        getRule(label) {
            return __awaiter(this, void 0, void 0, function* () {
                const req = new ProtoConceptManager.Req()
                    .setGetRuleReq(new ProtoConceptManager.GetRule.Req().setLabel(label));
                const res = yield this.execute(req);
                if (res.getGetRuleRes().getResCase() === ProtoConceptManager.GetRule.Res.ResCase.RULE)
                    return RuleImpl_1.RuleImpl.of(res.getGetRuleRes().getRule());
                return null;
            });
        }
        execute(conceptManagerReq) {
            return __awaiter(this, void 0, void 0, function* () {
                const transactionReq = new transaction_pb_1.default.Transaction.Req()
                    .setConceptManagerReq(conceptManagerReq);
                return yield this._rpcTransaction.execute(transactionReq, res => res.getConceptManagerRes());
            });
        }
    }
    exports.ConceptManager = ConceptManager;
});
//# sourceMappingURL=data:application/json;base64,