/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/answer/ConceptMap", ["require", "exports", "grakn-client/dependencies_internal"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConceptMap = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    class ConceptMap {
        constructor(map, pattern) {
            this._map = map;
            this._queryPattern = pattern;
        }
        static of(res) {
            const variableMap = new Map();
            res.getMapMap().forEach((resConcept, resLabel) => {
                let concept;
                if (resConcept.hasThing())
                    concept = dependencies_internal_1.ConceptProtoReader.thing(resConcept.getThing());
                else
                    concept = dependencies_internal_1.ConceptProtoReader.type(resConcept.getType());
                variableMap.set(resLabel, concept);
            });
            const queryPattern = res.getPattern() === "" ? null : res.getPattern();
            return new ConceptMap(variableMap, queryPattern);
        }
        queryPattern() { return this._queryPattern; }
        map() { return this._map; }
        concepts() { return this._map.values(); }
        get(variable) {
            const concept = this._map.get(variable);
            if (concept == null)
                throw new dependencies_internal_1.GraknClientError(dependencies_internal_1.ErrorMessage.Query.VARIABLE_DOES_NOT_EXIST.message(variable));
            return concept;
        }
        toString() {
            let output = "";
            for (const entry of this._map.entries()) {
                output += `[${entry[0]}/${entry[1]}]`;
            }
            return output;
        }
    }
    exports.ConceptMap = ConceptMap;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uY2VwdE1hcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NvbmNlcHQvYW5zd2VyL0NvbmNlcHRNYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHOzs7Ozs7Ozs7Ozs7O0lBS0gsOEVBS3FDO0lBRXJDLE1BQWEsVUFBVTtRQUluQixZQUFZLEdBQXlCLEVBQUUsT0FBZTtZQUNsRCxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztZQUNoQixJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQztRQUNqQyxDQUFDO1FBRUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUEyQjtZQUNqQyxNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsRUFBbUIsQ0FBQztZQUMvQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBZ0MsRUFBRSxRQUFnQixFQUFFLEVBQUU7Z0JBQzNFLElBQUksT0FBTyxDQUFDO2dCQUNaLElBQUksVUFBVSxDQUFDLFFBQVEsRUFBRTtvQkFBRSxPQUFPLEdBQUcsMENBQWtCLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDOztvQkFDaEYsT0FBTyxHQUFHLDBDQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDN0QsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDdkMsQ0FBQyxDQUFDLENBQUE7WUFDRixNQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUN2RSxPQUFPLElBQUksVUFBVSxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNyRCxDQUFDO1FBRUQsWUFBWSxLQUFZLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBLENBQUM7UUFDbkQsR0FBRyxLQUEwQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFDO1FBQy9DLFFBQVEsS0FBK0IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUEsQ0FBQztRQUVsRSxHQUFHLENBQUMsUUFBZ0I7WUFDaEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEMsSUFBSSxPQUFPLElBQUksSUFBSTtnQkFBRSxNQUFNLElBQUksd0NBQWdCLENBQUMsb0NBQVksQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7WUFDN0csT0FBTyxPQUFPLENBQUM7UUFDbkIsQ0FBQztRQUVELFFBQVE7WUFDSixJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7WUFDaEIsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNyQyxNQUFNLElBQUksSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUE7YUFDeEM7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNsQixDQUFDO0tBQ0o7SUF0Q0QsZ0NBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBBbnN3ZXJQcm90byBmcm9tIFwiZ3Jha25sYWJzLXByb3RvY29sL3Byb3RvYnVmL2Fuc3dlcl9wYlwiO1xuaW1wb3J0IENvbmNlcHRQcm90byBmcm9tIFwiZ3Jha25sYWJzLXByb3RvY29sL3Byb3RvYnVmL2NvbmNlcHRfcGJcIjtcblxuaW1wb3J0IHtcbiAgICBDb25jZXB0LFxuICAgIENvbmNlcHRQcm90b1JlYWRlcixcbiAgICBFcnJvck1lc3NhZ2UsXG4gICAgR3Jha25DbGllbnRFcnJvcixcbn0gZnJvbSBcIi4uLy4uL2RlcGVuZGVuY2llc19pbnRlcm5hbFwiO1xuXG5leHBvcnQgY2xhc3MgQ29uY2VwdE1hcCB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfbWFwOiBNYXA8c3RyaW5nLCBDb25jZXB0PjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9xdWVyeVBhdHRlcm46IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKG1hcDogTWFwPHN0cmluZywgQ29uY2VwdD4sIHBhdHRlcm46IHN0cmluZyl7XG4gICAgICAgIHRoaXMuX21hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5fcXVlcnlQYXR0ZXJuID0gcGF0dGVybjtcbiAgICB9XG5cbiAgICBzdGF0aWMgb2YocmVzOiBBbnN3ZXJQcm90by5Db25jZXB0TWFwKTogQ29uY2VwdE1hcCB7XG4gICAgICAgIGNvbnN0IHZhcmlhYmxlTWFwID0gbmV3IE1hcDxzdHJpbmcsIENvbmNlcHQ+KCk7XG4gICAgICAgIHJlcy5nZXRNYXBNYXAoKS5mb3JFYWNoKChyZXNDb25jZXB0OiBDb25jZXB0UHJvdG8uQ29uY2VwdCwgcmVzTGFiZWw6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgbGV0IGNvbmNlcHQ7XG4gICAgICAgICAgICBpZiAocmVzQ29uY2VwdC5oYXNUaGluZygpKSBjb25jZXB0ID0gQ29uY2VwdFByb3RvUmVhZGVyLnRoaW5nKHJlc0NvbmNlcHQuZ2V0VGhpbmcoKSk7XG4gICAgICAgICAgICBlbHNlIGNvbmNlcHQgPSBDb25jZXB0UHJvdG9SZWFkZXIudHlwZShyZXNDb25jZXB0LmdldFR5cGUoKSk7XG4gICAgICAgICAgICB2YXJpYWJsZU1hcC5zZXQocmVzTGFiZWwsIGNvbmNlcHQpO1xuICAgICAgICB9KVxuICAgICAgICBjb25zdCBxdWVyeVBhdHRlcm4gPSByZXMuZ2V0UGF0dGVybigpID09PSBcIlwiID8gbnVsbCA6IHJlcy5nZXRQYXR0ZXJuKCk7XG4gICAgICAgIHJldHVybiBuZXcgQ29uY2VwdE1hcCh2YXJpYWJsZU1hcCwgcXVlcnlQYXR0ZXJuKTtcbiAgICB9XG5cbiAgICBxdWVyeVBhdHRlcm4oKTogc3RyaW5nIHtyZXR1cm4gdGhpcy5fcXVlcnlQYXR0ZXJuO31cbiAgICBtYXAoKTogTWFwPHN0cmluZywgQ29uY2VwdD4ge3JldHVybiB0aGlzLl9tYXA7fVxuICAgIGNvbmNlcHRzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8Q29uY2VwdD4ge3JldHVybiB0aGlzLl9tYXAudmFsdWVzKCk7fVxuXG4gICAgZ2V0KHZhcmlhYmxlOiBzdHJpbmcpOiBDb25jZXB0IHtcbiAgICAgICAgY29uc3QgY29uY2VwdCA9IHRoaXMuX21hcC5nZXQodmFyaWFibGUpO1xuICAgICAgICBpZiAoY29uY2VwdCA9PSBudWxsKSB0aHJvdyBuZXcgR3Jha25DbGllbnRFcnJvcihFcnJvck1lc3NhZ2UuUXVlcnkuVkFSSUFCTEVfRE9FU19OT1RfRVhJU1QubWVzc2FnZSh2YXJpYWJsZSkpXG4gICAgICAgIHJldHVybiBjb25jZXB0O1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIGxldCBvdXRwdXQgPSBcIlwiO1xuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIHRoaXMuX21hcC5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIG91dHB1dCArPSBgWyR7ZW50cnlbMF19LyR7ZW50cnlbMV19XWBcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbn1cbiJdfQ==