/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/thing/impl/RelationImpl", ["require", "exports", "grakn-client/dependencies_internal", "graknlabs-protocol/protobuf/concept_pb", "graknlabs-protocol/protobuf/transaction_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteRelationImpl = exports.RelationImpl = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    const concept_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/concept_pb"));
    const transaction_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/transaction_pb"));
    class RelationImpl extends dependencies_internal_1.ThingImpl {
        constructor(iid) {
            super(iid);
        }
        static of(protoThing) {
            return new RelationImpl(protoThing.getIid_asB64());
        }
        asRemote(transaction) {
            return new RemoteRelationImpl(transaction, this.getIID());
        }
    }
    exports.RelationImpl = RelationImpl;
    class RemoteRelationImpl extends dependencies_internal_1.RemoteThingImpl {
        constructor(transaction, iid) {
            super(transaction, iid);
        }
        asRemote(transaction) {
            return new RemoteRelationImpl(transaction, this.getIID());
        }
        getType() {
            return __awaiter(this, void 0, void 0, function* () {
                const res = yield this.execute(new concept_pb_1.default.Thing.Req().setThingGetTypeReq(new concept_pb_1.default.Thing.GetType.Req()));
                return dependencies_internal_1.ConceptProtoReader.thingType(res.getThingGetTypeRes().getThingType());
            });
        }
        getPlayersByRoleType() {
            var e_1, _a;
            return __awaiter(this, void 0, void 0, function* () {
                const method = new concept_pb_1.default.Thing.Req()
                    .setRelationGetPlayersByRoleTypeReq(new concept_pb_1.default.Relation.GetPlayersByRoleType.Req())
                    .setIid(this.getIID());
                const request = new transaction_pb_1.default.Transaction.Req().setThingReq(method);
                const stream = this.transaction.stream(request, res => res.getThingRes().getRelationGetPlayersByRoleTypeRes().getRoleTypeWithPlayerList());
                const rolePlayerMap = new Map();
                try {
                    for (var stream_1 = __asyncValues(stream), stream_1_1; stream_1_1 = yield stream_1.next(), !stream_1_1.done;) {
                        const rolePlayer = stream_1_1.value;
                        const role = dependencies_internal_1.ConceptProtoReader.type(rolePlayer.getRoleType());
                        const player = dependencies_internal_1.ConceptProtoReader.thing(rolePlayer.getPlayer());
                        if (!rolePlayerMap.has(role)) {
                            rolePlayerMap.set(role, []);
                        }
                        rolePlayerMap.get(role).push(player);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (stream_1_1 && !stream_1_1.done && (_a = stream_1.return)) yield _a.call(stream_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return rolePlayerMap;
            });
        }
        getPlayers(roleTypes = []) {
            const method = new concept_pb_1.default.Thing.Req().setRelationGetPlayersReq(new concept_pb_1.default.Relation.GetPlayers.Req().setRoleTypesList(roleTypes.map(roleType => dependencies_internal_1.ConceptProtoBuilder.type(roleType))));
            return this.thingStream(method, res => res.getRelationGetPlayersRes().getThingList());
        }
        addPlayer(roleType, player) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Thing.Req().setRelationAddPlayerReq(new concept_pb_1.default.Relation.AddPlayer.Req()
                    .setPlayer(dependencies_internal_1.ConceptProtoBuilder.thing(player))
                    .setRoleType(dependencies_internal_1.ConceptProtoBuilder.type(roleType))));
            });
        }
        removePlayer(roleType, player) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Thing.Req().setRelationRemovePlayerReq(new concept_pb_1.default.Relation.RemovePlayer.Req()
                    .setPlayer(dependencies_internal_1.ConceptProtoBuilder.thing(player))
                    .setRoleType(dependencies_internal_1.ConceptProtoBuilder.type(roleType))));
            });
        }
    }
    exports.RemoteRelationImpl = RemoteRelationImpl;
});
//# sourceMappingURL=data:application/json;base64,