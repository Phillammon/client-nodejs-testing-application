/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/Thing/Impl/RelationImpl", ["require", "exports", "grakn-client/concept/Thing/Impl/ThingImpl", "grakn-client/concept/Concept"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteRelationImpl = exports.RelationImpl = void 0;
    const ThingImpl_1 = require("grakn-client/concept/Thing/Impl/ThingImpl");
    const Concept_1 = require("grakn-client/concept/Concept");
    class RelationImpl extends ThingImpl_1.ThingImpl {
        constructor(iid) {
            super(iid);
        }
        static of(protoThing) {
            return new RelationImpl(protoThing.getIid_asB64());
        }
        asRemote(transaction) {
            return new RemoteRelationImpl(transaction, this.getIID());
        }
    }
    exports.RelationImpl = RelationImpl;
    class RemoteRelationImpl extends ThingImpl_1.RemoteThingImpl {
        constructor(transaction, iid) {
            super(transaction, iid);
        }
        asRemote(transaction) {
            return new RemoteRelationImpl(transaction, this.getIID());
        }
        getType() {
            throw "As yet unimplemented";
        }
        getPlayersByRoleType() {
            throw "Not implemented";
        }
        getPlayers(roleTypes) {
            return new Concept_1.QueryIterator();
        }
        addPlayer(roleType, player) {
            throw "Not implemented";
        }
        removePlayer(roleType, player) {
            throw "Not implemented";
        }
    }
    exports.RemoteRelationImpl = RemoteRelationImpl;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVsYXRpb25JbXBsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vY29uY2VwdC9UaGluZy9JbXBsL1JlbGF0aW9uSW1wbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7Ozs7Ozs7Ozs7Ozs7SUFFSCx5RUFBeUQ7SUFLekQsMERBQThDO0lBSzlDLE1BQWEsWUFBYSxTQUFRLHFCQUFTO1FBQ3ZDLFlBQXNCLEdBQVc7WUFDN0IsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2QsQ0FBQztRQUVELE1BQU0sQ0FBQyxFQUFFLENBQUMsVUFBOEI7WUFDcEMsT0FBTyxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUN2RCxDQUFDO1FBRUQsUUFBUSxDQUFDLFdBQXdCO1lBQzdCLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDOUQsQ0FBQztLQUNKO0lBWkQsb0NBWUM7SUFFRCxNQUFhLGtCQUFtQixTQUFRLDJCQUFlO1FBQ25ELFlBQVksV0FBd0IsRUFBRSxHQUFXO1lBQzdDLEtBQUssQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUVELFFBQVEsQ0FBQyxXQUF3QjtZQUM3QixPQUFPLElBQUksa0JBQWtCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQzlELENBQUM7UUFFRCxPQUFPO1lBQ0gsTUFBTSxzQkFBc0IsQ0FBQTtRQUNoQyxDQUFDO1FBRUQsb0JBQW9CO1lBQ2hCLE1BQU0saUJBQWlCLENBQUE7UUFDM0IsQ0FBQztRQUVELFVBQVUsQ0FBQyxTQUFxQjtZQUM1QixPQUFPLElBQUksdUJBQWEsRUFBRSxDQUFDO1FBQy9CLENBQUM7UUFFRCxTQUFTLENBQUMsUUFBa0IsRUFBRSxNQUFhO1lBQ3ZDLE1BQU0saUJBQWlCLENBQUM7UUFDNUIsQ0FBQztRQUVELFlBQVksQ0FBQyxRQUFrQixFQUFFLE1BQWE7WUFDMUMsTUFBTSxpQkFBaUIsQ0FBQztRQUM1QixDQUFDO0tBQ0o7SUE1QkQsZ0RBNEJDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFRoaW5nSW1wbCwgUmVtb3RlVGhpbmdJbXBsIH0gZnJvbSBcIi4vVGhpbmdJbXBsXCI7XG5pbXBvcnQgeyBSZWxhdGlvbiwgUmVtb3RlUmVsYXRpb24gfSBmcm9tIFwiLi4vUmVsYXRpb25cIjtcbmltcG9ydCB7IFRoaW5nIH0gZnJvbSBcIi4uL1RoaW5nXCI7XG5pbXBvcnQgeyBSZWxhdGlvblR5cGVJbXBsIH0gZnJvbSBcIi4uLy4uL1R5cGUvSW1wbC9SZWxhdGlvblR5cGVJbXBsXCI7XG5pbXBvcnQgeyBSb2xlVHlwZSB9IGZyb20gXCIuLi8uLi9UeXBlL1JvbGVUeXBlXCI7XG5pbXBvcnQgeyBRdWVyeUl0ZXJhdG9yIH0gZnJvbSBcIi4uLy4uL0NvbmNlcHRcIjtcbmltcG9ydCB7IEdyYWtuIH0gZnJvbSBcIi4uLy4uLy4uL0dyYWtuXCI7XG5pbXBvcnQgVHJhbnNhY3Rpb24gPSBHcmFrbi5UcmFuc2FjdGlvbjtcbmltcG9ydCBDb25jZXB0UHJvdG8gZnJvbSBcImdyYWtubGFicy1ncnBjLXByb3RvY29sL3Byb3RvYnVmL2NvbmNlcHRfcGJcIjtcblxuZXhwb3J0IGNsYXNzIFJlbGF0aW9uSW1wbCBleHRlbmRzIFRoaW5nSW1wbCBpbXBsZW1lbnRzIFJlbGF0aW9uIHtcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoaWlkOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoaWlkKVxuICAgIH1cblxuICAgIHN0YXRpYyBvZihwcm90b1RoaW5nOiBDb25jZXB0UHJvdG8uVGhpbmcpOiBSZWxhdGlvbkltcGwge1xuICAgICAgICByZXR1cm4gbmV3IFJlbGF0aW9uSW1wbChwcm90b1RoaW5nLmdldElpZF9hc0I2NCgpKTtcbiAgICB9XG5cbiAgICBhc1JlbW90ZSh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24pOiBSZW1vdGVSZWxhdGlvbkltcGwge1xuICAgICAgICByZXR1cm4gbmV3IFJlbW90ZVJlbGF0aW9uSW1wbCh0cmFuc2FjdGlvbiwgdGhpcy5nZXRJSUQoKSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVtb3RlUmVsYXRpb25JbXBsIGV4dGVuZHMgUmVtb3RlVGhpbmdJbXBsIGltcGxlbWVudHMgUmVtb3RlUmVsYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiwgaWlkOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIodHJhbnNhY3Rpb24sIGlpZCk7XG4gICAgfVxuXG4gICAgYXNSZW1vdGUodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogUmVtb3RlUmVsYXRpb25JbXBsIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZW1vdGVSZWxhdGlvbkltcGwodHJhbnNhY3Rpb24sIHRoaXMuZ2V0SUlEKCkpO1xuICAgIH1cblxuICAgIGdldFR5cGUoKTogUmVsYXRpb25UeXBlSW1wbCB7XG4gICAgICAgIHRocm93IFwiQXMgeWV0IHVuaW1wbGVtZW50ZWRcIlxuICAgIH1cblxuICAgIGdldFBsYXllcnNCeVJvbGVUeXBlKCk6IFtSb2xlVHlwZSwgVGhpbmdbXV0ge1xuICAgICAgICB0aHJvdyBcIk5vdCBpbXBsZW1lbnRlZFwiXG4gICAgfVxuXG4gICAgZ2V0UGxheWVycyhyb2xlVHlwZXM6IFJvbGVUeXBlW10pOiBRdWVyeUl0ZXJhdG9yIHtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeUl0ZXJhdG9yKCk7XG4gICAgfVxuXG4gICAgYWRkUGxheWVyKHJvbGVUeXBlOiBSb2xlVHlwZSwgcGxheWVyOiBUaGluZykge1xuICAgICAgICB0aHJvdyBcIk5vdCBpbXBsZW1lbnRlZFwiO1xuICAgIH1cblxuICAgIHJlbW92ZVBsYXllcihyb2xlVHlwZTogUm9sZVR5cGUsIHBsYXllcjogVGhpbmcpIHtcbiAgICAgICAgdGhyb3cgXCJOb3QgaW1wbGVtZW50ZWRcIjtcbiAgICB9XG59XG4iXX0=