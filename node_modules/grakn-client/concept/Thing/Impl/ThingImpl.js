/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/thing/impl/ThingImpl", ["require", "exports", "grakn-client/dependencies_internal", "graknlabs-grpc-protocol/protobuf/concept_pb", "graknlabs-grpc-protocol/protobuf/transaction_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteThingImpl = exports.ThingImpl = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    const concept_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/concept_pb"));
    const transaction_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/transaction_pb"));
    class ThingImpl {
        // TODO: all error messages should be extracted into ErrorMessage class or namespace
        constructor(iid) {
            if (!iid) {
                throw "IID Missing";
            }
            this._iid = iid;
        }
        getIID() {
            return this._iid;
        }
        isRemote() {
            return false;
        }
        toString() {
            return `${ThingImpl.name}[iid:${this._iid}]`;
        }
    }
    exports.ThingImpl = ThingImpl;
    class RemoteThingImpl {
        constructor(transaction, iid) {
            if (!transaction)
                throw "Transaction Missing";
            if (!iid)
                throw "IID Missing";
            this._iid = iid;
            this._rpcTransaction = transaction;
        }
        getIID() {
            return this._iid;
        }
        getType() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this.execute(new concept_pb_1.default.Thing.Req().setThingGetTypeReq(new concept_pb_1.default.Thing.GetType.Req()));
                return dependencies_internal_1.ConceptProtoReader.type(response.getThingGetTypeRes().getThingType());
            });
        }
        isInferred() {
            return __awaiter(this, void 0, void 0, function* () {
                return (yield this.execute(new concept_pb_1.default.Thing.Req().setThingIsInferredReq(new concept_pb_1.default.Thing.IsInferred.Req()))).getThingIsInferredRes().getInferred();
            });
        }
        isRemote() {
            return true;
        }
        getHas(arg) {
            if (typeof arg === "undefined") {
                const method = new concept_pb_1.default.Thing.Req().setThingGetHasReq(new concept_pb_1.default.Thing.GetHas.Req());
                return this.thingStream(method, res => res.getThingGetHasRes().getAttributeList());
            }
            if (typeof arg === "boolean") {
                const method = new concept_pb_1.default.Thing.Req().setThingGetHasReq(new concept_pb_1.default.Thing.GetHas.Req().setKeysOnly(arg));
                return this.thingStream(method, res => res.getThingGetHasRes().getAttributeList());
            }
            if (Array.isArray(arg)) {
                const method = new concept_pb_1.default.Thing.Req()
                    .setThingGetHasReq(new concept_pb_1.default.Thing.GetHas.Req().setAttributeTypesList(dependencies_internal_1.ConceptProtoBuilder.types(arg)));
                return this.thingStream(method, res => res.getThingGetHasRes().getAttributeList());
            }
            const method = new concept_pb_1.default.Thing.Req()
                .setThingGetHasReq(new concept_pb_1.default.Thing.GetHas.Req().setAttributeTypesList([dependencies_internal_1.ConceptProtoBuilder.type(arg)]));
            const stream = this.thingStream(method, res => res.getThingGetHasRes().getAttributeList());
            if (arg instanceof dependencies_internal_1.BooleanAttributeTypeImpl)
                return stream;
            if (arg instanceof dependencies_internal_1.LongAttributeTypeImpl)
                return stream;
            if (arg instanceof dependencies_internal_1.DoubleAttributeTypeImpl)
                return stream;
            if (arg instanceof dependencies_internal_1.StringAttributeTypeImpl)
                return stream;
            if (arg instanceof dependencies_internal_1.DateTimeAttributeTypeImpl)
                return stream;
            throw "Argument was not valid.";
        }
        getPlays() {
            const method = new concept_pb_1.default.Thing.Req().setThingGetPlaysReq(new concept_pb_1.default.Thing.GetPlays.Req());
            return this.typeStream(method, res => res.getThingGetPlaysRes().getRoleTypeList());
        }
        getRelations(roleTypes = []) {
            const method = new concept_pb_1.default.Thing.Req().setThingGetRelationsReq(new concept_pb_1.default.Thing.GetRelations.Req().setRoleTypesList(dependencies_internal_1.ConceptProtoBuilder.types(roleTypes)));
            return this.thingStream(method, res => res.getThingGetRelationsRes().getRelationList());
        }
        setHas(attribute) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Thing.Req().setThingSetHasReq(new concept_pb_1.default.Thing.SetHas.Req().setAttribute(dependencies_internal_1.ConceptProtoBuilder.thing(attribute))));
            });
        }
        unsetHas(attribute) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Thing.Req().setThingUnsetHasReq(new concept_pb_1.default.Thing.UnsetHas.Req().setAttribute(dependencies_internal_1.ConceptProtoBuilder.thing(attribute))));
            });
        }
        delete() {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Thing.Req().setThingDeleteReq(new concept_pb_1.default.Thing.Delete.Req()));
            });
        }
        isDeleted() {
            return __awaiter(this, void 0, void 0, function* () {
                return !(yield this._rpcTransaction.concepts().getThing(this._iid));
            });
        }
        get transaction() {
            return this._rpcTransaction;
        }
        typeStream(method, typeGetter) {
            const request = new transaction_pb_1.default.Transaction.Req().setThingReq(method.setIid(this._iid));
            return (this._rpcTransaction).stream(request, res => typeGetter(res.getThingRes()).map(dependencies_internal_1.ConceptProtoReader.type));
        }
        thingStream(method, thingGetter) {
            const request = new transaction_pb_1.default.Transaction.Req().setThingReq(method.setIid(this._iid));
            return this._rpcTransaction.stream(request, res => thingGetter(res.getThingRes()).map(dependencies_internal_1.ConceptProtoReader.thing));
        }
        execute(method) {
            const request = new transaction_pb_1.default.Transaction.Req().setThingReq(method.setIid(this._iid));
            return this._rpcTransaction.execute(request, res => res.getThingRes());
        }
        toString() {
            return `${RemoteThingImpl.name}[iid:${this._iid}]`;
        }
    }
    exports.RemoteThingImpl = RemoteThingImpl;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhpbmdJbXBsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vY29uY2VwdC90aGluZy9pbXBsL1RoaW5nSW1wbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFSCw4RUFnQ3dDO0lBQ3hDLDZGQUF1RTtJQUV2RSxxR0FBK0U7SUFFL0UsTUFBc0IsU0FBUztRQUczQixvRkFBb0Y7UUFDcEYsWUFBc0IsR0FBVztZQUM3QixJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNOLE1BQU0sYUFBYSxDQUFDO2FBQ3ZCO1lBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDcEIsQ0FBQztRQUVELE1BQU07WUFDRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDckIsQ0FBQztRQUVELFFBQVE7WUFDSixPQUFPLEtBQUssQ0FBQztRQUNqQixDQUFDO1FBRUQsUUFBUTtZQUNKLE9BQU8sR0FBRyxTQUFTLENBQUMsSUFBSSxRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQztRQUNqRCxDQUFDO0tBR0o7SUF4QkQsOEJBd0JDO0lBRUQsTUFBc0IsZUFBZTtRQUlqQyxZQUFzQixXQUF3QixFQUFFLEdBQVc7WUFDdkQsSUFBSSxDQUFDLFdBQVc7Z0JBQUUsTUFBTSxxQkFBcUIsQ0FBQztZQUM5QyxJQUFJLENBQUMsR0FBRztnQkFBRSxNQUFNLGFBQWEsQ0FBQztZQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztZQUNoQixJQUFJLENBQUMsZUFBZSxHQUFHLFdBQTZCLENBQUM7UUFDekQsQ0FBQztRQUVELE1BQU07WUFDRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDckIsQ0FBQztRQUVLLE9BQU87O2dCQUNULE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLG9CQUFZLENB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ZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIFRoaW5nLFxuICAgIFJlbW90ZVRoaW5nLFxuICAgIEF0dHJpYnV0ZSxcbiAgICBUeXBlLFxuICAgIEF0dHJpYnV0ZVR5cGUsXG4gICAgQm9vbGVhbkF0dHJpYnV0ZVR5cGUsXG4gICAgRGF0ZVRpbWVBdHRyaWJ1dGVUeXBlLFxuICAgIERvdWJsZUF0dHJpYnV0ZVR5cGUsXG4gICAgTG9uZ0F0dHJpYnV0ZVR5cGUsXG4gICAgU3RyaW5nQXR0cmlidXRlVHlwZSxcbiAgICBSb2xlVHlwZSxcbiAgICBHcmFrbixcbiAgICBUaGluZ1R5cGVJbXBsLFxuICAgIFJvbGVUeXBlSW1wbCxcbiAgICBTdHJlYW0sXG4gICAgUmVsYXRpb25JbXBsLFxuICAgIFR5cGVJbXBsLFxuICAgIENvbmNlcHRQcm90b1JlYWRlcixcbiAgICBDb25jZXB0UHJvdG9CdWlsZGVyLFxuICAgIFJQQ1RyYW5zYWN0aW9uLFxuICAgIEJvb2xlYW5BdHRyaWJ1dGVUeXBlSW1wbCxcbiAgICBEYXRlVGltZUF0dHJpYnV0ZVR5cGVJbXBsLFxuICAgIERvdWJsZUF0dHJpYnV0ZVR5cGVJbXBsLFxuICAgIFN0cmluZ0F0dHJpYnV0ZVR5cGVJbXBsLFxuICAgIExvbmdBdHRyaWJ1dGVUeXBlSW1wbCxcbiAgICBBdHRyaWJ1dGVJbXBsLFxuICAgIEJvb2xlYW5BdHRyaWJ1dGVJbXBsLFxuICAgIERhdGVUaW1lQXR0cmlidXRlSW1wbCxcbiAgICBEb3VibGVBdHRyaWJ1dGVJbXBsLFxuICAgIExvbmdBdHRyaWJ1dGVJbXBsLFxuICAgIFN0cmluZ0F0dHJpYnV0ZUltcGwsXG59IGZyb20gXCIuLi8uLi8uLi9kZXBlbmRlbmNpZXNfaW50ZXJuYWxcIjtcbmltcG9ydCBDb25jZXB0UHJvdG8gZnJvbSBcImdyYWtubGFicy1ncnBjLXByb3RvY29sL3Byb3RvYnVmL2NvbmNlcHRfcGJcIjtcbmltcG9ydCBUcmFuc2FjdGlvbiA9IEdyYWtuLlRyYW5zYWN0aW9uO1xuaW1wb3J0IFRyYW5zYWN0aW9uUHJvdG8gZnJvbSBcImdyYWtubGFicy1ncnBjLXByb3RvY29sL3Byb3RvYnVmL3RyYW5zYWN0aW9uX3BiXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUaGluZ0ltcGwgaW1wbGVtZW50cyBUaGluZyB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfaWlkOiBzdHJpbmc7XG5cbiAgICAvLyBUT0RPOiBhbGwgZXJyb3IgbWVzc2FnZXMgc2hvdWxkIGJlIGV4dHJhY3RlZCBpbnRvIEVycm9yTWVzc2FnZSBjbGFzcyBvciBuYW1lc3BhY2VcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoaWlkOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCFpaWQpIHtcbiAgICAgICAgICAgIHRocm93IFwiSUlEIE1pc3NpbmdcIjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9paWQgPSBpaWQ7XG4gICAgfVxuXG4gICAgZ2V0SUlEKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9paWQ7XG4gICAgfVxuXG4gICAgaXNSZW1vdGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7VGhpbmdJbXBsLm5hbWV9W2lpZDoke3RoaXMuX2lpZH1dYDtcbiAgICB9XG5cbiAgICBhYnN0cmFjdCBhc1JlbW90ZSh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24pOiBSZW1vdGVUaGluZztcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlbW90ZVRoaW5nSW1wbCBpbXBsZW1lbnRzIFJlbW90ZVRoaW5nIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9paWQ6IHN0cmluZztcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ycGNUcmFuc2FjdGlvbjogUlBDVHJhbnNhY3Rpb247XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uLCBpaWQ6IHN0cmluZykge1xuICAgICAgICBpZiAoIXRyYW5zYWN0aW9uKSB0aHJvdyBcIlRyYW5zYWN0aW9uIE1pc3NpbmdcIjtcbiAgICAgICAgaWYgKCFpaWQpIHRocm93IFwiSUlEIE1pc3NpbmdcIjtcbiAgICAgICAgdGhpcy5faWlkID0gaWlkO1xuICAgICAgICB0aGlzLl9ycGNUcmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uIGFzIFJQQ1RyYW5zYWN0aW9uO1xuICAgIH1cblxuICAgIGdldElJRCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5faWlkO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFR5cGUoKTogUHJvbWlzZTxUaGluZ1R5cGVJbXBsPiB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5leGVjdXRlKG5ldyBDb25jZXB0UHJvdG8uVGhpbmcuUmVxKCkuc2V0VGhpbmdHZXRUeXBlUmVxKG5ldyBDb25jZXB0UHJvdG8uVGhpbmcuR2V0VHlwZS5SZXEoKSkpO1xuICAgICAgICByZXR1cm4gQ29uY2VwdFByb3RvUmVhZGVyLnR5cGUocmVzcG9uc2UuZ2V0VGhpbmdHZXRUeXBlUmVzKCkuZ2V0VGhpbmdUeXBlKCkpIGFzIFRoaW5nVHlwZUltcGw7XG4gICAgfVxuXG4gICAgYXN5bmMgaXNJbmZlcnJlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIChhd2FpdCB0aGlzLmV4ZWN1dGUobmV3IENvbmNlcHRQcm90by5UaGluZy5SZXEoKS5zZXRUaGluZ0lzSW5mZXJyZWRSZXEoXG4gICAgICAgICAgICBuZXcgQ29uY2VwdFByb3RvLlRoaW5nLklzSW5mZXJyZWQuUmVxKCkpKSkuZ2V0VGhpbmdJc0luZmVycmVkUmVzKCkuZ2V0SW5mZXJyZWQoKTtcbiAgICB9XG5cbiAgICBpc1JlbW90ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZ2V0SGFzKG9ubHlLZXk6IGJvb2xlYW4pOiBTdHJlYW08QXR0cmlidXRlSW1wbDxhbnk+PjtcbiAgICBnZXRIYXMoYXR0cmlidXRlVHlwZTogQm9vbGVhbkF0dHJpYnV0ZVR5cGUpOiBTdHJlYW08Qm9vbGVhbkF0dHJpYnV0ZUltcGw+O1xuICAgIGdldEhhcyhhdHRyaWJ1dGVUeXBlOiBMb25nQXR0cmlidXRlVHlwZSk6IFN0cmVhbTxMb25nQXR0cmlidXRlSW1wbD47XG4gICAgZ2V0SGFzKGF0dHJpYnV0ZVR5cGU6IERvdWJsZUF0dHJpYnV0ZVR5cGUpOiBTdHJlYW08RG91YmxlQXR0cmlidXRlSW1wbD47XG4gICAgZ2V0SGFzKGF0dHJpYnV0ZVR5cGU6IFN0cmluZ0F0dHJpYnV0ZVR5cGUpOiBTdHJlYW08U3RyaW5nQXR0cmlidXRlSW1wbD47XG4gICAgZ2V0SGFzKGF0dHJpYnV0ZVR5cGU6IERhdGVUaW1lQXR0cmlidXRlVHlwZSk6IFN0cmVhbTxEYXRlVGltZUF0dHJpYnV0ZUltcGw+O1xuICAgIGdldEhhcyhhdHRyaWJ1dGVUeXBlczogQXR0cmlidXRlVHlwZVtdKTogU3RyZWFtPEF0dHJpYnV0ZUltcGw8YW55Pj47XG4gICAgZ2V0SGFzKCk6IFN0cmVhbTxBdHRyaWJ1dGVJbXBsPGFueT4+O1xuICAgIGdldEhhcyhhcmc/OiBib29sZWFuIHwgVHlwZSB8IEF0dHJpYnV0ZVR5cGVbXSk6IFN0cmVhbTxBdHRyaWJ1dGVJbXBsPGFueT4+IHwgU3RyZWFtPEJvb2xlYW5BdHRyaWJ1dGVJbXBsPiB8IFN0cmVhbTxMb25nQXR0cmlidXRlSW1wbD5cbiAgICAgICAgfCBTdHJlYW08RG91YmxlQXR0cmlidXRlSW1wbD4gfCBTdHJlYW08U3RyaW5nQXR0cmlidXRlSW1wbD4gfCBTdHJlYW08RGF0ZVRpbWVBdHRyaWJ1dGVJbXBsPiB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBjb25zdCBtZXRob2QgPSBuZXcgQ29uY2VwdFByb3RvLlRoaW5nLlJlcSgpLnNldFRoaW5nR2V0SGFzUmVxKG5ldyBDb25jZXB0UHJvdG8uVGhpbmcuR2V0SGFzLlJlcSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRoaW5nU3RyZWFtKG1ldGhvZCwgcmVzID0+IHJlcy5nZXRUaGluZ0dldEhhc1JlcygpLmdldEF0dHJpYnV0ZUxpc3QoKSkgYXMgU3RyZWFtPEF0dHJpYnV0ZUltcGw8YW55Pj47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICBjb25zdCBtZXRob2QgPSBuZXcgQ29uY2VwdFByb3RvLlRoaW5nLlJlcSgpLnNldFRoaW5nR2V0SGFzUmVxKG5ldyBDb25jZXB0UHJvdG8uVGhpbmcuR2V0SGFzLlJlcSgpLnNldEtleXNPbmx5KGFyZykpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGhpbmdTdHJlYW0obWV0aG9kLCByZXMgPT4gcmVzLmdldFRoaW5nR2V0SGFzUmVzKCkuZ2V0QXR0cmlidXRlTGlzdCgpKSBhcyBTdHJlYW08QXR0cmlidXRlSW1wbDxhbnk+PjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgICAgICBjb25zdCBtZXRob2QgPSBuZXcgQ29uY2VwdFByb3RvLlRoaW5nLlJlcSgpXG4gICAgICAgICAgICAgICAgLnNldFRoaW5nR2V0SGFzUmVxKG5ldyBDb25jZXB0UHJvdG8uVGhpbmcuR2V0SGFzLlJlcSgpLnNldEF0dHJpYnV0ZVR5cGVzTGlzdChDb25jZXB0UHJvdG9CdWlsZGVyLnR5cGVzKGFyZykpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRoaW5nU3RyZWFtKG1ldGhvZCwgcmVzID0+IHJlcy5nZXRUaGluZ0dldEhhc1JlcygpLmdldEF0dHJpYnV0ZUxpc3QoKSkgYXMgU3RyZWFtPEF0dHJpYnV0ZUltcGw8YW55Pj47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gbmV3IENvbmNlcHRQcm90by5UaGluZy5SZXEoKVxuICAgICAgICAgICAgLnNldFRoaW5nR2V0SGFzUmVxKG5ldyBDb25jZXB0UHJvdG8uVGhpbmcuR2V0SGFzLlJlcSgpLnNldEF0dHJpYnV0ZVR5cGVzTGlzdChbQ29uY2VwdFByb3RvQnVpbGRlci50eXBlKGFyZyldKSk7XG4gICAgICAgIGNvbnN0IHN0cmVhbSA9IHRoaXMudGhpbmdTdHJlYW0obWV0aG9kLCByZXMgPT4gcmVzLmdldFRoaW5nR2V0SGFzUmVzKCkuZ2V0QXR0cmlidXRlTGlzdCgpKTtcbiAgICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIEJvb2xlYW5BdHRyaWJ1dGVUeXBlSW1wbCkgcmV0dXJuIHN0cmVhbSBhcyBTdHJlYW08Qm9vbGVhbkF0dHJpYnV0ZUltcGw+O1xuICAgICAgICBpZiAoYXJnIGluc3RhbmNlb2YgTG9uZ0F0dHJpYnV0ZVR5cGVJbXBsKSByZXR1cm4gc3RyZWFtIGFzIFN0cmVhbTxMb25nQXR0cmlidXRlSW1wbD47XG4gICAgICAgIGlmIChhcmcgaW5zdGFuY2VvZiBEb3VibGVBdHRyaWJ1dGVUeXBlSW1wbCkgcmV0dXJuIHN0cmVhbSBhcyBTdHJlYW08RG91YmxlQXR0cmlidXRlSW1wbD47XG4gICAgICAgIGlmIChhcmcgaW5zdGFuY2VvZiBTdHJpbmdBdHRyaWJ1dGVUeXBlSW1wbCkgcmV0dXJuIHN0cmVhbSBhcyBTdHJlYW08U3RyaW5nQXR0cmlidXRlSW1wbD47XG4gICAgICAgIGlmIChhcmcgaW5zdGFuY2VvZiBEYXRlVGltZUF0dHJpYnV0ZVR5cGVJbXBsKSByZXR1cm4gc3RyZWFtIGFzIFN0cmVhbTxEYXRlVGltZUF0dHJpYnV0ZUltcGw+O1xuICAgICAgICB0aHJvdyBcIkFyZ3VtZW50IHdhcyBub3QgdmFsaWQuXCI7XG4gICAgfVxuXG4gICAgZ2V0UGxheXMoKTogU3RyZWFtPFJvbGVUeXBlSW1wbD4ge1xuICAgICAgICBjb25zdCBtZXRob2QgPSBuZXcgQ29uY2VwdFByb3RvLlRoaW5nLlJlcSgpLnNldFRoaW5nR2V0UGxheXNSZXEobmV3IENvbmNlcHRQcm90by5UaGluZy5HZXRQbGF5cy5SZXEoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGVTdHJlYW0obWV0aG9kLCByZXMgPT4gcmVzLmdldFRoaW5nR2V0UGxheXNSZXMoKS5nZXRSb2xlVHlwZUxpc3QoKSkgYXMgU3RyZWFtPFJvbGVUeXBlSW1wbD47XG4gICAgfVxuXG4gICAgZ2V0UmVsYXRpb25zKCk6IFN0cmVhbTxSZWxhdGlvbkltcGw+O1xuICAgIGdldFJlbGF0aW9ucyhyb2xlVHlwZXM6IFJvbGVUeXBlW10gPSBbXSk6IFN0cmVhbTxSZWxhdGlvbkltcGw+IHtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gbmV3IENvbmNlcHRQcm90by5UaGluZy5SZXEoKS5zZXRUaGluZ0dldFJlbGF0aW9uc1JlcShcbiAgICAgICAgICAgIG5ldyBDb25jZXB0UHJvdG8uVGhpbmcuR2V0UmVsYXRpb25zLlJlcSgpLnNldFJvbGVUeXBlc0xpc3QoQ29uY2VwdFByb3RvQnVpbGRlci50eXBlcyhyb2xlVHlwZXMpKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnRoaW5nU3RyZWFtKG1ldGhvZCwgcmVzID0+IHJlcy5nZXRUaGluZ0dldFJlbGF0aW9uc1JlcygpLmdldFJlbGF0aW9uTGlzdCgpKSBhcyBTdHJlYW08UmVsYXRpb25JbXBsPjtcbiAgICB9XG5cbiAgICBhc3luYyBzZXRIYXMoYXR0cmlidXRlOiBBdHRyaWJ1dGU8QXR0cmlidXRlVHlwZS5WYWx1ZUNsYXNzPik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmV4ZWN1dGUobmV3IENvbmNlcHRQcm90by5UaGluZy5SZXEoKS5zZXRUaGluZ1NldEhhc1JlcShcbiAgICAgICAgICAgIG5ldyBDb25jZXB0UHJvdG8uVGhpbmcuU2V0SGFzLlJlcSgpLnNldEF0dHJpYnV0ZShDb25jZXB0UHJvdG9CdWlsZGVyLnRoaW5nKGF0dHJpYnV0ZSkpKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgdW5zZXRIYXMoYXR0cmlidXRlOiBBdHRyaWJ1dGU8QXR0cmlidXRlVHlwZS5WYWx1ZUNsYXNzPik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmV4ZWN1dGUobmV3IENvbmNlcHRQcm90by5UaGluZy5SZXEoKS5zZXRUaGluZ1Vuc2V0SGFzUmVxKFxuICAgICAgICAgICAgbmV3IENvbmNlcHRQcm90by5UaGluZy5VbnNldEhhcy5SZXEoKS5zZXRBdHRyaWJ1dGUoQ29uY2VwdFByb3RvQnVpbGRlci50aGluZyhhdHRyaWJ1dGUpKSkpO1xuICAgIH1cblxuICAgIGFzeW5jIGRlbGV0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5leGVjdXRlKG5ldyBDb25jZXB0UHJvdG8uVGhpbmcuUmVxKCkuc2V0VGhpbmdEZWxldGVSZXEobmV3IENvbmNlcHRQcm90by5UaGluZy5EZWxldGUuUmVxKCkpKTtcbiAgICB9XG5cbiAgICBhc3luYyBpc0RlbGV0ZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiAhKGF3YWl0IHRoaXMuX3JwY1RyYW5zYWN0aW9uLmNvbmNlcHRzKCkuZ2V0VGhpbmcodGhpcy5faWlkKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCB0cmFuc2FjdGlvbigpOiBUcmFuc2FjdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ycGNUcmFuc2FjdGlvbjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdHlwZVN0cmVhbShtZXRob2Q6IENvbmNlcHRQcm90by5UaGluZy5SZXEsIHR5cGVHZXR0ZXI6IChyZXM6IENvbmNlcHRQcm90by5UaGluZy5SZXMpID0+IENvbmNlcHRQcm90by5UeXBlW10pOiBTdHJlYW08VHlwZUltcGw+IHtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBUcmFuc2FjdGlvblByb3RvLlRyYW5zYWN0aW9uLlJlcSgpLnNldFRoaW5nUmVxKG1ldGhvZC5zZXRJaWQodGhpcy5faWlkKSk7XG4gICAgICAgIHJldHVybiAodGhpcy5fcnBjVHJhbnNhY3Rpb24pLnN0cmVhbShyZXF1ZXN0LCByZXMgPT4gdHlwZUdldHRlcihyZXMuZ2V0VGhpbmdSZXMoKSkubWFwKENvbmNlcHRQcm90b1JlYWRlci50eXBlKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHRoaW5nU3RyZWFtKG1ldGhvZDogQ29uY2VwdFByb3RvLlRoaW5nLlJlcSwgdGhpbmdHZXR0ZXI6IChyZXM6IENvbmNlcHRQcm90by5UaGluZy5SZXMpID0+IENvbmNlcHRQcm90by5UaGluZ1tdKTogU3RyZWFtPFRoaW5nSW1wbD4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFRyYW5zYWN0aW9uUHJvdG8uVHJhbnNhY3Rpb24uUmVxKCkuc2V0VGhpbmdSZXEobWV0aG9kLnNldElpZCh0aGlzLl9paWQpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JwY1RyYW5zYWN0aW9uLnN0cmVhbShyZXF1ZXN0LCByZXMgPT4gdGhpbmdHZXR0ZXIocmVzLmdldFRoaW5nUmVzKCkpLm1hcChDb25jZXB0UHJvdG9SZWFkZXIudGhpbmcpKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZXhlY3V0ZShtZXRob2Q6IENvbmNlcHRQcm90by5UaGluZy5SZXEpOiBQcm9taXNlPENvbmNlcHRQcm90by5UaGluZy5SZXM+IHtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBUcmFuc2FjdGlvblByb3RvLlRyYW5zYWN0aW9uLlJlcSgpLnNldFRoaW5nUmVxKG1ldGhvZC5zZXRJaWQodGhpcy5faWlkKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9ycGNUcmFuc2FjdGlvbi5leGVjdXRlKHJlcXVlc3QsIHJlcyA9PiByZXMuZ2V0VGhpbmdSZXMoKSk7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke1JlbW90ZVRoaW5nSW1wbC5uYW1lfVtpaWQ6JHt0aGlzLl9paWR9XWA7XG4gICAgfVxuXG4gICAgYWJzdHJhY3QgYXNSZW1vdGUodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogUmVtb3RlVGhpbmc7XG59XG4iXX0=