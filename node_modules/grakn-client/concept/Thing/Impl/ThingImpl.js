/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/thing/impl/ThingImpl", ["require", "exports", "grakn-client/dependencies_internal", "graknlabs-protocol/protobuf/concept_pb", "graknlabs-protocol/protobuf/transaction_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteThingImpl = exports.ThingImpl = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    const concept_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/concept_pb"));
    const transaction_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/transaction_pb"));
    class ThingImpl {
        constructor(iid) {
            if (!iid)
                throw new dependencies_internal_1.GraknClientError(dependencies_internal_1.ErrorMessage.Concept.MISSING_IID.message());
            this._iid = iid;
        }
        getIID() {
            return this._iid;
        }
        isRemote() {
            return false;
        }
        toString() {
            return `${ThingImpl.name}[iid:${this._iid}]`;
        }
    }
    exports.ThingImpl = ThingImpl;
    class RemoteThingImpl {
        constructor(transaction, iid) {
            if (!transaction)
                throw new dependencies_internal_1.GraknClientError(dependencies_internal_1.ErrorMessage.Concept.MISSING_TRANSACTION.message());
            if (!iid)
                throw new dependencies_internal_1.GraknClientError(dependencies_internal_1.ErrorMessage.Concept.MISSING_IID.message());
            this._iid = iid;
            this._rpcTransaction = transaction;
        }
        getIID() {
            return this._iid;
        }
        getType() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this.execute(new concept_pb_1.default.Thing.Req().setThingGetTypeReq(new concept_pb_1.default.Thing.GetType.Req()));
                return dependencies_internal_1.ConceptProtoReader.type(response.getThingGetTypeRes().getThingType());
            });
        }
        isInferred() {
            return __awaiter(this, void 0, void 0, function* () {
                return (yield this.execute(new concept_pb_1.default.Thing.Req().setThingIsInferredReq(new concept_pb_1.default.Thing.IsInferred.Req()))).getThingIsInferredRes().getInferred();
            });
        }
        isRemote() {
            return true;
        }
        getHas(arg) {
            if (typeof arg === "undefined") {
                const method = new concept_pb_1.default.Thing.Req().setThingGetHasReq(new concept_pb_1.default.Thing.GetHas.Req());
                return this.thingStream(method, res => res.getThingGetHasRes().getAttributeList());
            }
            if (typeof arg === "boolean") {
                const method = new concept_pb_1.default.Thing.Req().setThingGetHasReq(new concept_pb_1.default.Thing.GetHas.Req().setKeysOnly(arg));
                return this.thingStream(method, res => res.getThingGetHasRes().getAttributeList());
            }
            if (Array.isArray(arg)) {
                const method = new concept_pb_1.default.Thing.Req()
                    .setThingGetHasReq(new concept_pb_1.default.Thing.GetHas.Req().setAttributeTypesList(dependencies_internal_1.ConceptProtoBuilder.types(arg)));
                return this.thingStream(method, res => res.getThingGetHasRes().getAttributeList());
            }
            const method = new concept_pb_1.default.Thing.Req()
                .setThingGetHasReq(new concept_pb_1.default.Thing.GetHas.Req().setAttributeTypesList([dependencies_internal_1.ConceptProtoBuilder.type(arg)]));
            const stream = this.thingStream(method, res => res.getThingGetHasRes().getAttributeList());
            if (arg instanceof dependencies_internal_1.BooleanAttributeTypeImpl)
                return stream;
            if (arg instanceof dependencies_internal_1.LongAttributeTypeImpl)
                return stream;
            if (arg instanceof dependencies_internal_1.DoubleAttributeTypeImpl)
                return stream;
            if (arg instanceof dependencies_internal_1.StringAttributeTypeImpl)
                return stream;
            if (arg instanceof dependencies_internal_1.DateTimeAttributeTypeImpl)
                return stream;
            throw new dependencies_internal_1.GraknClientError(dependencies_internal_1.ErrorMessage.Concept.BAD_VALUE_TYPE.message(arg));
        }
        getPlays() {
            const method = new concept_pb_1.default.Thing.Req().setThingGetPlaysReq(new concept_pb_1.default.Thing.GetPlays.Req());
            return this.typeStream(method, res => res.getThingGetPlaysRes().getRoleTypeList());
        }
        getRelations(roleTypes = []) {
            const method = new concept_pb_1.default.Thing.Req().setThingGetRelationsReq(new concept_pb_1.default.Thing.GetRelations.Req().setRoleTypesList(dependencies_internal_1.ConceptProtoBuilder.types(roleTypes)));
            return this.thingStream(method, res => res.getThingGetRelationsRes().getRelationList());
        }
        setHas(attribute) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Thing.Req().setThingSetHasReq(new concept_pb_1.default.Thing.SetHas.Req().setAttribute(dependencies_internal_1.ConceptProtoBuilder.thing(attribute))));
            });
        }
        unsetHas(attribute) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Thing.Req().setThingUnsetHasReq(new concept_pb_1.default.Thing.UnsetHas.Req().setAttribute(dependencies_internal_1.ConceptProtoBuilder.thing(attribute))));
            });
        }
        delete() {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Thing.Req().setThingDeleteReq(new concept_pb_1.default.Thing.Delete.Req()));
            });
        }
        isDeleted() {
            return __awaiter(this, void 0, void 0, function* () {
                return !(yield this._rpcTransaction.concepts().getThing(this._iid));
            });
        }
        get transaction() {
            return this._rpcTransaction;
        }
        typeStream(method, typeGetter) {
            const request = new transaction_pb_1.default.Transaction.Req().setThingReq(method.setIid(this._iid));
            return (this._rpcTransaction).stream(request, res => typeGetter(res.getThingRes()).map(dependencies_internal_1.ConceptProtoReader.type));
        }
        thingStream(method, thingGetter) {
            const request = new transaction_pb_1.default.Transaction.Req().setThingReq(method.setIid(this._iid));
            return this._rpcTransaction.stream(request, res => thingGetter(res.getThingRes()).map(dependencies_internal_1.ConceptProtoReader.thing));
        }
        execute(method) {
            const request = new transaction_pb_1.default.Transaction.Req().setThingReq(method.setIid(this._iid));
            return this._rpcTransaction.execute(request, res => res.getThingRes());
        }
        toString() {
            return `${RemoteThingImpl.name}[iid:${this._iid}]`;
        }
    }
    exports.RemoteThingImpl = RemoteThingImpl;
});
//# sourceMappingURL=data:application/json;base64,