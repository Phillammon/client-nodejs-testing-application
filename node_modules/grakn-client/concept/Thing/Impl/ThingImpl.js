/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/Thing/Impl/ThingImpl", ["require", "exports", "grakn-client/concept/Concept"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteThingImpl = exports.ThingImpl = void 0;
    const Concept_1 = require("grakn-client/concept/Concept");
    class ThingImpl {
        // TODO: all error messages should be extracted into ErrorMessage class or namespace
        constructor(iid) {
            if (!iid) {
                throw "IID Missing";
            }
            this._iid = iid;
        }
        getIID() {
            return this._iid;
        }
        isRemote() {
            return false;
        }
        toString() {
            return `${ThingImpl.name}[iid:${this._iid}]`;
        }
    }
    exports.ThingImpl = ThingImpl;
    class RemoteThingImpl {
        constructor(transaction, iid) {
            if (!transaction)
                throw "Transaction Missing";
            if (!iid)
                throw "IID Missing";
            this._iid = iid;
            this._transaction = transaction;
        }
        getType() {
            throw "Not implemented yet";
        }
        isInferred() {
            throw "Not implemented yet";
        }
        delete() {
            throw "Not implemented yet";
        }
        getIID() {
            return this._iid;
        }
        isDeleted() {
            return false;
        }
        isRemote() {
            return true;
        }
        getHas(onlyKey) {
            return new Concept_1.QueryIterator();
        }
        getPlays() {
            return new Concept_1.QueryIterator();
        }
        getRelations(roleTypes) {
            return new Concept_1.QueryIterator();
        }
        setHas(attribute) {
            throw "Not implemented yet";
        }
        unsetHas(attribute) {
            throw "Not implemented yet";
        }
        get transaction() {
            return this._transaction;
        }
        toString() {
            return `${RemoteThingImpl.name}[iid:${this._iid}]`;
        }
    }
    exports.RemoteThingImpl = RemoteThingImpl;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhpbmdJbXBsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vY29uY2VwdC9UaGluZy9JbXBsL1RoaW5nSW1wbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7Ozs7Ozs7Ozs7Ozs7SUFLSCwwREFBOEM7SUFROUMsTUFBc0IsU0FBUztRQUczQixvRkFBb0Y7UUFDcEYsWUFBc0IsR0FBVztZQUM3QixJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNOLE1BQU0sYUFBYSxDQUFBO2FBQ3RCO1lBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDcEIsQ0FBQztRQUVELE1BQU07WUFDRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDckIsQ0FBQztRQUVELFFBQVE7WUFDSixPQUFPLEtBQUssQ0FBQztRQUNqQixDQUFDO1FBRUQsUUFBUTtZQUNKLE9BQU8sR0FBRyxTQUFTLENBQUMsSUFBSSxRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQztRQUNqRCxDQUFDO0tBR0o7SUF4QkQsOEJBd0JDO0lBRUQsTUFBc0IsZUFBZTtRQUlqQyxZQUFzQixXQUF3QixFQUFFLEdBQVc7WUFDdkQsSUFBSSxDQUFDLFdBQVc7Z0JBQUUsTUFBTSxxQkFBcUIsQ0FBQTtZQUM3QyxJQUFJLENBQUMsR0FBRztnQkFBRSxNQUFNLGFBQWEsQ0FBQTtZQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztZQUNoQixJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztRQUNwQyxDQUFDO1FBRUQsT0FBTztZQUNILE1BQU0scUJBQXFCLENBQUM7UUFDaEMsQ0FBQztRQUVELFVBQVU7WUFDTixNQUFNLHFCQUFxQixDQUFDO1FBQ2hDLENBQUM7UUFJRCxNQUFNO1lBQ0YsTUFBTSxxQkFBcUIsQ0FBQztRQUNoQyxDQUFDO1FBRUQsTUFBTTtZQUNGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztRQUNyQixDQUFDO1FBRUQsU0FBUztZQUNMLE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUM7UUFFRCxRQUFRO1lBQ0osT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztRQVNELE1BQU0sQ0FBQyxPQUF5QztZQUM1QyxPQUFPLElBQUksdUJBQWEsRUFBRSxDQUFDO1FBQy9CLENBQUM7UUFFRCxRQUFRO1lBQ0osT0FBTyxJQUFJLHVCQUFhLEVBQUUsQ0FBQztRQUMvQixDQUFDO1FBRUQsWUFBWSxDQUFDLFNBQXFCO1lBQzlCLE9BQU8sSUFBSSx1QkFBYSxFQUFFLENBQUM7UUFDL0IsQ0FBQztRQUVELE1BQU0sQ0FBQyxTQUE4QztZQUNqRCxNQUFNLHFCQUFxQixDQUFDO1FBQ2hDLENBQUM7UUFFRCxRQUFRLENBQUMsU0FBOEM7WUFDbkQsTUFBTSxxQkFBcUIsQ0FBQztRQUNoQyxDQUFDO1FBRUQsSUFBYyxXQUFXO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztRQUM3QixDQUFDO1FBRUQsUUFBUTtZQUNKLE9BQU8sR0FBRyxlQUFlLENBQUMsSUFBSSxRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQztRQUN2RCxDQUFDO0tBQ0o7SUF2RUQsMENBdUVDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFRoaW5nLCBSZW1vdGVUaGluZyB9IGZyb20gXCIuLi9UaGluZ1wiO1xuaW1wb3J0IHsgQXR0cmlidXRlIH0gZnJvbSBcIi4uL0F0dHJpYnV0ZVwiO1xuaW1wb3J0IHsgVHlwZSB9IGZyb20gXCIuLi8uLi9UeXBlL1R5cGVcIjtcbmltcG9ydCB7IFF1ZXJ5SXRlcmF0b3IgfSBmcm9tIFwiLi4vLi4vQ29uY2VwdFwiO1xuaW1wb3J0IHsgQXR0cmlidXRlVHlwZSB9IGZyb20gXCIuLi8uLi9UeXBlL0F0dHJpYnV0ZVR5cGVcIjtcbmltcG9ydCB7IFJvbGVUeXBlIH0gZnJvbSBcIi4uLy4uL1R5cGUvUm9sZVR5cGVcIjtcbmltcG9ydCBDb25jZXB0UHJvdG8gZnJvbSBcImdyYWtubGFicy1ncnBjLXByb3RvY29sL3Byb3RvYnVmL2NvbmNlcHRfcGJcIjtcbmltcG9ydCB7IFRoaW5nVHlwZUltcGwgfSBmcm9tIFwiLi4vLi4vVHlwZS9JbXBsL1RoaW5nVHlwZUltcGxcIjtcbmltcG9ydCB7IEdyYWtuIH0gZnJvbSBcIi4uLy4uLy4uL0dyYWtuXCI7XG5pbXBvcnQgVHJhbnNhY3Rpb24gPSBHcmFrbi5UcmFuc2FjdGlvbjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRoaW5nSW1wbCBpbXBsZW1lbnRzIFRoaW5nIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9paWQ6IHN0cmluZztcblxuICAgIC8vIFRPRE86IGFsbCBlcnJvciBtZXNzYWdlcyBzaG91bGQgYmUgZXh0cmFjdGVkIGludG8gRXJyb3JNZXNzYWdlIGNsYXNzIG9yIG5hbWVzcGFjZVxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihpaWQ6IHN0cmluZykge1xuICAgICAgICBpZiAoIWlpZCkge1xuICAgICAgICAgICAgdGhyb3cgXCJJSUQgTWlzc2luZ1wiXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faWlkID0gaWlkO1xuICAgIH1cblxuICAgIGdldElJRCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5faWlkO1xuICAgIH1cblxuICAgIGlzUmVtb3RlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke1RoaW5nSW1wbC5uYW1lfVtpaWQ6JHt0aGlzLl9paWR9XWA7XG4gICAgfVxuXG4gICAgYWJzdHJhY3QgYXNSZW1vdGUodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogUmVtb3RlVGhpbmc7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZW1vdGVUaGluZ0ltcGwgaW1wbGVtZW50cyBSZW1vdGVUaGluZyB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfaWlkOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfdHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uO1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiwgaWlkOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCF0cmFuc2FjdGlvbikgdGhyb3cgXCJUcmFuc2FjdGlvbiBNaXNzaW5nXCJcbiAgICAgICAgaWYgKCFpaWQpIHRocm93IFwiSUlEIE1pc3NpbmdcIlxuICAgICAgICB0aGlzLl9paWQgPSBpaWQ7XG4gICAgICAgIHRoaXMuX3RyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb247XG4gICAgfVxuXG4gICAgZ2V0VHlwZSgpOiBUaGluZ1R5cGVJbXBsIHtcbiAgICAgICAgdGhyb3cgXCJOb3QgaW1wbGVtZW50ZWQgeWV0XCI7XG4gICAgfVxuXG4gICAgaXNJbmZlcnJlZCgpOiBib29sZWFuIHtcbiAgICAgICAgdGhyb3cgXCJOb3QgaW1wbGVtZW50ZWQgeWV0XCI7XG4gICAgfVxuXG4gICAgYWJzdHJhY3QgYXNSZW1vdGUodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogUmVtb3RlVGhpbmc7XG5cbiAgICBkZWxldGUoKTogdm9pZCB7XG4gICAgICAgIHRocm93IFwiTm90IGltcGxlbWVudGVkIHlldFwiO1xuICAgIH1cblxuICAgIGdldElJRCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5faWlkO1xuICAgIH1cblxuICAgIGlzRGVsZXRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlzUmVtb3RlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXRIYXMob25seUtleTogYm9vbGVhbik6IFF1ZXJ5SXRlcmF0b3I7XG4gICAgZ2V0SGFzKGF0dHJpYnV0ZVR5cGU6IFR5cGUpOiBRdWVyeUl0ZXJhdG9yO1xuICAgIGdldEhhcyhhdHRyaWJ1dGVUeXBlOiBUeXBlKTogUXVlcnlJdGVyYXRvcjtcbiAgICBnZXRIYXMoYXR0cmlidXRlVHlwZTogVHlwZSk6IFF1ZXJ5SXRlcmF0b3I7XG4gICAgZ2V0SGFzKGF0dHJpYnV0ZVR5cGU6IFR5cGUpOiBRdWVyeUl0ZXJhdG9yO1xuICAgIGdldEhhcyhhdHRyaWJ1dGVUeXBlOiBUeXBlKTogUXVlcnlJdGVyYXRvcjtcbiAgICBnZXRIYXMoYXR0cmlidXRlVHlwZXM6IEF0dHJpYnV0ZVR5cGVbXSk6IFF1ZXJ5SXRlcmF0b3I7XG4gICAgZ2V0SGFzKG9ubHlLZXk6IGJvb2xlYW4gfCBUeXBlIHwgQXR0cmlidXRlVHlwZVtdKTogUXVlcnlJdGVyYXRvciB7XG4gICAgICAgIHJldHVybiBuZXcgUXVlcnlJdGVyYXRvcigpO1xuICAgIH1cblxuICAgIGdldFBsYXlzKCk6IFF1ZXJ5SXRlcmF0b3Ige1xuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5SXRlcmF0b3IoKTtcbiAgICB9XG5cbiAgICBnZXRSZWxhdGlvbnMocm9sZVR5cGVzOiBSb2xlVHlwZVtdKTogUXVlcnlJdGVyYXRvciB7XG4gICAgICAgIHJldHVybiBuZXcgUXVlcnlJdGVyYXRvcigpO1xuICAgIH1cblxuICAgIHNldEhhcyhhdHRyaWJ1dGU6IEF0dHJpYnV0ZTxBdHRyaWJ1dGVUeXBlLlZhbHVlQ2xhc3M+KTogdm9pZCB7XG4gICAgICAgIHRocm93IFwiTm90IGltcGxlbWVudGVkIHlldFwiO1xuICAgIH1cblxuICAgIHVuc2V0SGFzKGF0dHJpYnV0ZTogQXR0cmlidXRlPEF0dHJpYnV0ZVR5cGUuVmFsdWVDbGFzcz4pOiB2b2lkIHtcbiAgICAgICAgdGhyb3cgXCJOb3QgaW1wbGVtZW50ZWQgeWV0XCI7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldCB0cmFuc2FjdGlvbigpOiBUcmFuc2FjdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2FjdGlvbjtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7UmVtb3RlVGhpbmdJbXBsLm5hbWV9W2lpZDoke3RoaXMuX2lpZH1dYDtcbiAgICB9XG59XG4iXX0=