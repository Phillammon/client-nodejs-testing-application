/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/thing/impl/AttributeImpl", ["require", "exports", "grakn-client/dependencies_internal", "graknlabs-protocol/protobuf/concept_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DateTimeAttributeImpl = exports.RemoteStringAttributeImpl = exports.StringAttributeImpl = exports.RemoteDoubleAttributeImpl = exports.DoubleAttributeImpl = exports.RemoteLongAttributeImpl = exports.LongAttributeImpl = exports.RemoteBooleanAttributeImpl = exports.BooleanAttributeImpl = exports.RemoteAttributeImpl = exports.AttributeImpl = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    const concept_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/concept_pb"));
    class AttributeImpl extends dependencies_internal_1.ThingImpl {
        constructor(iid) {
            super(iid);
        }
    }
    exports.AttributeImpl = AttributeImpl;
    class RemoteAttributeImpl extends dependencies_internal_1.RemoteThingImpl {
        constructor(transaction, iid) {
            super(transaction, iid);
        }
        getOwners(ownerType) {
            const method = new concept_pb_1.default.Thing.Req().setAttributeGetOwnersReq(new concept_pb_1.default.Attribute.GetOwners.Req().setThingType(dependencies_internal_1.ConceptProtoBuilder.type(ownerType)));
            return this.thingStream(method, res => res.getAttributeGetOwnersRes().getThingList());
        }
        getType() {
            return __awaiter(this, void 0, void 0, function* () {
                const res = yield this.execute(new concept_pb_1.default.Thing.Req().setThingGetTypeReq(new concept_pb_1.default.Thing.GetType.Req()));
                return dependencies_internal_1.ConceptProtoReader.thingType(res.getThingGetTypeRes().getThingType());
            });
        }
    }
    exports.RemoteAttributeImpl = RemoteAttributeImpl;
    class BooleanAttributeImpl extends AttributeImpl {
        constructor(iid, value) {
            super(iid);
            this._value = value;
        }
        static of(protoThing) {
            return new BooleanAttributeImpl(protoThing.getIid_asB64(), protoThing.getValue().getBoolean());
        }
        asRemote(transaction) {
            return new RemoteBooleanAttributeImpl(transaction, this.getIID(), this._value);
        }
        getValue() {
            return this._value;
        }
    }
    exports.BooleanAttributeImpl = BooleanAttributeImpl;
    class RemoteBooleanAttributeImpl extends RemoteAttributeImpl {
        constructor(transaction, iid, value) {
            super(transaction, iid);
            this._value = value;
        }
        getValue() {
            return this._value;
        }
        getType() {
            return __awaiter(this, void 0, void 0, function* () {
                const res = yield this.execute(new concept_pb_1.default.Thing.Req().setThingGetTypeReq(new concept_pb_1.default.Thing.GetType.Req()));
                return dependencies_internal_1.BooleanAttributeTypeImpl.of(res.getThingGetTypeRes().getThingType());
            });
        }
        asRemote(transaction) {
            return new RemoteBooleanAttributeImpl(transaction, this.getIID(), this._value);
        }
    }
    exports.RemoteBooleanAttributeImpl = RemoteBooleanAttributeImpl;
    class LongAttributeImpl extends AttributeImpl {
        constructor(iid, value) {
            super(iid);
            this._value = value;
        }
        static of(protoThing) {
            return new LongAttributeImpl(protoThing.getIid_asB64(), protoThing.getValue().getLong());
        }
        asRemote(transaction) {
            return new RemoteLongAttributeImpl(transaction, this.getIID(), this._value);
        }
        getValue() {
            return this._value;
        }
    }
    exports.LongAttributeImpl = LongAttributeImpl;
    class RemoteLongAttributeImpl extends RemoteAttributeImpl {
        constructor(transaction, iid, value) {
            super(transaction, iid);
            this._value = value;
        }
        getValue() {
            return this._value;
        }
        getType() {
            return __awaiter(this, void 0, void 0, function* () {
                const res = yield this.execute(new concept_pb_1.default.Thing.Req().setThingGetTypeReq(new concept_pb_1.default.Thing.GetType.Req()));
                return dependencies_internal_1.LongAttributeTypeImpl.of(res.getThingGetTypeRes().getThingType());
            });
        }
        asRemote(transaction) {
            return new RemoteLongAttributeImpl(transaction, this.getIID(), this._value);
        }
    }
    exports.RemoteLongAttributeImpl = RemoteLongAttributeImpl;
    class DoubleAttributeImpl extends AttributeImpl {
        constructor(iid, value) {
            super(iid);
            this._value = value;
        }
        static of(protoThing) {
            return new DoubleAttributeImpl(protoThing.getIid_asB64(), protoThing.getValue().getDouble());
        }
        asRemote(transaction) {
            return new RemoteDoubleAttributeImpl(transaction, this.getIID(), this._value);
        }
        getValue() {
            return this._value;
        }
    }
    exports.DoubleAttributeImpl = DoubleAttributeImpl;
    class RemoteDoubleAttributeImpl extends RemoteAttributeImpl {
        constructor(transaction, iid, value) {
            super(transaction, iid);
            this._value = value;
        }
        getValue() {
            return this._value;
        }
        getType() {
            return __awaiter(this, void 0, void 0, function* () {
                const res = yield this.execute(new concept_pb_1.default.Thing.Req().setThingGetTypeReq(new concept_pb_1.default.Thing.GetType.Req()));
                return dependencies_internal_1.DoubleAttributeTypeImpl.of(res.getThingGetTypeRes().getThingType());
            });
        }
        asRemote(transaction) {
            return new RemoteDoubleAttributeImpl(transaction, this.getIID(), this._value);
        }
    }
    exports.RemoteDoubleAttributeImpl = RemoteDoubleAttributeImpl;
    class StringAttributeImpl extends AttributeImpl {
        constructor(iid, value) {
            super(iid);
            this._value = value;
        }
        static of(protoThing) {
            return new StringAttributeImpl(protoThing.getIid_asB64(), protoThing.getValue().getString());
        }
        asRemote(transaction) {
            return new RemoteStringAttributeImpl(transaction, this.getIID(), this._value);
        }
        getValue() {
            return this._value;
        }
    }
    exports.StringAttributeImpl = StringAttributeImpl;
    class RemoteStringAttributeImpl extends RemoteAttributeImpl {
        constructor(transaction, iid, value) {
            super(transaction, iid);
            this._value = value;
        }
        getValue() {
            return this._value;
        }
        getType() {
            return __awaiter(this, void 0, void 0, function* () {
                const res = yield this.execute(new concept_pb_1.default.Thing.Req().setThingGetTypeReq(new concept_pb_1.default.Thing.GetType.Req()));
                return dependencies_internal_1.StringAttributeTypeImpl.of(res.getThingGetTypeRes().getThingType());
            });
        }
        asRemote(transaction) {
            return new RemoteStringAttributeImpl(transaction, this.getIID(), this._value);
        }
    }
    exports.RemoteStringAttributeImpl = RemoteStringAttributeImpl;
    class DateTimeAttributeImpl extends AttributeImpl {
        constructor(iid, value) {
            super(iid);
            this._value = value;
        }
        static of(protoThing) {
            return new DateTimeAttributeImpl(protoThing.getIid_asB64(), new Date(protoThing.getValue().getDateTime()));
        }
        asRemote(transaction) {
            return new RemoteDateTimeAttributeImpl(transaction, this.getIID(), this._value);
        }
        getValue() {
            return this._value;
        }
    }
    exports.DateTimeAttributeImpl = DateTimeAttributeImpl;
    class RemoteDateTimeAttributeImpl extends RemoteAttributeImpl {
        constructor(transaction, iid, value) {
            super(transaction, iid);
            this._value = value;
        }
        getValue() {
            return this._value;
        }
        getType() {
            return __awaiter(this, void 0, void 0, function* () {
                const res = yield this.execute(new concept_pb_1.default.Thing.Req().setThingGetTypeReq(new concept_pb_1.default.Thing.GetType.Req()));
                return dependencies_internal_1.DateTimeAttributeTypeImpl.of(res.getThingGetTypeRes().getThingType());
            });
        }
        asRemote(transaction) {
            return new RemoteDateTimeAttributeImpl(transaction, this.getIID(), this._value);
        }
    }
});
//# sourceMappingURL=data:application/json;base64,