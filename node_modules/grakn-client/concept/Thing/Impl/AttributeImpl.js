/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/Thing/Impl/AttributeImpl", ["require", "exports", "grakn-client/concept/Thing/Impl/ThingImpl", "grakn-client/concept/Concept"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DateTimeAttributeImpl = exports.RemoteDoubleAttributeImpl = exports.DoubleAttributeImpl = exports.RemoteStringAttributeImpl = exports.StringAttributeImpl = exports.RemoteLongAttributeImpl = exports.LongAttributeImpl = exports.RemoteBooleanAttributeImpl = exports.BooleanAttributeImpl = exports.RemoteAttributeImpl = exports.AttributeImpl = void 0;
    const ThingImpl_1 = require("grakn-client/concept/Thing/Impl/ThingImpl");
    const Concept_1 = require("grakn-client/concept/Concept");
    class AttributeImpl extends ThingImpl_1.ThingImpl {
        constructor(iid) {
            super(iid);
        }
        static of(protoThing) {
            throw "circular reference"; // TODO
        }
    }
    exports.AttributeImpl = AttributeImpl;
    class RemoteAttributeImpl extends ThingImpl_1.RemoteThingImpl {
        constructor(transaction, iid) {
            super(transaction, iid);
        }
        getOwners(ownerType) {
            return new Concept_1.QueryIterator();
        }
        getType() {
            throw "Not implemented yet";
        }
    }
    exports.RemoteAttributeImpl = RemoteAttributeImpl;
    class BooleanAttributeImpl extends AttributeImpl {
        constructor(iid, value) {
            super(iid);
            this.value = value;
        }
        static of(protoThing) {
            return new BooleanAttributeImpl(protoThing.getIid_asB64(), protoThing.getValue().getBoolean());
        }
        asRemote(transaction) {
            return new RemoteBooleanAttributeImpl(transaction, this.getIID(), this.value);
        }
        getValue() {
            return this.value;
        }
    }
    exports.BooleanAttributeImpl = BooleanAttributeImpl;
    class RemoteBooleanAttributeImpl extends RemoteAttributeImpl {
        constructor(transaction, iid, value) {
            super(transaction, iid);
            this.value = value;
        }
        getValue() {
            return this.value;
        }
        getType() {
            throw "Not implemented yet";
        }
        asRemote(transaction) {
            return new RemoteBooleanAttributeImpl(transaction, this.getIID(), this.value);
        }
    }
    exports.RemoteBooleanAttributeImpl = RemoteBooleanAttributeImpl;
    class LongAttributeImpl extends AttributeImpl {
        constructor(iid, value) {
            super(iid);
            this.value = value;
        }
        static of(protoThing) {
            return new LongAttributeImpl(protoThing.getIid_asB64(), protoThing.getValue().getLong());
        }
        asRemote(transaction) {
            return new RemoteLongAttributeImpl(transaction, this.getIID(), this.value);
        }
        getValue() {
            return this.value;
        }
    }
    exports.LongAttributeImpl = LongAttributeImpl;
    class RemoteLongAttributeImpl extends RemoteAttributeImpl {
        constructor(transaction, iid, value) {
            super(transaction, iid);
            this.value = value;
        }
        getValue() {
            return this.value;
        }
        getType() {
            throw "Of not present";
        }
        asRemote(transaction) {
            return this;
        }
    }
    exports.RemoteLongAttributeImpl = RemoteLongAttributeImpl;
    class StringAttributeImpl extends AttributeImpl {
        constructor(iid, value) {
            super(iid);
            this.value = value;
        }
        static of(protoThing) {
            return new StringAttributeImpl(protoThing.getIid_asB64(), protoThing.getValue().getString());
        }
        asRemote(transaction) {
            return new RemoteStringAttributeImpl(transaction, this.getIID(), this.value);
        }
        getValue() {
            return this.value;
        }
    }
    exports.StringAttributeImpl = StringAttributeImpl;
    class RemoteStringAttributeImpl extends RemoteAttributeImpl {
        constructor(transaction, iid, value) {
            super(transaction, iid);
            this.value = value;
        }
        getValue() {
            return this.value;
        }
        getType() {
            throw "Of not present";
        }
        asRemote(transaction) {
            return this;
        }
    }
    exports.RemoteStringAttributeImpl = RemoteStringAttributeImpl;
    class DoubleAttributeImpl extends AttributeImpl {
        constructor(iid, value) {
            super(iid);
            this.value = value;
        }
        static of(protoThing) {
            return new DoubleAttributeImpl(protoThing.getIid_asB64(), protoThing.getValue().getDouble());
        }
        asRemote(transaction) {
            return new RemoteDoubleAttributeImpl(transaction, this.getIID(), this.value);
        }
        getValue() {
            return this.value;
        }
    }
    exports.DoubleAttributeImpl = DoubleAttributeImpl;
    class RemoteDoubleAttributeImpl extends RemoteAttributeImpl {
        constructor(transaction, iid, value) {
            super(transaction, iid);
            this.value = value;
        }
        getValue() {
            return this.value;
        }
        getType() {
            throw "Not implemented yet";
        }
        asRemote(transaction) {
            return this;
        }
    }
    exports.RemoteDoubleAttributeImpl = RemoteDoubleAttributeImpl;
    class DateTimeAttributeImpl extends AttributeImpl {
        constructor(iid, value) {
            super(iid);
            this.value = value;
        }
        static of(protoThing) {
            return new DateTimeAttributeImpl(protoThing.getIid_asB64(), new Date(protoThing.getValue().getDateTime()));
        }
        asRemote(transaction) {
            return new RemoteDateTimeAttributeImpl(transaction, this.getIID(), this.value);
        }
        getValue() {
            return this.value;
        }
    }
    exports.DateTimeAttributeImpl = DateTimeAttributeImpl;
    class RemoteDateTimeAttributeImpl extends RemoteAttributeImpl {
        constructor(transaction, iid, value) {
            super(transaction, iid);
            this.value = value;
        }
        getValue() {
            return this.value;
        }
        getType() {
            throw "Of not present";
        }
        asRemote(transaction) {
            return this;
        }
    }
});
//# sourceMappingURL=data:application/json;base64,