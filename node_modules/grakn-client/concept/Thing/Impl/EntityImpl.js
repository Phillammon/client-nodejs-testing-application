/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/thing/impl/EntityImpl", ["require", "exports", "grakn-client/dependencies_internal", "graknlabs-protocol/protobuf/concept_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteEntityImpl = exports.EntityImpl = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    const concept_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/concept_pb"));
    class EntityImpl extends dependencies_internal_1.ThingImpl {
        constructor(iid) {
            super(iid);
        }
        static of(protoThing) {
            // TODO: we should probably implement Bytes.bytesToHexString from @graknlabs_common
            return new EntityImpl(protoThing.getIid_asB64());
        }
        asRemote(transaction) {
            return new RemoteEntityImpl(transaction, this.getIID());
        }
    }
    exports.EntityImpl = EntityImpl;
    class RemoteEntityImpl extends dependencies_internal_1.RemoteThingImpl {
        constructor(transaction, iid) {
            super(transaction, iid);
        }
        asRemote(transaction) {
            return new RemoteEntityImpl(transaction, this.getIID());
        }
        getType() {
            return __awaiter(this, void 0, void 0, function* () {
                const res = yield this.execute(new concept_pb_1.default.Thing.Req().setThingGetTypeReq(new concept_pb_1.default.Thing.GetType.Req()));
                return dependencies_internal_1.ConceptProtoReader.thingType(res.getThingGetTypeRes().getThingType());
            });
        }
    }
    exports.RemoteEntityImpl = RemoteEntityImpl;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW50aXR5SW1wbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2NvbmNlcHQvdGhpbmcvaW1wbC9FbnRpdHlJbXBsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUVILDhFQU93QztJQUV4Qyx3RkFBa0U7SUFFbEUsTUFBYSxVQUFXLFNBQVEsaUNBQVM7UUFDckMsWUFBc0IsR0FBVztZQUM3QixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDZixDQUFDO1FBRUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxVQUE4QjtZQUNwQyxtRkFBbUY7WUFDbkYsT0FBTyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUNyRCxDQUFDO1FBRUQsUUFBUSxDQUFDLFdBQXdCO1lBQzdCLE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDNUQsQ0FBQztLQUNKO0lBYkQsZ0NBYUM7SUFFRCxNQUFhLGdCQUFpQixTQUFRLHVDQUFlO1FBQ2pELFlBQVksV0FBd0IsRUFBRSxHQUFXO1lBQzdDLEtBQUssQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUVNLFFBQVEsQ0FBQyxXQUF3QjtZQUNwQyxPQUFPLElBQUksZ0JBQWdCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQzVELENBQUM7UUFFSyxPQUFPOztnQkFDVCxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxvQkFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLG9CQUFZLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RILE9BQU8sMENBQWtCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFtQixDQUFDO1lBQ25HLENBQUM7U0FBQTtLQUNKO0lBYkQsNENBYUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgICBUaGluZ0ltcGwsXG4gICAgUmVtb3RlVGhpbmdJbXBsLFxuICAgIEVudGl0eSxcbiAgICBSZW1vdGVFbnRpdHksXG4gICAgRW50aXR5VHlwZUltcGwsXG4gICAgR3Jha24sIENvbmNlcHRQcm90b1JlYWRlcixcbn0gZnJvbSBcIi4uLy4uLy4uL2RlcGVuZGVuY2llc19pbnRlcm5hbFwiO1xuaW1wb3J0IFRyYW5zYWN0aW9uID0gR3Jha24uVHJhbnNhY3Rpb247XG5pbXBvcnQgQ29uY2VwdFByb3RvIGZyb20gXCJncmFrbmxhYnMtcHJvdG9jb2wvcHJvdG9idWYvY29uY2VwdF9wYlwiO1xuXG5leHBvcnQgY2xhc3MgRW50aXR5SW1wbCBleHRlbmRzIFRoaW5nSW1wbCBpbXBsZW1lbnRzIEVudGl0eSB7XG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGlpZDogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKGlpZCk7XG4gICAgfVxuXG4gICAgc3RhdGljIG9mKHByb3RvVGhpbmc6IENvbmNlcHRQcm90by5UaGluZyk6IEVudGl0eUltcGwge1xuICAgICAgICAvLyBUT0RPOiB3ZSBzaG91bGQgcHJvYmFibHkgaW1wbGVtZW50IEJ5dGVzLmJ5dGVzVG9IZXhTdHJpbmcgZnJvbSBAZ3Jha25sYWJzX2NvbW1vblxuICAgICAgICByZXR1cm4gbmV3IEVudGl0eUltcGwocHJvdG9UaGluZy5nZXRJaWRfYXNCNjQoKSk7XG4gICAgfVxuXG4gICAgYXNSZW1vdGUodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogUmVtb3RlRW50aXR5SW1wbCB7XG4gICAgICAgIHJldHVybiBuZXcgUmVtb3RlRW50aXR5SW1wbCh0cmFuc2FjdGlvbiwgdGhpcy5nZXRJSUQoKSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVtb3RlRW50aXR5SW1wbCBleHRlbmRzIFJlbW90ZVRoaW5nSW1wbCBpbXBsZW1lbnRzIFJlbW90ZUVudGl0eSB7XG4gICAgY29uc3RydWN0b3IodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uLCBpaWQ6IHN0cmluZykge1xuICAgICAgICBzdXBlcih0cmFuc2FjdGlvbiwgaWlkKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXNSZW1vdGUodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogUmVtb3RlRW50aXR5SW1wbCB7XG4gICAgICAgIHJldHVybiBuZXcgUmVtb3RlRW50aXR5SW1wbCh0cmFuc2FjdGlvbiwgdGhpcy5nZXRJSUQoKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0VHlwZSgpOiBQcm9taXNlPEVudGl0eVR5cGVJbXBsPiB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZXhlY3V0ZShuZXcgQ29uY2VwdFByb3RvLlRoaW5nLlJlcSgpLnNldFRoaW5nR2V0VHlwZVJlcShuZXcgQ29uY2VwdFByb3RvLlRoaW5nLkdldFR5cGUuUmVxKCkpKTtcbiAgICAgICAgcmV0dXJuIENvbmNlcHRQcm90b1JlYWRlci50aGluZ1R5cGUocmVzLmdldFRoaW5nR2V0VHlwZVJlcygpLmdldFRoaW5nVHlwZSgpKSBhcyBFbnRpdHlUeXBlSW1wbDtcbiAgICB9XG59XG4iXX0=