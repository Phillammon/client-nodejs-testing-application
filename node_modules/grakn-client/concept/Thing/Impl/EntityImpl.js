/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/Thing/Impl/EntityImpl", ["require", "exports", "grakn-client/concept/Thing/Impl/ThingImpl"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteEntityImpl = exports.EntityImpl = void 0;
    const ThingImpl_1 = require("grakn-client/concept/Thing/Impl/ThingImpl");
    class EntityImpl extends ThingImpl_1.ThingImpl {
        constructor(iid) {
            super(iid);
        }
        static of(protoThing) {
            // TODO: we should probably implement Bytes.bytesToHexString from @graknlabs_common
            return new EntityImpl(protoThing.getIid_asB64());
        }
        asRemote(transaction) {
            return new RemoteEntityImpl(transaction, this.getIID());
        }
    }
    exports.EntityImpl = EntityImpl;
    class RemoteEntityImpl extends ThingImpl_1.RemoteThingImpl {
        constructor(transaction, iid) {
            super(transaction, iid);
        }
        asRemote(transaction) {
            return this;
        }
        getType() {
            throw "Not yet implemented";
        }
    }
    exports.RemoteEntityImpl = RemoteEntityImpl;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW50aXR5SW1wbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2NvbmNlcHQvVGhpbmcvSW1wbC9FbnRpdHlJbXBsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRzs7Ozs7Ozs7Ozs7OztJQUVILHlFQUF5RDtJQU96RCxNQUFhLFVBQVcsU0FBUSxxQkFBUztRQUNyQyxZQUFzQixHQUFXO1lBQzdCLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLENBQUM7UUFFRCxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQThCO1lBQ3BDLG1GQUFtRjtZQUNuRixPQUFPLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELENBQUM7UUFFRCxRQUFRLENBQUMsV0FBd0I7WUFDN0IsT0FBTyxJQUFJLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUM1RCxDQUFDO0tBQ0o7SUFiRCxnQ0FhQztJQUVELE1BQWEsZ0JBQWlCLFNBQVEsMkJBQWU7UUFDakQsWUFBWSxXQUF3QixFQUFFLEdBQVc7WUFDN0MsS0FBSyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM1QixDQUFDO1FBRU0sUUFBUSxDQUFDLFdBQXdCO1lBQ3BDLE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFFRCxPQUFPO1lBQ0gsTUFBTSxxQkFBcUIsQ0FBQTtRQUMvQixDQUFDO0tBQ0o7SUFaRCw0Q0FZQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBUaGluZ0ltcGwsIFJlbW90ZVRoaW5nSW1wbCB9IGZyb20gXCIuL1RoaW5nSW1wbFwiO1xuaW1wb3J0IHsgRW50aXR5LCBSZW1vdGVFbnRpdHkgfSBmcm9tIFwiLi4vRW50aXR5XCI7XG5pbXBvcnQgeyBFbnRpdHlUeXBlSW1wbCB9IGZyb20gXCIuLi8uLi9UeXBlL0ltcGwvRW50aXR5VHlwZUltcGxcIjtcbmltcG9ydCB7IEdyYWtuIH0gZnJvbSBcIi4uLy4uLy4uL0dyYWtuXCI7XG5pbXBvcnQgVHJhbnNhY3Rpb24gPSBHcmFrbi5UcmFuc2FjdGlvbjtcbmltcG9ydCBDb25jZXB0UHJvdG8gZnJvbSBcImdyYWtubGFicy1ncnBjLXByb3RvY29sL3Byb3RvYnVmL2NvbmNlcHRfcGJcIjtcblxuZXhwb3J0IGNsYXNzIEVudGl0eUltcGwgZXh0ZW5kcyBUaGluZ0ltcGwgaW1wbGVtZW50cyBFbnRpdHkge1xuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihpaWQ6IHN0cmluZykge1xuICAgICAgICBzdXBlcihpaWQpO1xuICAgIH1cblxuICAgIHN0YXRpYyBvZihwcm90b1RoaW5nOiBDb25jZXB0UHJvdG8uVGhpbmcpOiBFbnRpdHlJbXBsIHtcbiAgICAgICAgLy8gVE9ETzogd2Ugc2hvdWxkIHByb2JhYmx5IGltcGxlbWVudCBCeXRlcy5ieXRlc1RvSGV4U3RyaW5nIGZyb20gQGdyYWtubGFic19jb21tb25cbiAgICAgICAgcmV0dXJuIG5ldyBFbnRpdHlJbXBsKHByb3RvVGhpbmcuZ2V0SWlkX2FzQjY0KCkpO1xuICAgIH1cblxuICAgIGFzUmVtb3RlKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbik6IFJlbW90ZUVudGl0eUltcGwge1xuICAgICAgICByZXR1cm4gbmV3IFJlbW90ZUVudGl0eUltcGwodHJhbnNhY3Rpb24sIHRoaXMuZ2V0SUlEKCkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlbW90ZUVudGl0eUltcGwgZXh0ZW5kcyBSZW1vdGVUaGluZ0ltcGwgaW1wbGVtZW50cyBSZW1vdGVFbnRpdHkge1xuICAgIGNvbnN0cnVjdG9yKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiwgaWlkOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIodHJhbnNhY3Rpb24sIGlpZCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzUmVtb3RlKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbik6IFJlbW90ZUVudGl0eUltcGwge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRUeXBlKCk6IEVudGl0eVR5cGVJbXBsIHtcbiAgICAgICAgdGhyb3cgXCJOb3QgeWV0IGltcGxlbWVudGVkXCJcbiAgICB9XG59XG4iXX0=