/// <amd-module name="grakn-client/concept/Thing/Impl/ThingImpl" />
import { Thing, RemoteThing } from "../Thing";
import { Attribute } from "../Attribute";
import { Type } from "../../Type/Type";
import { QueryIterator } from "../../Concept";
import { AttributeType } from "../../Type/AttributeType";
import { RoleType } from "../../Type/RoleType";
import { ThingTypeImpl } from "../../Type/Impl/ThingTypeImpl";
import { Grakn } from "../../../Grakn";
import Transaction = Grakn.Transaction;
export declare abstract class ThingImpl implements Thing {
    private readonly _iid;
    protected constructor(iid: string);
    getIID(): string;
    isRemote(): boolean;
    toString(): string;
    abstract asRemote(transaction: Transaction): RemoteThing;
}
export declare abstract class RemoteThingImpl implements RemoteThing {
    private readonly _iid;
    private readonly _transaction;
    protected constructor(transaction: Transaction, iid: string);
    getType(): ThingTypeImpl;
    isInferred(): boolean;
    abstract asRemote(transaction: Transaction): RemoteThing;
    delete(): void;
    getIID(): string;
    isDeleted(): boolean;
    isRemote(): boolean;
    getHas(onlyKey: boolean): QueryIterator;
    getHas(attributeType: Type): QueryIterator;
    getHas(attributeType: Type): QueryIterator;
    getHas(attributeType: Type): QueryIterator;
    getHas(attributeType: Type): QueryIterator;
    getHas(attributeType: Type): QueryIterator;
    getHas(attributeTypes: AttributeType[]): QueryIterator;
    getPlays(): QueryIterator;
    getRelations(roleTypes: RoleType[]): QueryIterator;
    setHas(attribute: Attribute<AttributeType.ValueClass>): void;
    unsetHas(attribute: Attribute<AttributeType.ValueClass>): void;
    protected get transaction(): Transaction;
    toString(): string;
}
