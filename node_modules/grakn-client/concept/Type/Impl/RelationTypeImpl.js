/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/Type/Impl/RelationTypeImpl", ["require", "exports", "grakn-client/concept/Type/Impl/ThingTypeImpl"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteRelationTypeImpl = exports.RelationTypeImpl = void 0;
    const ThingTypeImpl_1 = require("grakn-client/concept/Type/Impl/ThingTypeImpl");
    class RelationTypeImpl extends ThingTypeImpl_1.ThingTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        static of(typeProto) {
            return new RelationTypeImpl(typeProto.getLabel(), typeProto.getRoot());
        }
        asRemote(transaction) {
            return new RemoteRelationTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.RelationTypeImpl = RelationTypeImpl;
    class RemoteRelationTypeImpl extends ThingTypeImpl_1.RemoteThingTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        getInstances() {
            throw "Not yet implemented";
        }
        asRemote(transaction) {
            return new RemoteRelationTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
        getSupertype() {
            throw "Not yet implemented";
        }
        getSupertypes() {
            throw "Not yet implemented";
        }
        getSubtypes() {
            throw "Not yet implemented";
        }
        setSupertype(superRelationType) {
            throw "Not yet implemented";
        }
        create() {
            throw "As yet unimplemented";
        }
        getRelates(roleLabel) {
            throw "Not yet implemented";
        }
        setRelates(roleLabel, overriddenLabel) {
            throw "Not yet implemented";
        }
        unsetRelates(roleLabel) {
            throw "Not yet implemented";
        }
    }
    exports.RemoteRelationTypeImpl = RemoteRelationTypeImpl;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVsYXRpb25UeXBlSW1wbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2NvbmNlcHQvVHlwZS9JbXBsL1JlbGF0aW9uVHlwZUltcGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHOzs7Ozs7Ozs7Ozs7O0lBRUgsZ0ZBQXFFO0lBU3JFLE1BQWEsZ0JBQWlCLFNBQVEsNkJBQWE7UUFDL0MsWUFBc0IsS0FBYSxFQUFFLE1BQWU7WUFDaEQsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6QixDQUFDO1FBRUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFvQjtZQUMxQixPQUFPLElBQUksZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLENBQUM7UUFFRCxRQUFRLENBQUMsV0FBd0I7WUFDN0IsT0FBTyxJQUFJLHNCQUFzQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7UUFDbEYsQ0FBQztLQUNKO0lBWkQsNENBWUM7SUFFRCxNQUFhLHNCQUF1QixTQUFRLG1DQUFtQjtRQUMzRCxZQUFZLFdBQXdCLEVBQUUsS0FBYSxFQUFFLE1BQWU7WUFDaEUsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUVELFlBQVk7WUFDUixNQUFNLHFCQUFxQixDQUFDO1FBQ2hDLENBQUM7UUFFRCxRQUFRLENBQUMsV0FBd0I7WUFDN0IsT0FBTyxJQUFJLHNCQUFzQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7UUFDbEYsQ0FBQztRQUVELFlBQVk7WUFDUixNQUFNLHFCQUFxQixDQUFDO1FBQ2hDLENBQUM7UUFFRCxhQUFhO1lBQ1QsTUFBTSxxQkFBcUIsQ0FBQztRQUNoQyxDQUFDO1FBRUQsV0FBVztZQUNQLE1BQU0scUJBQXFCLENBQUM7UUFDaEMsQ0FBQztRQUVELFlBQVksQ0FBQyxpQkFBK0I7WUFDeEMsTUFBTSxxQkFBcUIsQ0FBQztRQUNoQyxDQUFDO1FBRUQsTUFBTTtZQUNGLE1BQU0sc0JBQXNCLENBQUE7UUFDaEMsQ0FBQztRQUlELFVBQVUsQ0FBQyxTQUFrQjtZQUN6QixNQUFNLHFCQUFxQixDQUFDO1FBQ2hDLENBQUM7UUFJRCxVQUFVLENBQUMsU0FBaUIsRUFBRSxlQUF3QjtZQUNsRCxNQUFNLHFCQUFxQixDQUFDO1FBQ2hDLENBQUM7UUFFRCxZQUFZLENBQUMsU0FBaUI7WUFDMUIsTUFBTSxxQkFBcUIsQ0FBQztRQUNoQyxDQUFDO0tBQ0o7SUFoREQsd0RBZ0RDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFRoaW5nVHlwZUltcGwsIFJlbW90ZVRoaW5nVHlwZUltcGwgfSBmcm9tIFwiLi9UaGluZ1R5cGVJbXBsXCI7XG5pbXBvcnQgeyBSZWxhdGlvbiB9IGZyb20gXCIuLi8uLi9UaGluZy9SZWxhdGlvblwiO1xuaW1wb3J0IHsgUmVsYXRpb25UeXBlLCBSZW1vdGVSZWxhdGlvblR5cGUgfSBmcm9tIFwiLi4vUmVsYXRpb25UeXBlXCI7XG5pbXBvcnQgeyBSb2xlVHlwZSB9IGZyb20gXCIuLi9Sb2xlVHlwZVwiO1xuaW1wb3J0IHsgR3Jha24gfSBmcm9tIFwiLi4vLi4vLi4vR3Jha25cIjtcbmltcG9ydCBUcmFuc2FjdGlvbiA9IEdyYWtuLlRyYW5zYWN0aW9uO1xuaW1wb3J0IHsgVHlwZSBhcyBUeXBlUHJvdG8gfSBmcm9tIFwiZ3Jha25sYWJzLWdycGMtcHJvdG9jb2wvcHJvdG9idWYvY29uY2VwdF9wYlwiO1xuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSBcIi4uLy4uLy4uL3JwYy9TdHJlYW1cIjtcblxuZXhwb3J0IGNsYXNzIFJlbGF0aW9uVHlwZUltcGwgZXh0ZW5kcyBUaGluZ1R5cGVJbXBsIGltcGxlbWVudHMgUmVsYXRpb25UeXBlIHtcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IobGFiZWw6IHN0cmluZywgaXNSb290OiBib29sZWFuKSB7XG4gICAgICAgIHN1cGVyKGxhYmVsLCBpc1Jvb3QpO1xuICAgIH1cblxuICAgIHN0YXRpYyBvZih0eXBlUHJvdG86IFR5cGVQcm90byk6IFJlbGF0aW9uVHlwZUltcGwge1xuICAgICAgICByZXR1cm4gbmV3IFJlbGF0aW9uVHlwZUltcGwodHlwZVByb3RvLmdldExhYmVsKCksIHR5cGVQcm90by5nZXRSb290KCkpO1xuICAgIH1cblxuICAgIGFzUmVtb3RlKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbik6IFJlbW90ZVJlbGF0aW9uVHlwZUltcGwge1xuICAgICAgICByZXR1cm4gbmV3IFJlbW90ZVJlbGF0aW9uVHlwZUltcGwodHJhbnNhY3Rpb24sIHRoaXMuZ2V0TGFiZWwoKSwgdGhpcy5pc1Jvb3QoKSlcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZW1vdGVSZWxhdGlvblR5cGVJbXBsIGV4dGVuZHMgUmVtb3RlVGhpbmdUeXBlSW1wbCBpbXBsZW1lbnRzIFJlbW90ZVJlbGF0aW9uVHlwZSB7XG4gICAgY29uc3RydWN0b3IodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uLCBsYWJlbDogc3RyaW5nLCBpc1Jvb3Q6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIodHJhbnNhY3Rpb24sIGxhYmVsLCBpc1Jvb3QpO1xuICAgIH1cblxuICAgIGdldEluc3RhbmNlcygpOiBTdHJlYW08YW55PiB7XG4gICAgICAgIHRocm93IFwiTm90IHlldCBpbXBsZW1lbnRlZFwiO1xuICAgIH1cblxuICAgIGFzUmVtb3RlKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbik6IFJlbW90ZVJlbGF0aW9uVHlwZUltcGwge1xuICAgICAgICByZXR1cm4gbmV3IFJlbW90ZVJlbGF0aW9uVHlwZUltcGwodHJhbnNhY3Rpb24sIHRoaXMuZ2V0TGFiZWwoKSwgdGhpcy5pc1Jvb3QoKSlcbiAgICB9XG5cbiAgICBnZXRTdXBlcnR5cGUoKTogUmVsYXRpb25UeXBlSW1wbCB7XG4gICAgICAgIHRocm93IFwiTm90IHlldCBpbXBsZW1lbnRlZFwiO1xuICAgIH1cblxuICAgIGdldFN1cGVydHlwZXMoKTogU3RyZWFtPGFueT4ge1xuICAgICAgICB0aHJvdyBcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIjtcbiAgICB9XG5cbiAgICBnZXRTdWJ0eXBlcygpOiBTdHJlYW08YW55PiB7XG4gICAgICAgIHRocm93IFwiTm90IHlldCBpbXBsZW1lbnRlZFwiO1xuICAgIH1cblxuICAgIHNldFN1cGVydHlwZShzdXBlclJlbGF0aW9uVHlwZTogUmVsYXRpb25UeXBlKTogdm9pZCB7XG4gICAgICAgIHRocm93IFwiTm90IHlldCBpbXBsZW1lbnRlZFwiO1xuICAgIH1cblxuICAgIGNyZWF0ZSgpOiBSZWxhdGlvbiB7XG4gICAgICAgIHRocm93IFwiQXMgeWV0IHVuaW1wbGVtZW50ZWRcIlxuICAgIH1cblxuICAgIGdldFJlbGF0ZXMocm9sZUxhYmVsOiBzdHJpbmcpOiBSb2xlVHlwZTtcbiAgICBnZXRSZWxhdGVzKCk6IFN0cmVhbTxhbnk+O1xuICAgIGdldFJlbGF0ZXMocm9sZUxhYmVsPzogc3RyaW5nKTogUm9sZVR5cGUgfCBTdHJlYW08YW55PiB7XG4gICAgICAgIHRocm93IFwiTm90IHlldCBpbXBsZW1lbnRlZFwiO1xuICAgIH1cblxuICAgIHNldFJlbGF0ZXMocm9sZUxhYmVsOiBzdHJpbmcpOiB2b2lkO1xuICAgIHNldFJlbGF0ZXMocm9sZUxhYmVsOiBzdHJpbmcsIG92ZXJyaWRkZW5MYWJlbDogc3RyaW5nKTogdm9pZDtcbiAgICBzZXRSZWxhdGVzKHJvbGVMYWJlbDogc3RyaW5nLCBvdmVycmlkZGVuTGFiZWw/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhyb3cgXCJOb3QgeWV0IGltcGxlbWVudGVkXCI7XG4gICAgfVxuXG4gICAgdW5zZXRSZWxhdGVzKHJvbGVMYWJlbDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRocm93IFwiTm90IHlldCBpbXBsZW1lbnRlZFwiO1xuICAgIH1cbn1cbiJdfQ==