/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/type/impl/RelationTypeImpl", ["require", "exports", "grakn-client/dependencies_internal", "graknlabs-protocol/protobuf/concept_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteRelationTypeImpl = exports.RelationTypeImpl = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    const concept_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/concept_pb"));
    class RelationTypeImpl extends dependencies_internal_1.ThingTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        static of(typeProto) {
            return new RelationTypeImpl(typeProto.getLabel(), typeProto.getRoot());
        }
        asRemote(transaction) {
            return new RemoteRelationTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.RelationTypeImpl = RelationTypeImpl;
    class RemoteRelationTypeImpl extends dependencies_internal_1.RemoteThingTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        asRemote(transaction) {
            return new RemoteRelationTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
        create() {
            const method = new concept_pb_1.default.Type.Req().setRelationTypeCreateReq(new concept_pb_1.default.RelationType.Create.Req());
            return this.execute(method).then(res => dependencies_internal_1.RelationImpl.of(res.getRelationTypeCreateRes().getRelation()));
        }
        getRelates(roleLabel) {
            if (roleLabel != null) {
                const method = new concept_pb_1.default.Type.Req().setRelationTypeGetRelatesForRoleLabelReq(new concept_pb_1.default.RelationType.GetRelatesForRoleLabel.Req().setLabel(roleLabel));
                return this.execute(method).then(res => {
                    const getRelatesRes = res.getRelationTypeGetRelatesForRoleLabelRes();
                    if (getRelatesRes.hasRoleType())
                        return dependencies_internal_1.ConceptProtoReader.type(getRelatesRes.getRoleType());
                    else
                        return null;
                });
            }
            return this.typeStream(new concept_pb_1.default.Type.Req().setRelationTypeGetRelatesReq(new concept_pb_1.default.RelationType.GetRelates.Req()), res => res.getRelationTypeGetRelatesRes().getRoleList());
        }
        setRelates(roleLabel, overriddenLabel) {
            return __awaiter(this, void 0, void 0, function* () {
                const setRelatesReq = new concept_pb_1.default.RelationType.SetRelates.Req().setLabel(roleLabel);
                if (overriddenLabel != null)
                    setRelatesReq.setOverriddenLabel(overriddenLabel);
                yield this.execute(new concept_pb_1.default.Type.Req().setRelationTypeSetRelatesReq(setRelatesReq));
            });
        }
        unsetRelates(roleLabel) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Type.Req()
                    .setRelationTypeUnsetRelatesReq(new concept_pb_1.default.RelationType.UnsetRelates.Req().setLabel(roleLabel)));
            });
        }
        setSupertype(relationType) {
            return super.setSupertype(relationType);
        }
        getSupertype() {
            return super.getSupertype();
        }
        getSupertypes() {
            return super.getSupertypes();
        }
        getSubtypes() {
            return super.getSubtypes();
        }
        getInstances() {
            return super.getInstances();
        }
    }
    exports.RemoteRelationTypeImpl = RemoteRelationTypeImpl;
});
//# sourceMappingURL=data:application/json;base64,