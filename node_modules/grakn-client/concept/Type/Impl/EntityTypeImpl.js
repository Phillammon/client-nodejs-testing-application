/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/Type/Impl/EntityTypeImpl", ["require", "exports", "grakn-client/concept/Type/Impl/ThingTypeImpl", "graknlabs-grpc-protocol/protobuf/concept_pb", "grakn-client/concept/Thing/Impl/EntityImpl"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteEntityTypeImpl = exports.EntityTypeImpl = void 0;
    const ThingTypeImpl_1 = require("grakn-client/concept/Type/Impl/ThingTypeImpl");
    const concept_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/concept_pb"));
    const EntityImpl_1 = require("grakn-client/concept/Thing/Impl/EntityImpl");
    class EntityTypeImpl extends ThingTypeImpl_1.ThingTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        static of(typeProto) {
            return new EntityTypeImpl(typeProto.getLabel(), typeProto.getRoot());
        }
        asRemote(transaction) {
            return new RemoteEntityTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.EntityTypeImpl = EntityTypeImpl;
    class RemoteEntityTypeImpl extends ThingTypeImpl_1.RemoteThingTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        setSupertype(superEntityType) {
            throw "Not yet Implemented";
        }
        getSupertype() {
            throw "Not yet implemented";
        }
        getInstances() {
            return super.getInstances();
        }
        asRemote(transaction) {
            return new RemoteEntityTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
        getSupertypes() {
            throw "Not yet implemented";
        }
        getSubtypes() {
            throw "Not yet implemented";
        }
        create() {
            const method = new concept_pb_1.default.Type.Req()
                .setEntityTypeCreateReq(new concept_pb_1.default.EntityType.Create.Req());
            return this.execute(method).then(res => EntityImpl_1.EntityImpl.of(res.getEntityTypeCreateRes().getEntity()));
        }
    }
    exports.RemoteEntityTypeImpl = RemoteEntityTypeImpl;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW50aXR5VHlwZUltcGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9jb25jZXB0L1R5cGUvSW1wbC9FbnRpdHlUeXBlSW1wbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFSCxnRkFBcUU7SUFLckUsNkZBQXVFO0lBQ3ZFLDJFQUF5RDtJQUd6RCxNQUFhLGNBQWUsU0FBUSw2QkFBYTtRQUM3QyxZQUFzQixLQUFhLEVBQUUsTUFBZTtZQUNoRCxLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pCLENBQUM7UUFFRCxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQTRCO1lBQ2xDLE9BQU8sSUFBSSxjQUFjLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3pFLENBQUM7UUFFRCxRQUFRLENBQUMsV0FBd0I7WUFDN0IsT0FBTyxJQUFJLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDakYsQ0FBQztLQUNKO0lBWkQsd0NBWUM7SUFFRCxNQUFhLG9CQUFxQixTQUFRLG1DQUFtQjtRQUN6RCxZQUFZLFdBQXdCLEVBQUUsS0FBYSxFQUFFLE1BQWU7WUFDaEUsS0FBSyxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUVELFlBQVksQ0FBQyxlQUEyQjtZQUNwQyxNQUFNLHFCQUFxQixDQUFBO1FBQy9CLENBQUM7UUFFRCxZQUFZO1lBQ1IsTUFBTSxxQkFBcUIsQ0FBQTtRQUMvQixDQUFDO1FBRUQsWUFBWTtZQUNSLE9BQU8sS0FBSyxDQUFDLFlBQVksRUFBd0IsQ0FBQztRQUN0RCxDQUFDO1FBRUQsUUFBUSxDQUFDLFdBQXdCO1lBQzdCLE9BQU8sSUFBSSxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ2pGLENBQUM7UUFFRCxhQUFhO1lBQ1QsTUFBTSxxQkFBcUIsQ0FBQztRQUNoQyxDQUFDO1FBRUQsV0FBVztZQUNQLE1BQU0scUJBQXFCLENBQUM7UUFDaEMsQ0FBQztRQUVELE1BQU07WUFDRixNQUFNLE1BQU0sR0FBRyxJQUFJLG9CQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtpQkFDckMsc0JBQXNCLENBQUMsSUFBSSxvQkFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN0RSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsdUJBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLHNCQUFzQixFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JHLENBQUM7S0FDSjtJQWxDRCxvREFrQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgVGhpbmdUeXBlSW1wbCwgUmVtb3RlVGhpbmdUeXBlSW1wbCB9IGZyb20gXCIuL1RoaW5nVHlwZUltcGxcIjtcbmltcG9ydCB7IFJlbW90ZUVudGl0eVR5cGUgfSBmcm9tIFwiLi4vRW50aXR5VHlwZVwiO1xuaW1wb3J0IHsgRW50aXR5VHlwZSB9IGZyb20gXCIuLi9FbnRpdHlUeXBlXCI7XG5pbXBvcnQgeyBHcmFrbiB9IGZyb20gXCIuLi8uLi8uLi9HcmFrblwiO1xuaW1wb3J0IFRyYW5zYWN0aW9uID0gR3Jha24uVHJhbnNhY3Rpb247XG5pbXBvcnQgQ29uY2VwdFByb3RvIGZyb20gXCJncmFrbmxhYnMtZ3JwYy1wcm90b2NvbC9wcm90b2J1Zi9jb25jZXB0X3BiXCI7XG5pbXBvcnQgeyBFbnRpdHlJbXBsIH0gZnJvbSBcIi4uLy4uL1RoaW5nL0ltcGwvRW50aXR5SW1wbFwiO1xuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSBcIi4uLy4uLy4uL3JwYy9TdHJlYW1cIjtcblxuZXhwb3J0IGNsYXNzIEVudGl0eVR5cGVJbXBsIGV4dGVuZHMgVGhpbmdUeXBlSW1wbCBpbXBsZW1lbnRzIEVudGl0eVR5cGUge1xuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihsYWJlbDogc3RyaW5nLCBpc1Jvb3Q6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIobGFiZWwsIGlzUm9vdCk7XG4gICAgfVxuXG4gICAgc3RhdGljIG9mKHR5cGVQcm90bzogQ29uY2VwdFByb3RvLlR5cGUpOiBFbnRpdHlUeXBlSW1wbCB7XG4gICAgICAgIHJldHVybiBuZXcgRW50aXR5VHlwZUltcGwodHlwZVByb3RvLmdldExhYmVsKCksIHR5cGVQcm90by5nZXRSb290KCkpO1xuICAgIH1cblxuICAgIGFzUmVtb3RlKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbik6IFJlbW90ZUVudGl0eVR5cGUge1xuICAgICAgICByZXR1cm4gbmV3IFJlbW90ZUVudGl0eVR5cGVJbXBsKHRyYW5zYWN0aW9uLCB0aGlzLmdldExhYmVsKCksIHRoaXMuaXNSb290KCkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlbW90ZUVudGl0eVR5cGVJbXBsIGV4dGVuZHMgUmVtb3RlVGhpbmdUeXBlSW1wbCBpbXBsZW1lbnRzIFJlbW90ZUVudGl0eVR5cGUge1xuICAgIGNvbnN0cnVjdG9yKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiwgbGFiZWw6IHN0cmluZywgaXNSb290OiBib29sZWFuKSB7XG4gICAgICAgIHN1cGVyKHRyYW5zYWN0aW9uLCBsYWJlbCwgaXNSb290KTtcbiAgICB9XG5cbiAgICBzZXRTdXBlcnR5cGUoc3VwZXJFbnRpdHlUeXBlOiBFbnRpdHlUeXBlKTogdm9pZCB7XG4gICAgICAgIHRocm93IFwiTm90IHlldCBJbXBsZW1lbnRlZFwiXG4gICAgfVxuXG4gICAgZ2V0U3VwZXJ0eXBlKCk6IEVudGl0eVR5cGVJbXBsIHtcbiAgICAgICAgdGhyb3cgXCJOb3QgeWV0IGltcGxlbWVudGVkXCJcbiAgICB9XG5cbiAgICBnZXRJbnN0YW5jZXMoKTogU3RyZWFtPEVudGl0eUltcGw+IHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldEluc3RhbmNlcygpIGFzIFN0cmVhbTxFbnRpdHlJbXBsPjtcbiAgICB9XG5cbiAgICBhc1JlbW90ZSh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24pOiBSZW1vdGVFbnRpdHlUeXBlSW1wbCB7XG4gICAgICAgIHJldHVybiBuZXcgUmVtb3RlRW50aXR5VHlwZUltcGwodHJhbnNhY3Rpb24sIHRoaXMuZ2V0TGFiZWwoKSwgdGhpcy5pc1Jvb3QoKSk7XG4gICAgfVxuXG4gICAgZ2V0U3VwZXJ0eXBlcygpOiBTdHJlYW08YW55PiB7XG4gICAgICAgIHRocm93IFwiTm90IHlldCBpbXBsZW1lbnRlZFwiO1xuICAgIH1cblxuICAgIGdldFN1YnR5cGVzKCk6IFN0cmVhbTxhbnk+IHtcbiAgICAgICAgdGhyb3cgXCJOb3QgeWV0IGltcGxlbWVudGVkXCI7XG4gICAgfVxuXG4gICAgY3JlYXRlKCk6IFByb21pc2U8RW50aXR5SW1wbD4ge1xuICAgICAgICBjb25zdCBtZXRob2QgPSBuZXcgQ29uY2VwdFByb3RvLlR5cGUuUmVxKClcbiAgICAgICAgICAgIC5zZXRFbnRpdHlUeXBlQ3JlYXRlUmVxKG5ldyBDb25jZXB0UHJvdG8uRW50aXR5VHlwZS5DcmVhdGUuUmVxKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5leGVjdXRlKG1ldGhvZCkudGhlbihyZXMgPT4gRW50aXR5SW1wbC5vZihyZXMuZ2V0RW50aXR5VHlwZUNyZWF0ZVJlcygpLmdldEVudGl0eSgpKSk7XG4gICAgfVxufVxuIl19