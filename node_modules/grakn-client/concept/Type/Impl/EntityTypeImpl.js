/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/type/impl/EntityTypeImpl", ["require", "exports", "grakn-client/dependencies_internal", "graknlabs-grpc-protocol/protobuf/concept_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteEntityTypeImpl = exports.EntityTypeImpl = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    const concept_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/concept_pb"));
    class EntityTypeImpl extends dependencies_internal_1.ThingTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        static of(typeProto) {
            return new EntityTypeImpl(typeProto.getLabel(), typeProto.getRoot());
        }
        asRemote(transaction) {
            return new RemoteEntityTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.EntityTypeImpl = EntityTypeImpl;
    class RemoteEntityTypeImpl extends dependencies_internal_1.RemoteThingTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        create() {
            const method = new concept_pb_1.default.Type.Req().setEntityTypeCreateReq(new concept_pb_1.default.EntityType.Create.Req());
            return this.execute(method).then(res => dependencies_internal_1.EntityImpl.of(res.getEntityTypeCreateRes().getEntity()));
        }
        getSupertype() {
            return super.getSupertype();
        }
        getSupertypes() {
            return super.getSupertypes();
        }
        getSubtypes() {
            return super.getSubtypes();
        }
        getInstances() {
            return super.getInstances();
        }
        setSupertype(type) {
            return super.setSupertype(type);
        }
        asRemote(transaction) {
            return new RemoteEntityTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.RemoteEntityTypeImpl = RemoteEntityTypeImpl;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW50aXR5VHlwZUltcGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9jb25jZXB0L3R5cGUvaW1wbC9FbnRpdHlUeXBlSW1wbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFSCw4RUFRd0M7SUFFeEMsNkZBQXVFO0lBRXZFLE1BQWEsY0FBZSxTQUFRLHFDQUFhO1FBQzdDLFlBQXNCLEtBQWEsRUFBRSxNQUFlO1lBQ2hELEtBQUssQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDekIsQ0FBQztRQUVELE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBNEI7WUFDbEMsT0FBTyxJQUFJLGNBQWMsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDekUsQ0FBQztRQUVELFFBQVEsQ0FBQyxXQUF3QjtZQUM3QixPQUFPLElBQUksb0JBQW9CLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNqRixDQUFDO0tBQ0o7SUFaRCx3Q0FZQztJQUVELE1BQWEsb0JBQXFCLFNBQVEsMkNBQW1CO1FBQ3pELFlBQVksV0FBd0IsRUFBRSxLQUFhLEVBQUUsTUFBZTtZQUNoRSxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QyxDQUFDO1FBRUQsTUFBTTtZQUNGLE1BQU0sTUFBTSxHQUFHLElBQUksb0JBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsSUFBSSxvQkFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUM1RyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsa0NBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLHNCQUFzQixFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JHLENBQUM7UUFFRCxZQUFZO1lBQ1IsT0FBTyxLQUFLLENBQUMsWUFBWSxFQUE2QixDQUFDO1FBQzNELENBQUM7UUFFRCxhQUFhO1lBQ1QsT0FBTyxLQUFLLENBQUMsYUFBYSxFQUE0QixDQUFDO1FBQzNELENBQUM7UUFFRCxXQUFXO1lBQ1AsT0FBTyxLQUFLLENBQUMsV0FBVyxFQUE0QixDQUFDO1FBQ3pELENBQUM7UUFFRCxZQUFZO1lBQ1IsT0FBTyxLQUFLLENBQUMsWUFBWSxFQUF3QixDQUFDO1FBQ3RELENBQUM7UUFFRCxZQUFZLENBQUMsSUFBZ0I7WUFDekIsT0FBTyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLENBQUM7UUFFRCxRQUFRLENBQUMsV0FBd0I7WUFDN0IsT0FBTyxJQUFJLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDakYsQ0FBQztLQUNKO0lBakNELG9EQWlDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIFRoaW5nVHlwZUltcGwsXG4gICAgUmVtb3RlVGhpbmdUeXBlSW1wbCxcbiAgICBSZW1vdGVFbnRpdHlUeXBlLFxuICAgIEdyYWtuLFxuICAgIEVudGl0eVR5cGUsXG4gICAgRW50aXR5SW1wbCxcbiAgICBTdHJlYW0sXG59IGZyb20gXCIuLi8uLi8uLi9kZXBlbmRlbmNpZXNfaW50ZXJuYWxcIjtcbmltcG9ydCBUcmFuc2FjdGlvbiA9IEdyYWtuLlRyYW5zYWN0aW9uO1xuaW1wb3J0IENvbmNlcHRQcm90byBmcm9tIFwiZ3Jha25sYWJzLWdycGMtcHJvdG9jb2wvcHJvdG9idWYvY29uY2VwdF9wYlwiO1xuXG5leHBvcnQgY2xhc3MgRW50aXR5VHlwZUltcGwgZXh0ZW5kcyBUaGluZ1R5cGVJbXBsIGltcGxlbWVudHMgRW50aXR5VHlwZSB7XG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGxhYmVsOiBzdHJpbmcsIGlzUm9vdDogYm9vbGVhbikge1xuICAgICAgICBzdXBlcihsYWJlbCwgaXNSb290KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgb2YodHlwZVByb3RvOiBDb25jZXB0UHJvdG8uVHlwZSk6IEVudGl0eVR5cGVJbXBsIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbnRpdHlUeXBlSW1wbCh0eXBlUHJvdG8uZ2V0TGFiZWwoKSwgdHlwZVByb3RvLmdldFJvb3QoKSk7XG4gICAgfVxuXG4gICAgYXNSZW1vdGUodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogUmVtb3RlRW50aXR5VHlwZSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVtb3RlRW50aXR5VHlwZUltcGwodHJhbnNhY3Rpb24sIHRoaXMuZ2V0TGFiZWwoKSwgdGhpcy5pc1Jvb3QoKSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVtb3RlRW50aXR5VHlwZUltcGwgZXh0ZW5kcyBSZW1vdGVUaGluZ1R5cGVJbXBsIGltcGxlbWVudHMgUmVtb3RlRW50aXR5VHlwZSB7XG4gICAgY29uc3RydWN0b3IodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uLCBsYWJlbDogc3RyaW5nLCBpc1Jvb3Q6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIodHJhbnNhY3Rpb24sIGxhYmVsLCBpc1Jvb3QpO1xuICAgIH1cblxuICAgIGNyZWF0ZSgpOiBQcm9taXNlPEVudGl0eUltcGw+IHtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gbmV3IENvbmNlcHRQcm90by5UeXBlLlJlcSgpLnNldEVudGl0eVR5cGVDcmVhdGVSZXEobmV3IENvbmNlcHRQcm90by5FbnRpdHlUeXBlLkNyZWF0ZS5SZXEoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGUobWV0aG9kKS50aGVuKHJlcyA9PiBFbnRpdHlJbXBsLm9mKHJlcy5nZXRFbnRpdHlUeXBlQ3JlYXRlUmVzKCkuZ2V0RW50aXR5KCkpKTtcbiAgICB9XG5cbiAgICBnZXRTdXBlcnR5cGUoKTogUHJvbWlzZTxFbnRpdHlUeXBlSW1wbD4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0U3VwZXJ0eXBlKCkgYXMgUHJvbWlzZTxFbnRpdHlUeXBlSW1wbD47XG4gICAgfVxuXG4gICAgZ2V0U3VwZXJ0eXBlcygpOiBTdHJlYW08RW50aXR5VHlwZUltcGw+IHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldFN1cGVydHlwZXMoKSBhcyBTdHJlYW08RW50aXR5VHlwZUltcGw+O1xuICAgIH1cblxuICAgIGdldFN1YnR5cGVzKCk6IFN0cmVhbTxFbnRpdHlUeXBlSW1wbD4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0U3VidHlwZXMoKSBhcyBTdHJlYW08RW50aXR5VHlwZUltcGw+O1xuICAgIH1cblxuICAgIGdldEluc3RhbmNlcygpOiBTdHJlYW08RW50aXR5SW1wbD4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0SW5zdGFuY2VzKCkgYXMgU3RyZWFtPEVudGl0eUltcGw+O1xuICAgIH1cblxuICAgIHNldFN1cGVydHlwZSh0eXBlOiBFbnRpdHlUeXBlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBzdXBlci5zZXRTdXBlcnR5cGUodHlwZSk7XG4gICAgfVxuXG4gICAgYXNSZW1vdGUodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogUmVtb3RlRW50aXR5VHlwZUltcGwge1xuICAgICAgICByZXR1cm4gbmV3IFJlbW90ZUVudGl0eVR5cGVJbXBsKHRyYW5zYWN0aW9uLCB0aGlzLmdldExhYmVsKCksIHRoaXMuaXNSb290KCkpO1xuICAgIH1cbn1cbiJdfQ==