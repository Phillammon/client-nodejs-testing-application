/// <amd-module name="grakn-client/concept/Type/Impl/TypeImpl" />
import { Type, RemoteType } from "../Type";
import { QueryIterator } from "../../Concept";
import ConceptProto from "graknlabs-grpc-protocol/protobuf/concept_pb";
import { Grakn } from "../../../Grakn";
import Transaction = Grakn.Transaction;
import { Stream } from "../../../rpc/Stream";
import { ThingImpl } from "../../Thing/Impl/ThingImpl";
export declare abstract class TypeImpl implements Type {
    private readonly _label;
    private readonly _root;
    protected constructor(label: string, root: boolean);
    static of(typeProto: ConceptProto.Type): TypeImpl;
    getLabel(): string;
    isRoot(): boolean;
    isRemote(): boolean;
    toString(): string;
    abstract asRemote(transaction: Transaction): RemoteType;
}
export declare abstract class RemoteTypeImpl implements RemoteType {
    private readonly _rpcTransaction;
    private _label;
    private readonly _isRoot;
    protected constructor(transaction: Transaction, label: string, isRoot: boolean);
    getLabel(): string;
    isRoot(): boolean;
    isRemote(): boolean;
    setLabel(label: string): void;
    isAbstract(): boolean;
    delete(): void;
    isDeleted(): boolean;
    protected get transaction(): Transaction;
    toString(): string;
    protected thingStream(method: ConceptProto.Type.Req, thingGetter: (res: ConceptProto.Type.Res) => ConceptProto.Thing[]): Stream<ThingImpl>;
    protected execute(method: ConceptProto.Type.Req): Promise<ConceptProto.Type.Res>;
    abstract asRemote(transaction: Transaction): RemoteTypeImpl;
    abstract getSupertype(): TypeImpl;
    abstract getSubtypes(): QueryIterator;
    abstract getSupertypes(): QueryIterator;
}
