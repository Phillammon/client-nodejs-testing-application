/// <amd-module name="grakn-client/concept/Type/Impl/AttributeTypeImpl" />
import { RemoteThingTypeImpl, ThingTypeImpl } from "./ThingTypeImpl";
import { AttributeType, BooleanAttributeType, DateTimeAttributeType, DoubleAttributeType, LongAttributeType, RemoteAttributeType, RemoteBooleanAttributeType, RemoteDateTimeAttributeType, RemoteDoubleAttributeType, RemoteLongAttributeType, RemoteStringAttributeType, StringAttributeType } from "../AttributeType";
import { Grakn } from "../../../Grakn";
import ConceptProto from "graknlabs-grpc-protocol/protobuf/concept_pb";
import Transaction = Grakn.Transaction;
import ValueType = AttributeType.ValueType;
import { AttributeImpl, BooleanAttributeImpl, DateTimeAttributeImpl, DoubleAttributeImpl, LongAttributeImpl, StringAttributeImpl } from "../../Thing/Impl/AttributeImpl";
import ValueClass = AttributeType.ValueClass;
import { Stream } from "../../../rpc/Stream";
export declare class AttributeTypeImpl extends ThingTypeImpl implements AttributeType {
    private static ROOT_LABEL;
    protected constructor(label: string, isRoot: boolean);
    static of(type: ConceptProto.Type): AttributeTypeImpl;
    getValueType(): ValueType;
    isKeyable(): boolean;
    asRemote(transaction: Transaction): RemoteAttributeTypeImpl;
}
export declare class RemoteAttributeTypeImpl extends RemoteThingTypeImpl implements RemoteAttributeType {
    constructor(transaction: Transaction, label: string, isRoot: boolean);
    getValueType(): ValueType;
    isKeyable(): boolean;
    asRemote(transaction: Transaction): RemoteAttributeTypeImpl;
    setSupertype(type: AttributeType): void;
    getSupertype(): AttributeTypeImpl;
    getSupertypes(): Stream<any>;
    getSubtypes(): Stream<any>;
    getInstances(): Stream<any>;
    getOwners(onlyKey?: boolean): Stream<any>;
    protected putInternal<T extends ValueClass>(value: T): AttributeImpl<T>;
    protected getInternal<T extends ValueClass>(value: T): AttributeImpl<T>;
}
export declare class BooleanAttributeTypeImpl extends AttributeTypeImpl implements BooleanAttributeType {
    constructor(label: string, isRoot: boolean);
    getValueType(): ValueType;
    asRemote(transaction: Transaction): RemoteBooleanAttributeTypeImpl;
}
export declare class RemoteBooleanAttributeTypeImpl extends RemoteAttributeTypeImpl implements RemoteBooleanAttributeType {
    constructor(transaction: Transaction, label: string, isRoot: boolean);
    getValueType(): ValueType;
    asRemote(transaction: Transaction): RemoteBooleanAttributeTypeImpl;
    getSupertype(): BooleanAttributeTypeImpl;
    getSupertypes(): Stream<any>;
    getSubtypes(): Stream<any>;
    getInstances(): Stream<any>;
    setSupertype(type: BooleanAttributeType): void;
    put(value: boolean): BooleanAttributeImpl;
    get(value: boolean): BooleanAttributeImpl;
}
export declare class LongAttributeTypeImpl extends AttributeTypeImpl implements LongAttributeType {
    constructor(label: string, isRoot: boolean);
    getValueType(): ValueType;
    asRemote(transaction: Transaction): RemoteLongAttributeTypeImpl;
}
export declare class RemoteLongAttributeTypeImpl extends RemoteAttributeTypeImpl implements RemoteLongAttributeType {
    constructor(transaction: Transaction, label: string, isRoot: boolean);
    getValueType(): ValueType;
    asRemote(transaction: Transaction): RemoteLongAttributeTypeImpl;
    getSupertype(): LongAttributeTypeImpl;
    getSupertypes(): Stream<any>;
    getSubtypes(): Stream<any>;
    getInstances(): Stream<any>;
    setSupertype(type: LongAttributeType): void;
    put(value: number): LongAttributeImpl;
    get(value: number): LongAttributeImpl;
}
export declare class DoubleAttributeTypeImpl extends AttributeTypeImpl implements DoubleAttributeType {
    constructor(label: string, isRoot: boolean);
    getValueType(): ValueType;
    asRemote(transaction: Transaction): RemoteDoubleAttributeTypeImpl;
}
export declare class RemoteDoubleAttributeTypeImpl extends RemoteAttributeTypeImpl implements RemoteDoubleAttributeType {
    constructor(transaction: Transaction, label: string, isRoot: boolean);
    getValueType(): ValueType;
    asRemote(transaction: Transaction): RemoteDoubleAttributeTypeImpl;
    getSupertype(): DoubleAttributeTypeImpl;
    getSupertypes(): Stream<any>;
    getSubtypes(): Stream<any>;
    getInstances(): Stream<any>;
    setSupertype(type: DoubleAttributeType): void;
    put(value: number): DoubleAttributeImpl;
    get(value: number): DoubleAttributeImpl;
}
export declare class StringAttributeTypeImpl extends AttributeTypeImpl implements StringAttributeType {
    constructor(label: string, isRoot: boolean);
    getValueType(): ValueType;
    asRemote(transaction: Transaction): RemoteStringAttributeTypeImpl;
}
export declare class RemoteStringAttributeTypeImpl extends RemoteAttributeTypeImpl implements RemoteStringAttributeType {
    constructor(transaction: Transaction, label: string, isRoot: boolean);
    getValueType(): ValueType;
    asRemote(transaction: Transaction): RemoteStringAttributeTypeImpl;
    getSupertype(): StringAttributeTypeImpl;
    getSupertypes(): Stream<any>;
    getSubtypes(): Stream<any>;
    getInstances(): Stream<any>;
    setSupertype(type: StringAttributeType): void;
    put(value: string): StringAttributeImpl;
    get(value: string): StringAttributeImpl;
}
export declare class DateTimeAttributeTypeImpl extends AttributeTypeImpl implements DateTimeAttributeType {
    constructor(label: string, isRoot: boolean);
    getValueType(): ValueType;
    asRemote(transaction: Transaction): RemoteDateTimeAttributeTypeImpl;
}
export declare class RemoteDateTimeAttributeTypeImpl extends RemoteAttributeTypeImpl implements RemoteDateTimeAttributeType {
    constructor(transaction: Transaction, label: string, isRoot: boolean);
    getValueType(): ValueType;
    asRemote(transaction: Transaction): RemoteDateTimeAttributeTypeImpl;
    getSupertype(): DateTimeAttributeTypeImpl;
    getSupertypes(): Stream<any>;
    getSubtypes(): Stream<any>;
    getInstances(): Stream<any>;
    setSupertype(type: DateTimeAttributeType): void;
    put(value: Date): DateTimeAttributeImpl;
    get(value: Date): DateTimeAttributeImpl;
}
