/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/type/impl/ThingTypeImpl", ["require", "exports", "grakn-client/dependencies_internal", "graknlabs-grpc-protocol/protobuf/concept_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteThingTypeImpl = exports.ThingTypeImpl = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    const concept_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/concept_pb"));
    class ThingTypeImpl extends dependencies_internal_1.TypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        asRemote(transaction) {
            return new RemoteThingTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.ThingTypeImpl = ThingTypeImpl;
    class RemoteThingTypeImpl extends dependencies_internal_1.RemoteTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        setSupertype(thingType) {
            return super.setSupertype(thingType);
        }
        getSupertype() {
            return super.getSupertype();
        }
        getSupertypes() {
            return super.getSupertypes();
        }
        getSubtypes() {
            return super.getSubtypes();
        }
        getInstances() {
            const request = new concept_pb_1.default.Type.Req().setThingTypeGetInstancesReq(new concept_pb_1.default.ThingType.GetInstances.Req());
            return this.thingStream(request, res => res.getThingTypeGetInstancesRes().getThingList());
        }
        setAbstract() {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Type.Req().setThingTypeSetAbstractReq(new concept_pb_1.default.ThingType.SetAbstract.Req()));
            });
        }
        unsetAbstract() {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Type.Req().setThingTypeUnsetAbstractReq(new concept_pb_1.default.ThingType.UnsetAbstract.Req()));
            });
        }
        setPlays(role, overriddenType) {
            return __awaiter(this, void 0, void 0, function* () {
                const setPlaysReq = new concept_pb_1.default.ThingType.SetPlays.Req().setRole(dependencies_internal_1.ConceptProtoBuilder.type(role));
                if (overriddenType)
                    setPlaysReq.setOverriddenRole(dependencies_internal_1.ConceptProtoBuilder.type(overriddenType));
                yield this.execute(new concept_pb_1.default.Type.Req().setThingTypeSetPlaysReq(setPlaysReq));
            });
        }
        setOwns(attributeType, isKeyOrOverriddenType, overriddenType) {
            return __awaiter(this, void 0, void 0, function* () {
                const setOwnsReq = new concept_pb_1.default.ThingType.SetOwns.Req().setAttributeType(dependencies_internal_1.ConceptProtoBuilder.type(attributeType))
                    .setIsKey(typeof isKeyOrOverriddenType === "boolean" ? isKeyOrOverriddenType : false);
                let overriddenType1;
                if (isKeyOrOverriddenType instanceof dependencies_internal_1.AttributeTypeImpl)
                    overriddenType1 = isKeyOrOverriddenType;
                else if (overriddenType)
                    overriddenType1 = overriddenType;
                if (overriddenType1)
                    setOwnsReq.setOverriddenType(dependencies_internal_1.ConceptProtoBuilder.type(overriddenType1));
                yield this.execute(new concept_pb_1.default.Type.Req().setThingTypeSetOwnsReq(setOwnsReq));
            });
        }
        getPlays() {
            const request = new concept_pb_1.default.Type.Req().setThingTypeGetPlaysReq(new concept_pb_1.default.ThingType.GetPlays.Req());
            return this.typeStream(request, res => res.getThingTypeGetPlaysRes().getRoleList());
        }
        getOwns(valueTypeOrKeysOnly, keysOnly) {
            const getOwnsReq = new concept_pb_1.default.ThingType.GetOwns.Req()
                .setKeysOnly(typeof valueTypeOrKeysOnly === "boolean" ? valueTypeOrKeysOnly : typeof keysOnly === "boolean" ? keysOnly : false);
            // Here we take advantage of the fact that AttributeType.ValueType is a string enum
            if (typeof valueTypeOrKeysOnly === "string")
                getOwnsReq.setValueType(dependencies_internal_1.ConceptProtoBuilder.valueType(valueTypeOrKeysOnly));
            const request = new concept_pb_1.default.Type.Req().setThingTypeGetOwnsReq(getOwnsReq);
            return this.typeStream(request, res => res.getThingTypeGetOwnsRes().getAttributeTypeList());
        }
        unsetPlays(role) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Type.Req().setThingTypeUnsetPlaysReq(new concept_pb_1.default.ThingType.UnsetPlays.Req().setRole(dependencies_internal_1.ConceptProtoBuilder.type(role))));
            });
        }
        unsetOwns(attributeType) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Type.Req().setThingTypeUnsetOwnsReq(new concept_pb_1.default.ThingType.UnsetOwns.Req().setAttributetype(dependencies_internal_1.ConceptProtoBuilder.type(attributeType))));
            });
        }
        asRemote(transaction) {
            return new RemoteThingTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.RemoteThingTypeImpl = RemoteThingTypeImpl;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhpbmdUeXBlSW1wbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2NvbmNlcHQvdHlwZS9pbXBsL1RoaW5nVHlwZUltcGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBRUgsOEVBYXdDO0lBRXhDLDZGQUF1RTtJQUd2RSxNQUFhLGFBQWMsU0FBUSxnQ0FBUTtRQUN2QyxZQUFZLEtBQWEsRUFBRSxNQUFlO1lBQ3RDLEtBQUssQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDekIsQ0FBQztRQUVELFFBQVEsQ0FBQyxXQUF3QjtZQUM3QixPQUFPLElBQUksbUJBQW1CLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNoRixDQUFDO0tBQ0o7SUFSRCxzQ0FRQztJQUVELE1BQWEsbUJBQW9CLFNBQVEsc0NBQWM7UUFDbkQsWUFBWSxXQUF3QixFQUFFLEtBQWEsRUFBRSxNQUFlO1lBQ2hFLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RDLENBQUM7UUFFUyxZQUFZLENBQUMsU0FBb0I7WUFDdkMsT0FBTyxLQUFLLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pDLENBQUM7UUFFRCxZQUFZO1lBQ1IsT0FBTyxLQUFLLENBQUMsWUFBWSxFQUE0QixDQUFDO1FBQzFELENBQUM7UUFFRCxhQUFhO1lBQ1QsT0FBTyxLQUFLLENBQUMsYUFBYSxFQUEyQixDQUFDO1FBQzFELENBQUM7UUFFRCxXQUFXO1lBQ1AsT0FBTyxLQUFLLENBQUMsV0FBVyxFQUEyQixDQUFDO1FBQ3hELENBQUM7UUFFRCxZQUFZO1lBQ1IsTUFBTSxPQUFPLEdBQUcsSUFBSSxvQkFBWSxDQUFDLElBQUksQ0FBQyxH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QUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLDJDQUFtQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvRyxDQUFDO1NBQUE7UUFFRCxRQUFRLENBQUMsV0FBd0I7WUFDN0IsT0FBTyxJQUFJLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDaEYsQ0FBQztLQUNKO0lBdkZELGtEQXVGQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIFR5cGVJbXBsLFxuICAgIFJlbW90ZVR5cGVJbXBsLFxuICAgIFRoaW5nVHlwZSxcbiAgICBSZW1vdGVUaGluZ1R5cGUsXG4gICAgQXR0cmlidXRlVHlwZSxcbiAgICBSb2xlVHlwZSxcbiAgICBHcmFrbixcbiAgICBTdHJlYW0sXG4gICAgVGhpbmdJbXBsLFxuICAgIFJvbGVUeXBlSW1wbCxcbiAgICBBdHRyaWJ1dGVUeXBlSW1wbCxcbiAgICBDb25jZXB0UHJvdG9CdWlsZGVyLFxufSBmcm9tIFwiLi4vLi4vLi4vZGVwZW5kZW5jaWVzX2ludGVybmFsXCI7XG5pbXBvcnQgVHJhbnNhY3Rpb24gPSBHcmFrbi5UcmFuc2FjdGlvbjtcbmltcG9ydCBDb25jZXB0UHJvdG8gZnJvbSBcImdyYWtubGFicy1ncnBjLXByb3RvY29sL3Byb3RvYnVmL2NvbmNlcHRfcGJcIjtcblxuXG5leHBvcnQgY2xhc3MgVGhpbmdUeXBlSW1wbCBleHRlbmRzIFR5cGVJbXBsIGltcGxlbWVudHMgVGhpbmdUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihsYWJlbDogc3RyaW5nLCBpc1Jvb3Q6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIobGFiZWwsIGlzUm9vdCk7XG4gICAgfVxuXG4gICAgYXNSZW1vdGUodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogUmVtb3RlVGhpbmdUeXBlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZW1vdGVUaGluZ1R5cGVJbXBsKHRyYW5zYWN0aW9uLCB0aGlzLmdldExhYmVsKCksIHRoaXMuaXNSb290KCkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlbW90ZVRoaW5nVHlwZUltcGwgZXh0ZW5kcyBSZW1vdGVUeXBlSW1wbCBpbXBsZW1lbnRzIFJlbW90ZVRoaW5nVHlwZSB7XG4gICAgY29uc3RydWN0b3IodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uLCBsYWJlbDogc3RyaW5nLCBpc1Jvb3Q6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIodHJhbnNhY3Rpb24sIGxhYmVsLCBpc1Jvb3QpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRTdXBlcnR5cGUodGhpbmdUeXBlOiBUaGluZ1R5cGUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLnNldFN1cGVydHlwZSh0aGluZ1R5cGUpO1xuICAgIH1cblxuICAgIGdldFN1cGVydHlwZSgpOiBQcm9taXNlPFRoaW5nVHlwZUltcGw+IHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldFN1cGVydHlwZSgpIGFzIFByb21pc2U8VGhpbmdUeXBlSW1wbD47XG4gICAgfVxuXG4gICAgZ2V0U3VwZXJ0eXBlcygpOiBTdHJlYW08VGhpbmdUeXBlSW1wbD4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0U3VwZXJ0eXBlcygpIGFzIFN0cmVhbTxUaGluZ1R5cGVJbXBsPjtcbiAgICB9XG5cbiAgICBnZXRTdWJ0eXBlcygpOiBTdHJlYW08VGhpbmdUeXBlSW1wbD4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0U3VidHlwZXMoKSBhcyBTdHJlYW08VGhpbmdUeXBlSW1wbD47XG4gICAgfVxuXG4gICAgZ2V0SW5zdGFuY2VzKCk6IFN0cmVhbTxUaGluZ0ltcGw+IHtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBDb25jZXB0UHJvdG8uVHlwZS5SZXEoKS5zZXRUaGluZ1R5cGVHZXRJbnN0YW5jZXNSZXEobmV3IENvbmNlcHRQcm90by5UaGluZ1R5cGUuR2V0SW5zdGFuY2VzLlJlcSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhpbmdTdHJlYW0ocmVxdWVzdCwgcmVzID0+IHJlcy5nZXRUaGluZ1R5cGVHZXRJbnN0YW5jZXNSZXMoKS5nZXRUaGluZ0xpc3QoKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2V0QWJzdHJhY3QoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZXhlY3V0ZShuZXcgQ29uY2VwdFByb3RvLlR5cGUuUmVxKCkuc2V0VGhpbmdUeXBlU2V0QWJzdHJhY3RSZXEobmV3IENvbmNlcHRQcm90by5UaGluZ1R5cGUuU2V0QWJzdHJhY3QuUmVxKCkpKTtcbiAgICB9XG5cbiAgICBhc3luYyB1bnNldEFic3RyYWN0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmV4ZWN1dGUobmV3IENvbmNlcHRQcm90by5UeXBlLlJlcSgpLnNldFRoaW5nVHlwZVVuc2V0QWJzdHJhY3RSZXEobmV3IENvbmNlcHRQcm90by5UaGluZ1R5cGUuVW5zZXRBYnN0cmFjdC5SZXEoKSkpO1xuICAgIH1cblxuICAgIGFzeW5jIHNldFBsYXlzKHJvbGU6IFJvbGVUeXBlKTogUHJvbWlzZTx2b2lkPjtcbiAgICBhc3luYyBzZXRQbGF5cyhyb2xlOiBSb2xlVHlwZSwgb3ZlcnJpZGRlblR5cGU6IFJvbGVUeXBlKTogUHJvbWlzZTx2b2lkPjtcbiAgICBhc3luYyBzZXRQbGF5cyhyb2xlOiBSb2xlVHlwZSwgb3ZlcnJpZGRlblR5cGU/OiBSb2xlVHlwZSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBzZXRQbGF5c1JlcSA9IG5ldyBDb25jZXB0UHJvdG8uVGhpbmdUeXBlLlNldFBsYXlzLlJlcSgpLnNldFJvbGUoQ29uY2VwdFByb3RvQnVpbGRlci50eXBlKHJvbGUpKTtcbiAgICAgICAgaWYgKG92ZXJyaWRkZW5UeXBlKSBzZXRQbGF5c1JlcS5zZXRPdmVycmlkZGVuUm9sZShDb25jZXB0UHJvdG9CdWlsZGVyLnR5cGUob3ZlcnJpZGRlblR5cGUpKTtcbiAgICAgICAgYXdhaXQgdGhpcy5leGVjdXRlKG5ldyBDb25jZXB0UHJvdG8uVHlwZS5SZXEoKS5zZXRUaGluZ1R5cGVTZXRQbGF5c1JlcShzZXRQbGF5c1JlcSkpO1xuICAgIH1cblxuICAgIGFzeW5jIHNldE93bnMoYXR0cmlidXRlVHlwZTogQXR0cmlidXRlVHlwZSk6IFByb21pc2U8dm9pZD47XG4gICAgYXN5bmMgc2V0T3ducyhhdHRyaWJ1dGVUeXBlOiBBdHRyaWJ1dGVUeXBlLCBpc0tleTogYm9vbGVhbik6IFByb21pc2U8dm9pZD47XG4gICAgYXN5bmMgc2V0T3ducyhhdHRyaWJ1dGVUeXBlOiBBdHRyaWJ1dGVUeXBlLCBvdmVycmlkZGVuVHlwZTogQXR0cmlidXRlVHlwZSk6IFByb21pc2U8dm9pZD47XG4gICAgYXN5bmMgc2V0T3ducyhhdHRyaWJ1dGVUeXBlOiBBdHRyaWJ1dGVUeXBlLCBpc0tleTogYm9vbGVhbiwgb3ZlcnJpZGRlblR5cGU6IEF0dHJpYnV0ZVR5cGUpOiBQcm9taXNlPHZvaWQ+O1xuICAgIGFzeW5jIHNldE93bnMoYXR0cmlidXRlVHlwZTogQXR0cmlidXRlVHlwZSwgaXNLZXlPck92ZXJyaWRkZW5UeXBlPzogYm9vbGVhbiB8IEF0dHJpYnV0ZVR5cGUsIG92ZXJyaWRkZW5UeXBlPzogQXR0cmlidXRlVHlwZSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBzZXRPd25zUmVxID0gbmV3IENvbmNlcHRQcm90by5UaGluZ1R5cGUuU2V0T3ducy5SZXEoKS5zZXRBdHRyaWJ1dGVUeXBlKENvbmNlcHRQcm90b0J1aWxkZXIudHlwZShhdHRyaWJ1dGVUeXBlKSlcbiAgICAgICAgICAgIC5zZXRJc0tleSh0eXBlb2YgaXNLZXlPck92ZXJyaWRkZW5UeXBlID09PSBcImJvb2xlYW5cIiA/IGlzS2V5T3JPdmVycmlkZGVuVHlwZSA6IGZhbHNlKTtcbiAgICAgICAgbGV0IG92ZXJyaWRkZW5UeXBlMTogQXR0cmlidXRlVHlwZTtcbiAgICAgICAgaWYgKGlzS2V5T3JPdmVycmlkZGVuVHlwZSBpbnN0YW5jZW9mIEF0dHJpYnV0ZVR5cGVJbXBsKSBvdmVycmlkZGVuVHlwZTEgPSBpc0tleU9yT3ZlcnJpZGRlblR5cGU7XG4gICAgICAgIGVsc2UgaWYgKG92ZXJyaWRkZW5UeXBlKSBvdmVycmlkZGVuVHlwZTEgPSBvdmVycmlkZGVuVHlwZTtcbiAgICAgICAgaWYgKG92ZXJyaWRkZW5UeXBlMSkgc2V0T3duc1JlcS5zZXRPdmVycmlkZGVuVHlwZShDb25jZXB0UHJvdG9CdWlsZGVyLnR5cGUob3ZlcnJpZGRlblR5cGUxKSk7XG4gICAgICAgIGF3YWl0IHRoaXMuZXhlY3V0ZShuZXcgQ29uY2VwdFByb3RvLlR5cGUuUmVxKCkuc2V0VGhpbmdUeXBlU2V0T3duc1JlcShzZXRPd25zUmVxKSk7XG4gICAgfVxuXG4gICAgZ2V0UGxheXMoKTogU3RyZWFtPFJvbGVUeXBlSW1wbD4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IENvbmNlcHRQcm90by5UeXBlLlJlcSgpLnNldFRoaW5nVHlwZUdldFBsYXlzUmVxKG5ldyBDb25jZXB0UHJvdG8uVGhpbmdUeXBlLkdldFBsYXlzLlJlcSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZVN0cmVhbShyZXF1ZXN0LCByZXMgPT4gcmVzLmdldFRoaW5nVHlwZUdldFBsYXlzUmVzKCkuZ2V0Um9sZUxpc3QoKSkgYXMgU3RyZWFtPFJvbGVUeXBlSW1wbD47XG4gICAgfVxuXG4gICAgZ2V0T3ducygpOiBTdHJlYW08QXR0cmlidXRlVHlwZUltcGw+O1xuICAgIGdldE93bnModmFsdWVUeXBlOiBBdHRyaWJ1dGVUeXBlLlZhbHVlVHlwZSk6IFN0cmVhbTxBdHRyaWJ1dGVUeXBlSW1wbD47XG4gICAgZ2V0T3ducyhrZXlzT25seTogYm9vbGVhbik6IFN0cmVhbTxBdHRyaWJ1dGVUeXBlSW1wbD47XG4gICAgZ2V0T3ducyh2YWx1ZVR5cGU6IEF0dHJpYnV0ZVR5cGUuVmFsdWVUeXBlLCBrZXlzT25seTogYm9vbGVhbik6IFN0cmVhbTxBdHRyaWJ1dGVUeXBlSW1wbD47XG4gICAgZ2V0T3ducyh2YWx1ZVR5cGVPcktleXNPbmx5PzogQXR0cmlidXRlVHlwZS5WYWx1ZVR5cGUgfCBib29sZWFuLCBrZXlzT25seT86IGJvb2xlYW4pOiBTdHJlYW08QXR0cmlidXRlVHlwZUltcGw+IHtcbiAgICAgICAgY29uc3QgZ2V0T3duc1JlcSA9IG5ldyBDb25jZXB0UHJvdG8uVGhpbmdUeXBlLkdldE93bnMuUmVxKClcbiAgICAgICAgICAgIC5zZXRLZXlzT25seSh0eXBlb2YgdmFsdWVUeXBlT3JLZXlzT25seSA9PT0gXCJib29sZWFuXCIgPyB2YWx1ZVR5cGVPcktleXNPbmx5IDogdHlwZW9mIGtleXNPbmx5ID09PSBcImJvb2xlYW5cIiA/IGtleXNPbmx5IDogZmFsc2UpO1xuICAgICAgICAvLyBIZXJlIHdlIHRha2UgYWR2YW50YWdlIG9mIHRoZSBmYWN0IHRoYXQgQXR0cmlidXRlVHlwZS5WYWx1ZVR5cGUgaXMgYSBzdHJpbmcgZW51bVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlVHlwZU9yS2V5c09ubHkgPT09IFwic3RyaW5nXCIpIGdldE93bnNSZXEuc2V0VmFsdWVUeXBlKENvbmNlcHRQcm90b0J1aWxkZXIudmFsdWVUeXBlKHZhbHVlVHlwZU9yS2V5c09ubHkpKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBDb25jZXB0UHJvdG8uVHlwZS5SZXEoKS5zZXRUaGluZ1R5cGVHZXRPd25zUmVxKGdldE93bnNSZXEpO1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlU3RyZWFtKHJlcXVlc3QsIHJlcyA9PiByZXMuZ2V0VGhpbmdUeXBlR2V0T3duc1JlcygpLmdldEF0dHJpYnV0ZVR5cGVMaXN0KCkpIGFzIFN0cmVhbTxBdHRyaWJ1dGVUeXBlSW1wbD47XG4gICAgfVxuXG4gICAgYXN5bmMgdW5zZXRQbGF5cyhyb2xlOiBSb2xlVHlwZSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmV4ZWN1dGUobmV3IENvbmNlcHRQcm90by5UeXBlLlJlcSgpLnNldFRoaW5nVHlwZVVuc2V0UGxheXNSZXEoXG4gICAgICAgICAgICBuZXcgQ29uY2VwdFByb3RvLlRoaW5nVHlwZS5VbnNldFBsYXlzLlJlcSgpLnNldFJvbGUoQ29uY2VwdFByb3RvQnVpbGRlci50eXBlKHJvbGUpKSkpO1xuICAgIH1cblxuICAgIGFzeW5jIHVuc2V0T3ducyhhdHRyaWJ1dGVUeXBlOiBBdHRyaWJ1dGVUeXBlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZXhlY3V0ZShuZXcgQ29uY2VwdFByb3RvLlR5cGUuUmVxKCkuc2V0VGhpbmdUeXBlVW5zZXRPd25zUmVxKFxuICAgICAgICAgICAgbmV3IENvbmNlcHRQcm90by5UaGluZ1R5cGUuVW5zZXRPd25zLlJlcSgpLnNldEF0dHJpYnV0ZXR5cGUoQ29uY2VwdFByb3RvQnVpbGRlci50eXBlKGF0dHJpYnV0ZVR5cGUpKSkpO1xuICAgIH1cblxuICAgIGFzUmVtb3RlKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbik6IFJlbW90ZVRoaW5nVHlwZUltcGwge1xuICAgICAgICByZXR1cm4gbmV3IFJlbW90ZVRoaW5nVHlwZUltcGwodHJhbnNhY3Rpb24sIHRoaXMuZ2V0TGFiZWwoKSwgdGhpcy5pc1Jvb3QoKSk7XG4gICAgfVxufVxuIl19