/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/type/impl/ThingTypeImpl", ["require", "exports", "grakn-client/dependencies_internal", "graknlabs-protocol/protobuf/concept_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteThingTypeImpl = exports.ThingTypeImpl = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    const concept_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/concept_pb"));
    class ThingTypeImpl extends dependencies_internal_1.TypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        asRemote(transaction) {
            return new RemoteThingTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.ThingTypeImpl = ThingTypeImpl;
    class RemoteThingTypeImpl extends dependencies_internal_1.RemoteTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        setSupertype(thingType) {
            return super.setSupertype(thingType);
        }
        getSupertype() {
            return super.getSupertype();
        }
        getSupertypes() {
            return super.getSupertypes();
        }
        getSubtypes() {
            return super.getSubtypes();
        }
        getInstances() {
            const request = new concept_pb_1.default.Type.Req().setThingTypeGetInstancesReq(new concept_pb_1.default.ThingType.GetInstances.Req());
            return this.thingStream(request, res => res.getThingTypeGetInstancesRes().getThingList());
        }
        setAbstract() {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Type.Req().setThingTypeSetAbstractReq(new concept_pb_1.default.ThingType.SetAbstract.Req()));
            });
        }
        unsetAbstract() {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Type.Req().setThingTypeUnsetAbstractReq(new concept_pb_1.default.ThingType.UnsetAbstract.Req()));
            });
        }
        setPlays(role, overriddenType) {
            return __awaiter(this, void 0, void 0, function* () {
                const setPlaysReq = new concept_pb_1.default.ThingType.SetPlays.Req().setRole(dependencies_internal_1.ConceptProtoBuilder.type(role));
                if (overriddenType)
                    setPlaysReq.setOverriddenRole(dependencies_internal_1.ConceptProtoBuilder.type(overriddenType));
                yield this.execute(new concept_pb_1.default.Type.Req().setThingTypeSetPlaysReq(setPlaysReq));
            });
        }
        setOwns(attributeType, isKeyOrOverriddenType, overriddenType) {
            return __awaiter(this, void 0, void 0, function* () {
                const setOwnsReq = new concept_pb_1.default.ThingType.SetOwns.Req().setAttributeType(dependencies_internal_1.ConceptProtoBuilder.type(attributeType))
                    .setIsKey(typeof isKeyOrOverriddenType === "boolean" ? isKeyOrOverriddenType : false);
                let overriddenType1;
                if (isKeyOrOverriddenType instanceof dependencies_internal_1.AttributeTypeImpl)
                    overriddenType1 = isKeyOrOverriddenType;
                else if (overriddenType)
                    overriddenType1 = overriddenType;
                if (overriddenType1)
                    setOwnsReq.setOverriddenType(dependencies_internal_1.ConceptProtoBuilder.type(overriddenType1));
                yield this.execute(new concept_pb_1.default.Type.Req().setThingTypeSetOwnsReq(setOwnsReq));
            });
        }
        getPlays() {
            const request = new concept_pb_1.default.Type.Req().setThingTypeGetPlaysReq(new concept_pb_1.default.ThingType.GetPlays.Req());
            return this.typeStream(request, res => res.getThingTypeGetPlaysRes().getRoleList());
        }
        getOwns(valueTypeOrKeysOnly, keysOnly) {
            const getOwnsReq = new concept_pb_1.default.ThingType.GetOwns.Req()
                .setKeysOnly(typeof valueTypeOrKeysOnly === "boolean" ? valueTypeOrKeysOnly : typeof keysOnly === "boolean" ? keysOnly : false);
            // Here we take advantage of the fact that AttributeType.ValueType is a string enum
            if (typeof valueTypeOrKeysOnly === "string")
                getOwnsReq.setValueType(dependencies_internal_1.ConceptProtoBuilder.valueType(valueTypeOrKeysOnly));
            const request = new concept_pb_1.default.Type.Req().setThingTypeGetOwnsReq(getOwnsReq);
            return this.typeStream(request, res => res.getThingTypeGetOwnsRes().getAttributeTypeList());
        }
        unsetPlays(role) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Type.Req().setThingTypeUnsetPlaysReq(new concept_pb_1.default.ThingType.UnsetPlays.Req().setRole(dependencies_internal_1.ConceptProtoBuilder.type(role))));
            });
        }
        unsetOwns(attributeType) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Type.Req().setThingTypeUnsetOwnsReq(new concept_pb_1.default.ThingType.UnsetOwns.Req().setAttributeType(dependencies_internal_1.ConceptProtoBuilder.type(attributeType))));
            });
        }
        asRemote(transaction) {
            return new RemoteThingTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.RemoteThingTypeImpl = RemoteThingTypeImpl;
});
//# sourceMappingURL=data:application/json;base64,