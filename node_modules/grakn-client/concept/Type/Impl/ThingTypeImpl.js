/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/Type/Impl/ThingTypeImpl", ["require", "exports", "grakn-client/concept/Type/Impl/TypeImpl", "graknlabs-grpc-protocol/protobuf/concept_pb", "assert"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteThingTypeImpl = exports.ThingTypeImpl = void 0;
    const TypeImpl_1 = require("grakn-client/concept/Type/Impl/TypeImpl");
    const concept_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/concept_pb"));
    var TypeProto = concept_pb_1.default.Type;
    const assert_1 = __importDefault(require("assert"));
    class ThingTypeImpl extends TypeImpl_1.TypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        asRemote(transaction) {
            return new RemoteThingTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
        static of(typeProto) {
            switch (typeProto.getEncoding()) {
                case TypeProto.ENCODING.ENTITY_TYPE:
                    throw "no"; // TODO: resolve circular ref
                // return EntityTypeImpl.of(typeProto);
                case TypeProto.ENCODING.RELATION_TYPE:
                    throw "no"; // TODO: resolve circular ref
                // return RelationTypeImpl.of(typeProto);
                case TypeProto.ENCODING.ATTRIBUTE_TYPE:
                    throw "no"; // TODO: resolve circular ref
                // return AttributeTypeImpl.of(typeProto);
                case TypeProto.ENCODING.THING_TYPE:
                    assert_1.default(typeProto.getRoot());
                    return new ThingTypeImpl(typeProto.getLabel(), typeProto.getRoot());
                default:
                    throw "Bad encoding";
            }
        }
    }
    exports.ThingTypeImpl = ThingTypeImpl;
    class RemoteThingTypeImpl extends TypeImpl_1.RemoteTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        getSupertype() {
            throw "Behaviour not yet implemented";
        }
        getSupertypes() {
            throw "Not implemented yet";
        }
        getSubtypes() {
            throw "Not implemented yet";
        }
        getInstances() {
            const request = new concept_pb_1.default.Type.Req()
                .setThingTypeGetInstancesReq(new concept_pb_1.default.ThingType.GetInstances.Req());
            return this.thingStream(request, res => res.getThingTypeGetInstancesRes().getThingList());
        }
        setAbstract() {
            throw "Not implemented yet";
        }
        unsetAbstract() {
            throw "Not implemented yet";
        }
        getPlays() {
            throw "Not implemented yet";
        }
        getOwns(keysOnly) {
            throw "Not implemented yet";
        }
        setOwns(attributeType, isKey, otherType) {
        }
        setPlays(role, overriddenType) {
            throw "Not implemented yet";
        }
        unsetOwns(attributeType) {
            throw "Not implemented yet";
        }
        unsetPlays(role) {
            throw "Not implemented yet";
        }
        asRemote(transaction) {
            return new RemoteThingTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.RemoteThingTypeImpl = RemoteThingTypeImpl;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhpbmdUeXBlSW1wbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2NvbmNlcHQvVHlwZS9JbXBsL1RoaW5nVHlwZUltcGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHOzs7Ozs7Ozs7Ozs7Ozs7O0lBRUgsc0VBQXNEO0lBTXRELDZGQUF1RTtJQUN2RSxJQUFPLFNBQVMsR0FBRyxvQkFBWSxDQUFDLElBQUksQ0FBQztJQUNyQyxvREFBNEI7SUFJNUIsTUFBYSxhQUFjLFNBQVEsbUJBQVE7UUFDdkMsWUFBc0IsS0FBYSxFQUFFLE1BQWU7WUFDaEQsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6QixDQUFDO1FBRUQsUUFBUSxDQUFDLFdBQXdCO1lBQzdCLE9BQU8sSUFBSSxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO1FBQy9FLENBQUM7UUFFRCxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQW9CO1lBQzFCLFFBQVEsU0FBUyxDQUFDLFdBQVcsRUFBRSxFQUFFO2dCQUM3QixLQUFLLFNBQVMsQ0FBQyxRQUFRLENBQUMsV0FBVztvQkFDL0IsTUFBTSxJQUFJLENBQUEsQ0FBQyw2QkFBNkI7Z0JBQ3hDLHVDQUF1QztnQkFDM0MsS0FBSyxTQUFTLENBQUMsUUFBUSxDQUFDLGFBQWE7b0JBQ2pDLE1BQU0sSUFBSSxDQUFBLENBQUMsNkJBQTZCO2dCQUN4Qyx5Q0FBeUM7Z0JBQzdDLEtBQUssU0FBUyxDQUFDLFFBQVEsQ0FBQyxjQUFjO29CQUNsQyxNQUFNLElBQUksQ0FBQSxDQUFDLDZCQUE2QjtnQkFDeEMsMENBQTBDO2dCQUM5QyxLQUFLLFNBQVMsQ0FBQyxRQUFRLENBQUMsVUFBVTtvQkFDOUIsZ0JBQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztvQkFDNUIsT0FBTyxJQUFJLGFBQWEsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQ3hFO29CQUNJLE1BQU0sY0FBYyxDQUFDO2FBQzVCO1FBQ0wsQ0FBQztLQUNKO0lBM0JELHNDQTJCQztJQUVELE1BQWEsbUJBQW9CLFNBQVEseUJBQWM7UUFDbkQsWUFBWSxXQUF3QixFQUFFLEtBQWEsRUFBRSxNQUFlO1lBQ2hFLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RDLENBQUM7UUFFRCxZQUFZO1lBQ1IsTUFBTSwrQkFBK0IsQ0FBQztRQUMxQyxDQUFDO1FBRUQsYUFBYTtZQUNULE1BQU0scUJBQXFCLENBQUM7UUFDaEMsQ0FBQztRQUVELFdBQVc7WUFDUCxNQUFNLHFCQUFxQixDQUFDO1FBQ2hDLENBQUM7UUFFRCxZQUFZO1lBQ1IsTUFBTSxPQUFPLEdBQUcsSUFBSSxvQkFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7aUJBQ3RDLDJCQUEyQixDQUFDLElBQUksb0JBQVksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDaEYsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDOUYsQ0FBQztRQUVELFdBQVc7WUFDUCxNQUFNLHFCQUFxQixDQUFDO1FBQ2hDLENBQUM7UUFFRCxhQUFhO1lBQ1QsTUFBTSxxQkFBcUIsQ0FBQztRQUNoQyxDQUFDO1FBRUQsUUFBUTtZQUNKLE1BQU0scUJBQXFCLENBQUM7UUFDaEMsQ0FBQztRQUlELE9BQU8sQ0FBQyxRQUFrQjtZQUN0QixNQUFNLHFCQUFxQixDQUFDO1FBQ2hDLENBQUM7UUFNRCxPQUFPLENBQUMsYUFBNEIsRUFBRSxLQUErQixFQUFFLFNBQXlCO1FBQ2hHLENBQUM7UUFJRCxRQUFRLENBQUMsSUFBYyxFQUFFLGNBQXlCO1lBQzlDLE1BQU0scUJBQXFCLENBQUM7UUFDaEMsQ0FBQztRQUVELFNBQVMsQ0FBQyxhQUE0QjtZQUNsQyxNQUFNLHFCQUFxQixDQUFDO1FBQ2hDLENBQUM7UUFFRCxVQUFVLENBQUMsSUFBYztZQUNyQixNQUFNLHFCQUFxQixDQUFDO1FBQ2hDLENBQUM7UUFFRCxRQUFRLENBQUMsV0FBd0I7WUFDN0IsT0FBTyxJQUFJLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7UUFDL0UsQ0FBQztLQUNKO0lBakVELGtEQWlFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBUeXBlSW1wbCwgUmVtb3RlVHlwZUltcGwgfSBmcm9tIFwiLi9UeXBlSW1wbFwiO1xuaW1wb3J0IHsgVGhpbmdUeXBlLCBSZW1vdGVUaGluZ1R5cGUgfSBmcm9tIFwiLi4vVGhpbmdUeXBlXCI7XG5pbXBvcnQgeyBBdHRyaWJ1dGVUeXBlIH0gZnJvbSBcIi4uL0F0dHJpYnV0ZVR5cGVcIjtcbmltcG9ydCB7IFJvbGVUeXBlIH0gZnJvbSBcIi4uL1JvbGVUeXBlXCI7XG5pbXBvcnQgeyBHcmFrbiB9IGZyb20gXCIuLi8uLi8uLi9HcmFrblwiO1xuaW1wb3J0IFRyYW5zYWN0aW9uID0gR3Jha24uVHJhbnNhY3Rpb247XG5pbXBvcnQgQ29uY2VwdFByb3RvIGZyb20gXCJncmFrbmxhYnMtZ3JwYy1wcm90b2NvbC9wcm90b2J1Zi9jb25jZXB0X3BiXCI7XG5pbXBvcnQgVHlwZVByb3RvID0gQ29uY2VwdFByb3RvLlR5cGU7XG5pbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gXCIuLi8uLi8uLi9ycGMvU3RyZWFtXCI7XG5pbXBvcnQgeyBUaGluZyB9IGZyb20gXCIuLi8uLi9UaGluZy9UaGluZ1wiO1xuXG5leHBvcnQgY2xhc3MgVGhpbmdUeXBlSW1wbCBleHRlbmRzIFR5cGVJbXBsIGltcGxlbWVudHMgVGhpbmdUeXBlIHtcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IobGFiZWw6IHN0cmluZywgaXNSb290OiBib29sZWFuKSB7XG4gICAgICAgIHN1cGVyKGxhYmVsLCBpc1Jvb3QpO1xuICAgIH1cblxuICAgIGFzUmVtb3RlKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbik6IFJlbW90ZVRoaW5nVHlwZSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVtb3RlVGhpbmdUeXBlSW1wbCh0cmFuc2FjdGlvbiwgdGhpcy5nZXRMYWJlbCgpLCB0aGlzLmlzUm9vdCgpKVxuICAgIH1cblxuICAgIHN0YXRpYyBvZih0eXBlUHJvdG86IFR5cGVQcm90byk6IFRoaW5nVHlwZUltcGwge1xuICAgICAgICBzd2l0Y2ggKHR5cGVQcm90by5nZXRFbmNvZGluZygpKSB7XG4gICAgICAgICAgICBjYXNlIFR5cGVQcm90by5FTkNPRElORy5FTlRJVFlfVFlQRTpcbiAgICAgICAgICAgICAgICB0aHJvdyBcIm5vXCIgLy8gVE9ETzogcmVzb2x2ZSBjaXJjdWxhciByZWZcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gRW50aXR5VHlwZUltcGwub2YodHlwZVByb3RvKTtcbiAgICAgICAgICAgIGNhc2UgVHlwZVByb3RvLkVOQ09ESU5HLlJFTEFUSU9OX1RZUEU6XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJub1wiIC8vIFRPRE86IHJlc29sdmUgY2lyY3VsYXIgcmVmXG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIFJlbGF0aW9uVHlwZUltcGwub2YodHlwZVByb3RvKTtcbiAgICAgICAgICAgIGNhc2UgVHlwZVByb3RvLkVOQ09ESU5HLkFUVFJJQlVURV9UWVBFOlxuICAgICAgICAgICAgICAgIHRocm93IFwibm9cIiAvLyBUT0RPOiByZXNvbHZlIGNpcmN1bGFyIHJlZlxuICAgICAgICAgICAgICAgIC8vIHJldHVybiBBdHRyaWJ1dGVUeXBlSW1wbC5vZih0eXBlUHJvdG8pO1xuICAgICAgICAgICAgY2FzZSBUeXBlUHJvdG8uRU5DT0RJTkcuVEhJTkdfVFlQRTpcbiAgICAgICAgICAgICAgICBhc3NlcnQodHlwZVByb3RvLmdldFJvb3QoKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUaGluZ1R5cGVJbXBsKHR5cGVQcm90by5nZXRMYWJlbCgpLCB0eXBlUHJvdG8uZ2V0Um9vdCgpKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJCYWQgZW5jb2RpbmdcIjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlbW90ZVRoaW5nVHlwZUltcGwgZXh0ZW5kcyBSZW1vdGVUeXBlSW1wbCBpbXBsZW1lbnRzIFJlbW90ZVRoaW5nVHlwZSB7XG4gICAgY29uc3RydWN0b3IodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uLCBsYWJlbDogc3RyaW5nLCBpc1Jvb3Q6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIodHJhbnNhY3Rpb24sIGxhYmVsLCBpc1Jvb3QpO1xuICAgIH1cblxuICAgIGdldFN1cGVydHlwZSgpOiBUaGluZ1R5cGVJbXBsIHtcbiAgICAgICAgdGhyb3cgXCJCZWhhdmlvdXIgbm90IHlldCBpbXBsZW1lbnRlZFwiO1xuICAgIH1cblxuICAgIGdldFN1cGVydHlwZXMoKTogU3RyZWFtPGFueT4ge1xuICAgICAgICB0aHJvdyBcIk5vdCBpbXBsZW1lbnRlZCB5ZXRcIjtcbiAgICB9XG5cbiAgICBnZXRTdWJ0eXBlcygpOiBTdHJlYW08YW55PiB7XG4gICAgICAgIHRocm93IFwiTm90IGltcGxlbWVudGVkIHlldFwiO1xuICAgIH1cblxuICAgIGdldEluc3RhbmNlcygpOiBTdHJlYW08VGhpbmc+IHtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBDb25jZXB0UHJvdG8uVHlwZS5SZXEoKVxuICAgICAgICAgICAgLnNldFRoaW5nVHlwZUdldEluc3RhbmNlc1JlcShuZXcgQ29uY2VwdFByb3RvLlRoaW5nVHlwZS5HZXRJbnN0YW5jZXMuUmVxKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy50aGluZ1N0cmVhbShyZXF1ZXN0LCByZXMgPT4gcmVzLmdldFRoaW5nVHlwZUdldEluc3RhbmNlc1JlcygpLmdldFRoaW5nTGlzdCgpKTtcbiAgICB9XG5cbiAgICBzZXRBYnN0cmFjdCgpOiB2b2lkIHtcbiAgICAgICAgdGhyb3cgXCJOb3QgaW1wbGVtZW50ZWQgeWV0XCI7XG4gICAgfVxuXG4gICAgdW5zZXRBYnN0cmFjdCgpOiB2b2lkIHtcbiAgICAgICAgdGhyb3cgXCJOb3QgaW1wbGVtZW50ZWQgeWV0XCI7XG4gICAgfVxuXG4gICAgZ2V0UGxheXMoKTogU3RyZWFtPGFueT4ge1xuICAgICAgICB0aHJvdyBcIk5vdCBpbXBsZW1lbnRlZCB5ZXRcIjtcbiAgICB9XG5cbiAgICBnZXRPd25zKCk6IFN0cmVhbTxhbnk+O1xuICAgIGdldE93bnMoa2V5c09ubHk6IGJvb2xlYW4pOiBTdHJlYW08YW55PjtcbiAgICBnZXRPd25zKGtleXNPbmx5PzogYm9vbGVhbik6IFN0cmVhbTxhbnk+IHtcbiAgICAgICAgdGhyb3cgXCJOb3QgaW1wbGVtZW50ZWQgeWV0XCI7XG4gICAgfVxuXG4gICAgc2V0T3ducyhhdHRyaWJ1dGVUeXBlOiBBdHRyaWJ1dGVUeXBlKTogdm9pZDtcbiAgICBzZXRPd25zKGF0dHJpYnV0ZVR5cGU6IEF0dHJpYnV0ZVR5cGUsIGlzS2V5OiBib29sZWFuKTogdm9pZDtcbiAgICBzZXRPd25zKGF0dHJpYnV0ZVR5cGU6IEF0dHJpYnV0ZVR5cGUsIG92ZXJyaWRkZW5UeXBlOiBBdHRyaWJ1dGVUeXBlKTogdm9pZDtcbiAgICBzZXRPd25zKGF0dHJpYnV0ZVR5cGU6IEF0dHJpYnV0ZVR5cGUsIGlzS2V5OiBib29sZWFuLCBvdGhlclR5cGU6IEF0dHJpYnV0ZVR5cGUpOiB2b2lkO1xuICAgIHNldE93bnMoYXR0cmlidXRlVHlwZTogQXR0cmlidXRlVHlwZSwgaXNLZXk/OiBib29sZWFuIHwgQXR0cmlidXRlVHlwZSwgb3RoZXJUeXBlPzogQXR0cmlidXRlVHlwZSk6IHZvaWQge1xuICAgIH1cblxuICAgIHNldFBsYXlzKHJvbGU6IFJvbGVUeXBlKTogdm9pZDtcbiAgICBzZXRQbGF5cyhyb2xlOiBSb2xlVHlwZSwgb3ZlcnJpZGRlblR5cGU6IFJvbGVUeXBlKTogdm9pZDtcbiAgICBzZXRQbGF5cyhyb2xlOiBSb2xlVHlwZSwgb3ZlcnJpZGRlblR5cGU/OiBSb2xlVHlwZSk6IHZvaWQge1xuICAgICAgICB0aHJvdyBcIk5vdCBpbXBsZW1lbnRlZCB5ZXRcIjtcbiAgICB9XG5cbiAgICB1bnNldE93bnMoYXR0cmlidXRlVHlwZTogQXR0cmlidXRlVHlwZSk6IHZvaWQge1xuICAgICAgICB0aHJvdyBcIk5vdCBpbXBsZW1lbnRlZCB5ZXRcIjtcbiAgICB9XG5cbiAgICB1bnNldFBsYXlzKHJvbGU6IFJvbGVUeXBlKTogdm9pZCB7XG4gICAgICAgIHRocm93IFwiTm90IGltcGxlbWVudGVkIHlldFwiO1xuICAgIH1cblxuICAgIGFzUmVtb3RlKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbik6IFJlbW90ZVRoaW5nVHlwZUltcGwge1xuICAgICAgICByZXR1cm4gbmV3IFJlbW90ZVRoaW5nVHlwZUltcGwodHJhbnNhY3Rpb24sIHRoaXMuZ2V0TGFiZWwoKSwgdGhpcy5pc1Jvb3QoKSlcbiAgICB9XG59XG4iXX0=