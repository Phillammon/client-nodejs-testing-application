/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/Type/Impl/RuleImpl", ["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteRuleImpl = exports.RuleImpl = void 0;
    class RuleImpl {
        constructor(label, when, then) {
            this._label = label;
            this._when = when;
            this._then = then;
        }
        static of(ruleProto) {
            return new RuleImpl(ruleProto.getLabel(), ruleProto.getWhen(), ruleProto.getThen());
        }
        getLabel() {
            return this._label;
        }
        getThen() {
            return this._then;
        }
        getWhen() {
            return this._when;
        }
        asRemote(transaction) {
            return new RemoteRuleImpl(transaction, this.getLabel(), this.getWhen(), this.getThen());
        }
        toString() {
            return `${RuleImpl.name}[label:${this._label}]`;
        }
    }
    exports.RuleImpl = RuleImpl;
    class RemoteRuleImpl {
        constructor(transaction, label, when, then) {
            this._transaction = transaction;
            this._label = label;
            this._when = when;
            this._then = then;
        }
        getLabel() {
            return this._label;
        }
        getThen() {
            return this._then;
        }
        getWhen() {
            return this._when;
        }
        setLabel(label) {
            this._label = label;
            throw "Not yet implemented"; // TODO: rpc call
        }
        delete() {
            throw "Not yet implemented";
        }
        isDeleted() {
            throw "Not yet applicable";
        }
        asRemote(transaction) {
            return new RemoteRuleImpl(transaction, this.getLabel(), this.getWhen(), this.getThen());
        }
        get transaction() {
            return this._transaction;
        }
    }
    exports.RemoteRuleImpl = RemoteRuleImpl;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnVsZUltcGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9jb25jZXB0L1R5cGUvSW1wbC9SdWxlSW1wbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7Ozs7Ozs7Ozs7Ozs7SUFPSCxNQUFhLFFBQVE7UUFNakIsWUFBc0IsS0FBYSxFQUFFLElBQVksRUFBRSxJQUFZO1lBQzNELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLENBQUM7UUFFRCxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQW9CO1lBQzFCLE9BQU8sSUFBSSxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUN4RixDQUFDO1FBRUQsUUFBUTtZQUNKLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN2QixDQUFDO1FBRUQsT0FBTztZQUNILE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN0QixDQUFDO1FBRUQsT0FBTztZQUNILE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN0QixDQUFDO1FBRUQsUUFBUSxDQUFDLFdBQXdCO1lBQzdCLE9BQU8sSUFBSSxjQUFjLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDNUYsQ0FBQztRQUVELFFBQVE7WUFDSixPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksVUFBVSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7UUFDcEQsQ0FBQztLQUNKO0lBbkNELDRCQW1DQztJQUVELE1BQWEsY0FBYztRQU12QixZQUFZLFdBQXdCLEVBQUUsS0FBYSxFQUFFLElBQVksRUFBRSxJQUFZO1lBQzNFLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLENBQUM7UUFFRCxRQUFRO1lBQ0osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3ZCLENBQUM7UUFFRCxPQUFPO1lBQ0gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RCLENBQUM7UUFFRCxPQUFPO1lBQ0gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RCLENBQUM7UUFFRCxRQUFRLENBQUMsS0FBYTtZQUNsQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUNwQixNQUFNLHFCQUFxQixDQUFDLENBQUMsaUJBQWlCO1FBQ2xELENBQUM7UUFFRCxNQUFNO1lBQ0YsTUFBTSxxQkFBcUIsQ0FBQztRQUNoQyxDQUFDO1FBRUQsU0FBUztZQUNMLE1BQU0sb0JBQW9CLENBQUE7UUFDOUIsQ0FBQztRQUVELFFBQVEsQ0FBQyxXQUF3QjtZQUM3QixPQUFPLElBQUksY0FBYyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzVGLENBQUM7UUFFRCxJQUFjLFdBQVc7WUFDckIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzdCLENBQUM7S0FDSjtJQTdDRCx3Q0E2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUmVtb3RlUnVsZSwgUnVsZSB9IGZyb20gXCIuLi9SdWxlXCI7XG5pbXBvcnQgeyBSdWxlIGFzIFJ1bGVQcm90byB9IGZyb20gXCJncmFrbmxhYnMtZ3JwYy1wcm90b2NvbC9wcm90b2J1Zi9jb25jZXB0X3BiXCI7XG5pbXBvcnQgeyBHcmFrbiB9IGZyb20gXCIuLi8uLi8uLi9HcmFrblwiO1xuaW1wb3J0IFRyYW5zYWN0aW9uID0gR3Jha24uVHJhbnNhY3Rpb247XG5cbmV4cG9ydCBjbGFzcyBSdWxlSW1wbCBpbXBsZW1lbnRzIFJ1bGUge1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbGFiZWw6IHN0cmluZztcbiAgICBwcml2YXRlIHJlYWRvbmx5IF93aGVuOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfdGhlbjogc3RyaW5nO1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGxhYmVsOiBzdHJpbmcsIHdoZW46IHN0cmluZywgdGhlbjogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2xhYmVsID0gbGFiZWw7XG4gICAgICAgIHRoaXMuX3doZW4gPSB3aGVuO1xuICAgICAgICB0aGlzLl90aGVuID0gdGhlbjtcbiAgICB9XG5cbiAgICBzdGF0aWMgb2YocnVsZVByb3RvOiBSdWxlUHJvdG8pOiBSdWxlSW1wbCB7XG4gICAgICAgIHJldHVybiBuZXcgUnVsZUltcGwocnVsZVByb3RvLmdldExhYmVsKCksIHJ1bGVQcm90by5nZXRXaGVuKCksIHJ1bGVQcm90by5nZXRUaGVuKCkpO1xuICAgIH1cblxuICAgIGdldExhYmVsKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sYWJlbDtcbiAgICB9XG5cbiAgICBnZXRUaGVuKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl90aGVuO1xuICAgIH1cblxuICAgIGdldFdoZW4oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3doZW47XG4gICAgfVxuXG4gICAgYXNSZW1vdGUodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogUmVtb3RlUnVsZSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVtb3RlUnVsZUltcGwodHJhbnNhY3Rpb24sIHRoaXMuZ2V0TGFiZWwoKSwgdGhpcy5nZXRXaGVuKCksIHRoaXMuZ2V0VGhlbigpKTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7UnVsZUltcGwubmFtZX1bbGFiZWw6JHt0aGlzLl9sYWJlbH1dYDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZW1vdGVSdWxlSW1wbCBpbXBsZW1lbnRzIFJlbW90ZVJ1bGUge1xuICAgIHByaXZhdGUgX2xhYmVsOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfd2hlbjogc3RyaW5nO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX3RoZW46IHN0cmluZztcbiAgICBwcml2YXRlIHJlYWRvbmx5IF90cmFuc2FjdGlvbjogVHJhbnNhY3Rpb247XG5cbiAgICBjb25zdHJ1Y3Rvcih0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24sIGxhYmVsOiBzdHJpbmcsIHdoZW46IHN0cmluZywgdGhlbjogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb247XG4gICAgICAgIHRoaXMuX2xhYmVsID0gbGFiZWw7XG4gICAgICAgIHRoaXMuX3doZW4gPSB3aGVuO1xuICAgICAgICB0aGlzLl90aGVuID0gdGhlbjtcbiAgICB9XG5cbiAgICBnZXRMYWJlbCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFiZWw7XG4gICAgfVxuXG4gICAgZ2V0VGhlbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGhlbjtcbiAgICB9XG5cbiAgICBnZXRXaGVuKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl93aGVuO1xuICAgIH1cblxuICAgIHNldExhYmVsKGxhYmVsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fbGFiZWwgPSBsYWJlbDtcbiAgICAgICAgdGhyb3cgXCJOb3QgeWV0IGltcGxlbWVudGVkXCI7IC8vIFRPRE86IHJwYyBjYWxsXG4gICAgfVxuXG4gICAgZGVsZXRlKCk6IHZvaWQge1xuICAgICAgICB0aHJvdyBcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIjtcbiAgICB9XG5cbiAgICBpc0RlbGV0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHRocm93IFwiTm90IHlldCBhcHBsaWNhYmxlXCJcbiAgICB9XG5cbiAgICBhc1JlbW90ZSh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24pOiBSZW1vdGVSdWxlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZW1vdGVSdWxlSW1wbCh0cmFuc2FjdGlvbiwgdGhpcy5nZXRMYWJlbCgpLCB0aGlzLmdldFdoZW4oKSwgdGhpcy5nZXRUaGVuKCkpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgdHJhbnNhY3Rpb24oKTogVHJhbnNhY3Rpb24ge1xuICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNhY3Rpb247XG4gICAgfVxufVxuIl19