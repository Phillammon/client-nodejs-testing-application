/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/Type/Impl/TypeImpl", ["require", "exports", "graknlabs-grpc-protocol/protobuf/concept_pb", "graknlabs-grpc-protocol/protobuf/transaction_pb", "grakn-client/concept/Type/Impl/ThingTypeImpl", "grakn-client/concept/Proto/ConceptProtoReader"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteTypeImpl = exports.TypeImpl = void 0;
    const concept_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/concept_pb"));
    const transaction_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/transaction_pb"));
    const ThingTypeImpl_1 = require("grakn-client/concept/Type/Impl/ThingTypeImpl");
    const ConceptProtoReader_1 = require("grakn-client/concept/Proto/ConceptProtoReader");
    class TypeImpl {
        constructor(label, root) {
            if (!label)
                throw "Type Label missing.";
            this._label = label;
            this._root = root;
        }
        static of(typeProto) {
            switch (typeProto.getEncoding()) {
                case concept_pb_1.default.Type.ENCODING.ROLE_TYPE:
                    throw "no"; // TODO: resolve circular reference
                // return RoleTypeImpl.of(typeProto);
                default:
                    return ThingTypeImpl_1.ThingTypeImpl.of(typeProto);
            }
        }
        getLabel() {
            return this._label;
        }
        isRoot() {
            return this._root;
        }
        isRemote() {
            return false;
        }
        toString() {
            return `${TypeImpl.name}[label:${this._label}]`;
        }
    }
    exports.TypeImpl = TypeImpl;
    class RemoteTypeImpl {
        constructor(transaction, label, isRoot) {
            if (!transaction)
                throw "Transaction Missing";
            if (!label)
                throw "IID Missing";
            this._rpcTransaction = transaction;
            this._label = label;
            this._isRoot = isRoot;
        }
        getLabel() {
            return this._label;
        }
        isRoot() {
            return this._isRoot;
        }
        isRemote() {
            return true;
        }
        setLabel(label) {
            this._label = label;
            throw "Not implemented yet"; // TODO: issue RPC call
        }
        isAbstract() {
            throw "Not implemented yet";
        }
        delete() {
            throw "Not implemented yet";
        }
        isDeleted() {
            return false;
        }
        get transaction() {
            return this._rpcTransaction;
        }
        toString() {
            return `${RemoteTypeImpl.name}[label:${this._label}]`;
        }
        thingStream(method, thingGetter) {
            const request = new transaction_pb_1.default.Transaction.Req()
                .setTypeReq(method.setLabel(this._label));
            return this._rpcTransaction.stream(request, res => thingGetter(res.getTypeRes()).map(ConceptProtoReader_1.ConceptProtoReader.thing));
        }
        execute(method) {
            const request = new transaction_pb_1.default.Transaction.Req()
                .setTypeReq(method.setLabel(this._label));
            return this._rpcTransaction.execute(request, res => res.getTypeRes());
        }
    }
    exports.RemoteTypeImpl = RemoteTypeImpl;
});
//# sourceMappingURL=data:application/json;base64,