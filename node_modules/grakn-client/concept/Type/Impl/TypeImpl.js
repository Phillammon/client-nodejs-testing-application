/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/type/impl/TypeImpl", ["require", "exports", "grakn-client/dependencies_internal", "graknlabs-protocol/protobuf/concept_pb", "graknlabs-protocol/protobuf/transaction_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteTypeImpl = exports.TypeImpl = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    const concept_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/concept_pb"));
    const transaction_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/transaction_pb"));
    class TypeImpl {
        constructor(label, root) {
            if (!label)
                throw new dependencies_internal_1.GraknClientError(dependencies_internal_1.ErrorMessage.Concept.MISSING_LABEL.message());
            this._label = label;
            this._root = root;
        }
        getLabel() {
            return this._label;
        }
        isRoot() {
            return this._root;
        }
        isRemote() {
            return false;
        }
        toString() {
            return `${this.constructor.name}[label:${this._label}]`;
        }
    }
    exports.TypeImpl = TypeImpl;
    class RemoteTypeImpl {
        constructor(transaction, label, isRoot) {
            if (!transaction)
                throw new dependencies_internal_1.GraknClientError(dependencies_internal_1.ErrorMessage.Concept.MISSING_TRANSACTION.message());
            if (!label)
                throw new dependencies_internal_1.GraknClientError(dependencies_internal_1.ErrorMessage.Concept.MISSING_LABEL.message());
            this._rpcTransaction = transaction;
            this._label = label;
            this._isRoot = isRoot;
        }
        getLabel() {
            return this._label;
        }
        isRoot() {
            return this._isRoot;
        }
        isRemote() {
            return true;
        }
        setLabel(label) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Type.Req()
                    .setTypeSetLabelReq(new concept_pb_1.default.Type.SetLabel.Req().setLabel(label)));
                this._label = label;
            });
        }
        isAbstract() {
            return __awaiter(this, void 0, void 0, function* () {
                return (yield this.execute(new concept_pb_1.default.Type.Req()
                    .setTypeIsAbstractReq(new concept_pb_1.default.Type.IsAbstract.Req())))
                    .getTypeIsAbstractRes().getAbstract();
            });
        }
        setSupertype(type) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Type.Req()
                    .setTypeSetSupertypeReq(new concept_pb_1.default.Type.SetSupertype.Req().setType(dependencies_internal_1.ConceptProtoBuilder.type(type))));
            });
        }
        getSupertype() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = (yield this.execute(new concept_pb_1.default.Type.Req()
                    .setTypeGetSupertypeReq(new concept_pb_1.default.Type.GetSupertype.Req())))
                    .getTypeGetSupertypeRes();
                return response.getResCase() === concept_pb_1.default.Type.GetSupertype.Res.ResCase.TYPE ? dependencies_internal_1.ConceptProtoReader.type(response.getType()) : null;
            });
        }
        getSupertypes() {
            const method = new concept_pb_1.default.Type.Req().setTypeGetSupertypesReq(new concept_pb_1.default.Type.GetSupertypes.Req());
            return this.typeStream(method, res => res.getTypeGetSupertypesRes().getTypeList());
        }
        getSubtypes() {
            const method = new concept_pb_1.default.Type.Req().setTypeGetSubtypesReq(new concept_pb_1.default.Type.GetSubtypes.Req());
            return this.typeStream(method, res => res.getTypeGetSubtypesRes().getTypeList());
        }
        delete() {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.execute(new concept_pb_1.default.Type.Req().setTypeDeleteReq(new concept_pb_1.default.Type.Delete.Req()));
            });
        }
        isDeleted() {
            return __awaiter(this, void 0, void 0, function* () {
                return !(yield this._rpcTransaction.concepts().getType(this._label));
            });
        }
        get transaction() {
            return this._rpcTransaction;
        }
        typeStream(method, typeGetter) {
            const request = new transaction_pb_1.default.Transaction.Req().setTypeReq(method.setLabel(this._label));
            return this._rpcTransaction.stream(request, res => typeGetter(res.getTypeRes()).map(dependencies_internal_1.ConceptProtoReader.type));
        }
        thingStream(method, thingGetter) {
            const request = new transaction_pb_1.default.Transaction.Req().setTypeReq(method.setLabel(this._label));
            return this._rpcTransaction.stream(request, res => thingGetter(res.getTypeRes()).map(dependencies_internal_1.ConceptProtoReader.thing));
        }
        execute(method) {
            const request = new transaction_pb_1.default.Transaction.Req().setTypeReq(method.setLabel(this._label));
            return this._rpcTransaction.execute(request, res => res.getTypeRes());
        }
        toString() {
            return `${this.constructor.name}[label:${this._label}]`;
        }
    }
    exports.RemoteTypeImpl = RemoteTypeImpl;
});
//# sourceMappingURL=data:application/json;base64,