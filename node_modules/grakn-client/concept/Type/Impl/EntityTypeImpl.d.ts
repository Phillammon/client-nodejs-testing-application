/// <amd-module name="grakn-client/concept/Type/Impl/EntityTypeImpl" />
import { ThingTypeImpl, RemoteThingTypeImpl } from "./ThingTypeImpl";
import { RemoteEntityType } from "../EntityType";
import { EntityType } from "../EntityType";
import { Grakn } from "../../../Grakn";
import Transaction = Grakn.Transaction;
import ConceptProto from "graknlabs-grpc-protocol/protobuf/concept_pb";
import { EntityImpl } from "../../Thing/Impl/EntityImpl";
import { Stream } from "../../../rpc/Stream";
export declare class EntityTypeImpl extends ThingTypeImpl implements EntityType {
    protected constructor(label: string, isRoot: boolean);
    static of(typeProto: ConceptProto.Type): EntityTypeImpl;
    asRemote(transaction: Transaction): RemoteEntityType;
}
export declare class RemoteEntityTypeImpl extends RemoteThingTypeImpl implements RemoteEntityType {
    constructor(transaction: Transaction, label: string, isRoot: boolean);
    setSupertype(superEntityType: EntityType): void;
    getSupertype(): EntityTypeImpl;
    getInstances(): Stream<EntityImpl>;
    asRemote(transaction: Transaction): RemoteEntityTypeImpl;
    getSupertypes(): Stream<any>;
    getSubtypes(): Stream<any>;
    create(): Promise<EntityImpl>;
}
