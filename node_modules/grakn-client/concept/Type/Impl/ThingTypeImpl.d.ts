/// <amd-module name="grakn-client/concept/Type/Impl/ThingTypeImpl" />
import { TypeImpl, RemoteTypeImpl } from "./TypeImpl";
import { ThingType, RemoteThingType } from "../ThingType";
import { AttributeType } from "../AttributeType";
import { RoleType } from "../RoleType";
import { Grakn } from "../../../Grakn";
import Transaction = Grakn.Transaction;
import ConceptProto from "graknlabs-grpc-protocol/protobuf/concept_pb";
import TypeProto = ConceptProto.Type;
import { Stream } from "../../../rpc/Stream";
import { Thing } from "../../Thing/Thing";
export declare class ThingTypeImpl extends TypeImpl implements ThingType {
    protected constructor(label: string, isRoot: boolean);
    asRemote(transaction: Transaction): RemoteThingType;
    static of(typeProto: TypeProto): ThingTypeImpl;
}
export declare class RemoteThingTypeImpl extends RemoteTypeImpl implements RemoteThingType {
    constructor(transaction: Transaction, label: string, isRoot: boolean);
    getSupertype(): ThingTypeImpl;
    getSupertypes(): Stream<any>;
    getSubtypes(): Stream<any>;
    getInstances(): Stream<Thing>;
    setAbstract(): void;
    unsetAbstract(): void;
    getPlays(): Stream<any>;
    getOwns(): Stream<any>;
    getOwns(keysOnly: boolean): Stream<any>;
    setOwns(attributeType: AttributeType): void;
    setOwns(attributeType: AttributeType, isKey: boolean): void;
    setOwns(attributeType: AttributeType, overriddenType: AttributeType): void;
    setOwns(attributeType: AttributeType, isKey: boolean, otherType: AttributeType): void;
    setPlays(role: RoleType): void;
    setPlays(role: RoleType, overriddenType: RoleType): void;
    unsetOwns(attributeType: AttributeType): void;
    unsetPlays(role: RoleType): void;
    asRemote(transaction: Transaction): RemoteThingTypeImpl;
}
