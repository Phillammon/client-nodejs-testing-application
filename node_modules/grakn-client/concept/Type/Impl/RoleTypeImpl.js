/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/Type/Impl/RoleTypeImpl", ["require", "exports", "grakn-client/concept/Type/Impl/ThingTypeImpl"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteRoleTypeImpl = exports.RoleTypeImpl = void 0;
    const ThingTypeImpl_1 = require("grakn-client/concept/Type/Impl/ThingTypeImpl");
    class RoleTypeImpl extends ThingTypeImpl_1.ThingTypeImpl {
        constructor(label, scope, isRoot) {
            super(label, isRoot);
            this._scope = scope;
        }
        static of(typeProto) {
            return new RoleTypeImpl(typeProto.getLabel(), typeProto.getScope(), typeProto.getRoot());
        }
        getScope() {
            return this._scope;
        }
        asRemote(transaction) {
            return new RemoteRoleTypeImpl(transaction, this.getLabel(), this.getScope(), this.isRoot());
        }
        toString() {
            return `${RoleTypeImpl.name}[label: ${this._scope ? `${this._scope}:${this.getLabel()}` : this.getLabel()}]`;
        }
    }
    exports.RoleTypeImpl = RoleTypeImpl;
    class RemoteRoleTypeImpl extends ThingTypeImpl_1.RemoteThingTypeImpl {
        constructor(transaction, label, scope, isRoot) {
            super(transaction, label, isRoot);
            this._scope = scope;
        }
        getSupertype() {
            throw "Not yet implemented";
        }
        getSupertypes() {
            throw "Not yet implemented";
        }
        getSubtypes() {
            throw "Not yet implemented";
        }
        getScope() {
            return this._scope;
        }
        asRemote(transaction) {
            return new RemoteRoleTypeImpl(transaction, this.getLabel(), this._scope, this.isRoot());
        }
        getRelation() {
            throw "Not yet implemented";
        }
        getRelations() {
            throw "Not yet implemented";
        }
        getPlayers() {
            throw "Not yet implemented";
        }
        toString() {
            return `${RemoteRoleTypeImpl.name}[label: ${this._scope ? `${this._scope}:${this.getLabel()}` : this.getLabel()}]`;
        }
    }
    exports.RemoteRoleTypeImpl = RemoteRoleTypeImpl;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm9sZVR5cGVJbXBsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vY29uY2VwdC9UeXBlL0ltcGwvUm9sZVR5cGVJbXBsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRzs7Ozs7Ozs7Ozs7OztJQUVILGdGQUFxRTtJQVFyRSxNQUFhLFlBQWEsU0FBUSw2QkFBYTtRQUczQyxZQUFzQixLQUFhLEVBQUUsS0FBYSxFQUFFLE1BQWU7WUFDL0QsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUN4QixDQUFDO1FBRUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFvQjtZQUMxQixPQUFPLElBQUksWUFBWSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDN0YsQ0FBQztRQUVELFFBQVE7WUFDSixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdkIsQ0FBQztRQUVELFFBQVEsQ0FBQyxXQUF3QjtZQUM3QixPQUFPLElBQUksa0JBQWtCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDaEcsQ0FBQztRQUVELFFBQVE7WUFDSixPQUFPLEdBQUcsWUFBWSxDQUFDLElBQUksV0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDO1FBQ2pILENBQUM7S0FDSjtJQXZCRCxvQ0F1QkM7SUFFRCxNQUFhLGtCQUFtQixTQUFRLG1DQUFtQjtRQUd2RCxZQUFZLFdBQXdCLEVBQUUsS0FBYSxFQUFFLEtBQWEsRUFBRSxNQUFlO1lBQy9FLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLENBQUM7UUFFRCxZQUFZO1lBQ1IsTUFBTSxxQkFBcUIsQ0FBQTtRQUMvQixDQUFDO1FBRUQsYUFBYTtZQUNULE1BQU0scUJBQXFCLENBQUM7UUFDaEMsQ0FBQztRQUVELFdBQVc7WUFDUCxNQUFNLHFCQUFxQixDQUFDO1FBQ2hDLENBQUM7UUFFRCxRQUFRO1lBQ0osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3ZCLENBQUM7UUFFRCxRQUFRLENBQUMsV0FBd0I7WUFDN0IsT0FBTyxJQUFJLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtRQUMzRixDQUFDO1FBRUQsV0FBVztZQUNQLE1BQU0scUJBQXFCLENBQUM7UUFDaEMsQ0FBQztRQUVELFlBQVk7WUFDUixNQUFNLHFCQUFxQixDQUFDO1FBQ2hDLENBQUM7UUFFRCxVQUFVO1lBQ04sTUFBTSxxQkFBcUIsQ0FBQztRQUNoQyxDQUFDO1FBRUQsUUFBUTtZQUNKLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLFdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztRQUN2SCxDQUFDO0tBQ0o7SUEzQ0QsZ0RBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFRoaW5nVHlwZUltcGwsIFJlbW90ZVRoaW5nVHlwZUltcGwgfSBmcm9tIFwiLi9UaGluZ1R5cGVJbXBsXCI7XG5pbXBvcnQgeyBSb2xlVHlwZSwgUmVtb3RlUm9sZVR5cGUgfSBmcm9tIFwiLi4vUm9sZVR5cGVcIjtcbmltcG9ydCB7IFR5cGUgYXMgVHlwZVByb3RvIH0gZnJvbSBcImdyYWtubGFicy1ncnBjLXByb3RvY29sL3Byb3RvYnVmL2NvbmNlcHRfcGJcIjtcbmltcG9ydCB7IEdyYWtuIH0gZnJvbSBcIi4uLy4uLy4uL0dyYWtuXCI7XG5pbXBvcnQgVHJhbnNhY3Rpb24gPSBHcmFrbi5UcmFuc2FjdGlvbjtcbmltcG9ydCB7IFJlbGF0aW9uVHlwZUltcGwgfSBmcm9tIFwiLi9SZWxhdGlvblR5cGVJbXBsXCI7XG5pbXBvcnQgeyBTdHJlYW0gfSBmcm9tIFwiLi4vLi4vLi4vcnBjL1N0cmVhbVwiO1xuXG5leHBvcnQgY2xhc3MgUm9sZVR5cGVJbXBsIGV4dGVuZHMgVGhpbmdUeXBlSW1wbCBpbXBsZW1lbnRzIFJvbGVUeXBlIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zY29wZTogc3RyaW5nO1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGxhYmVsOiBzdHJpbmcsIHNjb3BlOiBzdHJpbmcsIGlzUm9vdDogYm9vbGVhbikge1xuICAgICAgICBzdXBlcihsYWJlbCwgaXNSb290KTtcbiAgICAgICAgdGhpcy5fc2NvcGUgPSBzY29wZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgb2YodHlwZVByb3RvOiBUeXBlUHJvdG8pOiBSb2xlVHlwZUltcGwge1xuICAgICAgICByZXR1cm4gbmV3IFJvbGVUeXBlSW1wbCh0eXBlUHJvdG8uZ2V0TGFiZWwoKSwgdHlwZVByb3RvLmdldFNjb3BlKCksIHR5cGVQcm90by5nZXRSb290KCkpO1xuICAgIH1cblxuICAgIGdldFNjb3BlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY29wZTtcbiAgICB9XG5cbiAgICBhc1JlbW90ZSh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24pOiBSZW1vdGVSb2xlVHlwZSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVtb3RlUm9sZVR5cGVJbXBsKHRyYW5zYWN0aW9uLCB0aGlzLmdldExhYmVsKCksIHRoaXMuZ2V0U2NvcGUoKSwgdGhpcy5pc1Jvb3QoKSk7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke1JvbGVUeXBlSW1wbC5uYW1lfVtsYWJlbDogJHt0aGlzLl9zY29wZSA/IGAke3RoaXMuX3Njb3BlfToke3RoaXMuZ2V0TGFiZWwoKX1gIDogdGhpcy5nZXRMYWJlbCgpfV1gO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlbW90ZVJvbGVUeXBlSW1wbCBleHRlbmRzIFJlbW90ZVRoaW5nVHlwZUltcGwgaW1wbGVtZW50cyBSZW1vdGVSb2xlVHlwZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfc2NvcGU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiwgbGFiZWw6IHN0cmluZywgc2NvcGU6IHN0cmluZywgaXNSb290OiBib29sZWFuKSB7XG4gICAgICAgIHN1cGVyKHRyYW5zYWN0aW9uLCBsYWJlbCwgaXNSb290KTtcbiAgICAgICAgdGhpcy5fc2NvcGUgPSBzY29wZTtcbiAgICB9XG5cbiAgICBnZXRTdXBlcnR5cGUoKTogUm9sZVR5cGVJbXBsIHtcbiAgICAgICAgdGhyb3cgXCJOb3QgeWV0IGltcGxlbWVudGVkXCJcbiAgICB9XG5cbiAgICBnZXRTdXBlcnR5cGVzKCk6IFN0cmVhbTxhbnk+IHtcbiAgICAgICAgdGhyb3cgXCJOb3QgeWV0IGltcGxlbWVudGVkXCI7XG4gICAgfVxuXG4gICAgZ2V0U3VidHlwZXMoKTogU3RyZWFtPGFueT4ge1xuICAgICAgICB0aHJvdyBcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIjtcbiAgICB9XG5cbiAgICBnZXRTY29wZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2NvcGU7XG4gICAgfVxuXG4gICAgYXNSZW1vdGUodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogUmVtb3RlUm9sZVR5cGVJbXBsIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZW1vdGVSb2xlVHlwZUltcGwodHJhbnNhY3Rpb24sIHRoaXMuZ2V0TGFiZWwoKSwgdGhpcy5fc2NvcGUsIHRoaXMuaXNSb290KCkpXG4gICAgfVxuXG4gICAgZ2V0UmVsYXRpb24oKTogUmVsYXRpb25UeXBlSW1wbCB7XG4gICAgICAgIHRocm93IFwiTm90IHlldCBpbXBsZW1lbnRlZFwiO1xuICAgIH1cblxuICAgIGdldFJlbGF0aW9ucygpOiBTdHJlYW08YW55PiB7XG4gICAgICAgIHRocm93IFwiTm90IHlldCBpbXBsZW1lbnRlZFwiO1xuICAgIH1cblxuICAgIGdldFBsYXllcnMoKTogU3RyZWFtPGFueT4ge1xuICAgICAgICB0aHJvdyBcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIjtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7UmVtb3RlUm9sZVR5cGVJbXBsLm5hbWV9W2xhYmVsOiAke3RoaXMuX3Njb3BlID8gYCR7dGhpcy5fc2NvcGV9OiR7dGhpcy5nZXRMYWJlbCgpfWAgOiB0aGlzLmdldExhYmVsKCl9XWA7XG4gICAgfVxufVxuIl19