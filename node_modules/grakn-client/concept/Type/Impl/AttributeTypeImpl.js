/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/Type/Impl/AttributeTypeImpl", ["require", "exports", "grakn-client/concept/Type/Impl/ThingTypeImpl", "grakn-client/concept/Type/AttributeType", "graknlabs-grpc-protocol/protobuf/concept_pb", "assert"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteDateTimeAttributeTypeImpl = exports.DateTimeAttributeTypeImpl = exports.RemoteStringAttributeTypeImpl = exports.StringAttributeTypeImpl = exports.RemoteDoubleAttributeTypeImpl = exports.DoubleAttributeTypeImpl = exports.RemoteLongAttributeTypeImpl = exports.LongAttributeTypeImpl = exports.RemoteBooleanAttributeTypeImpl = exports.BooleanAttributeTypeImpl = exports.RemoteAttributeTypeImpl = exports.AttributeTypeImpl = void 0;
    const ThingTypeImpl_1 = require("grakn-client/concept/Type/Impl/ThingTypeImpl");
    const AttributeType_1 = require("grakn-client/concept/Type/AttributeType");
    const concept_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/concept_pb"));
    var ValueType = AttributeType_1.AttributeType.ValueType;
    var isKeyable = AttributeType_1.AttributeType.ValueType.isKeyable;
    const assert_1 = __importDefault(require("assert"));
    class AttributeTypeImpl extends ThingTypeImpl_1.ThingTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        static of(type) {
            switch (type.getValueType()) {
                case concept_pb_1.default.AttributeType.VALUE_TYPE.BOOLEAN:
                    return new BooleanAttributeTypeImpl(type.getLabel(), type.getRoot());
                case concept_pb_1.default.AttributeType.VALUE_TYPE.LONG:
                    return new LongAttributeTypeImpl(type.getLabel(), type.getRoot());
                case concept_pb_1.default.AttributeType.VALUE_TYPE.DOUBLE:
                    return new DoubleAttributeTypeImpl(type.getLabel(), type.getRoot());
                case concept_pb_1.default.AttributeType.VALUE_TYPE.STRING:
                    return new StringAttributeTypeImpl(type.getLabel(), type.getRoot());
                case concept_pb_1.default.AttributeType.VALUE_TYPE.DATETIME:
                    return new DateTimeAttributeTypeImpl(type.getLabel(), type.getRoot());
                case concept_pb_1.default.AttributeType.VALUE_TYPE.OBJECT:
                    assert_1.default(type.getRoot());
                    return new AttributeTypeImpl(type.getLabel(), type.getRoot());
                default:
                    throw "Bad value type";
            }
        }
        getValueType() {
            return ValueType.OBJECT;
        }
        isKeyable() {
            return isKeyable(this.getValueType());
        }
        asRemote(transaction) {
            return new RemoteAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.AttributeTypeImpl = AttributeTypeImpl;
    AttributeTypeImpl.ROOT_LABEL = "attribute";
    class RemoteAttributeTypeImpl extends ThingTypeImpl_1.RemoteThingTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        getValueType() {
            return ValueType.OBJECT;
        }
        isKeyable() {
            return isKeyable(this.getValueType());
        }
        asRemote(transaction) {
            return new RemoteAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
        setSupertype(type) {
            throw "Not implemented yet";
        }
        getSupertype() {
            throw "Not implemented yet";
        }
        getSupertypes() {
            throw "Not implemented yet";
        }
        getSubtypes() {
            throw "Not implemented yet";
        }
        getInstances() {
            throw "Not implemented yet";
        }
        getOwners(onlyKey) {
            throw "Not implemented yet";
        }
        putInternal(value) {
            throw "Not implemented yet";
        }
        getInternal(value) {
            throw "Not implemented yet";
        }
    }
    exports.RemoteAttributeTypeImpl = RemoteAttributeTypeImpl;
    class BooleanAttributeTypeImpl extends AttributeTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        getValueType() {
            return ValueType.BOOLEAN;
        }
        asRemote(transaction) {
            return new RemoteBooleanAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.BooleanAttributeTypeImpl = BooleanAttributeTypeImpl;
    class RemoteBooleanAttributeTypeImpl extends RemoteAttributeTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        getValueType() {
            return ValueType.BOOLEAN;
        }
        asRemote(transaction) {
            return new RemoteBooleanAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
        getSupertype() {
            throw "Not implemented yet";
        }
        getSupertypes() {
            throw "Not implemented yet";
        }
        getSubtypes() {
            throw "Not implemented yet";
        }
        getInstances() {
            throw "Not implemented yet";
        }
        setSupertype(type) {
            super.setSupertype(type);
        }
        put(value) {
            return this.putInternal(value);
        }
        get(value) {
            return this.getInternal(value);
        }
    }
    exports.RemoteBooleanAttributeTypeImpl = RemoteBooleanAttributeTypeImpl;
    class LongAttributeTypeImpl extends AttributeTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        getValueType() {
            return ValueType.LONG;
        }
        asRemote(transaction) {
            return new RemoteLongAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.LongAttributeTypeImpl = LongAttributeTypeImpl;
    class RemoteLongAttributeTypeImpl extends RemoteAttributeTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        getValueType() {
            return ValueType.LONG;
        }
        asRemote(transaction) {
            return new RemoteLongAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
        getSupertype() {
            throw "Not implemented yet";
        }
        getSupertypes() {
            throw "Not implemented yet";
        }
        getSubtypes() {
            throw "Not implemented yet";
        }
        getInstances() {
            throw "Not implemented yet";
        }
        setSupertype(type) {
            super.setSupertype(type);
        }
        put(value) {
            return this.putInternal(value);
        }
        get(value) {
            return this.getInternal(value);
        }
    }
    exports.RemoteLongAttributeTypeImpl = RemoteLongAttributeTypeImpl;
    class DoubleAttributeTypeImpl extends AttributeTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        getValueType() {
            return ValueType.DOUBLE;
        }
        asRemote(transaction) {
            return new RemoteDoubleAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.DoubleAttributeTypeImpl = DoubleAttributeTypeImpl;
    class RemoteDoubleAttributeTypeImpl extends RemoteAttributeTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        getValueType() {
            return ValueType.DOUBLE;
        }
        asRemote(transaction) {
            return new RemoteDoubleAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
        getSupertype() {
            throw "Not implemented yet";
        }
        getSupertypes() {
            throw "Not implemented yet";
        }
        getSubtypes() {
            throw "Not implemented yet";
        }
        getInstances() {
            throw "Not implemented yet";
        }
        setSupertype(type) {
            super.setSupertype(type);
        }
        put(value) {
            return this.putInternal(value);
        }
        get(value) {
            return this.getInternal(value);
        }
    }
    exports.RemoteDoubleAttributeTypeImpl = RemoteDoubleAttributeTypeImpl;
    class StringAttributeTypeImpl extends AttributeTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        getValueType() {
            return ValueType.STRING;
        }
        asRemote(transaction) {
            return new RemoteStringAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.StringAttributeTypeImpl = StringAttributeTypeImpl;
    class RemoteStringAttributeTypeImpl extends RemoteAttributeTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        getValueType() {
            return ValueType.STRING;
        }
        asRemote(transaction) {
            return new RemoteStringAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
        getSupertype() {
            throw "Not implemented yet";
        }
        getSupertypes() {
            throw "Not implemented yet";
        }
        getSubtypes() {
            throw "Not implemented yet";
        }
        getInstances() {
            throw "Not implemented yet";
        }
        setSupertype(type) {
            super.setSupertype(type);
        }
        put(value) {
            return this.putInternal(value);
        }
        get(value) {
            return this.getInternal(value);
        }
    }
    exports.RemoteStringAttributeTypeImpl = RemoteStringAttributeTypeImpl;
    class DateTimeAttributeTypeImpl extends AttributeTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        getValueType() {
            return ValueType.DATETIME;
        }
        asRemote(transaction) {
            return new RemoteDateTimeAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.DateTimeAttributeTypeImpl = DateTimeAttributeTypeImpl;
    class RemoteDateTimeAttributeTypeImpl extends RemoteAttributeTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        getValueType() {
            return ValueType.DATETIME;
        }
        asRemote(transaction) {
            return new RemoteDateTimeAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
        getSupertype() {
            throw "Not implemented yet";
        }
        getSupertypes() {
            throw "Not implemented yet";
        }
        getSubtypes() {
            throw "Not implemented yet";
        }
        getInstances() {
            throw "Not implemented yet";
        }
        setSupertype(type) {
            super.setSupertype(type);
        }
        put(value) {
            return this.putInternal(value);
        }
        get(value) {
            return this.getInternal(value);
        }
    }
    exports.RemoteDateTimeAttributeTypeImpl = RemoteDateTimeAttributeTypeImpl;
});
//# sourceMappingURL=data:application/json;base64,