/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/type/impl/AttributeTypeImpl", ["require", "exports", "grakn-client/dependencies_internal", "graknlabs-protocol/protobuf/concept_pb"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoteDateTimeAttributeTypeImpl = exports.DateTimeAttributeTypeImpl = exports.RemoteStringAttributeTypeImpl = exports.StringAttributeTypeImpl = exports.RemoteDoubleAttributeTypeImpl = exports.DoubleAttributeTypeImpl = exports.RemoteLongAttributeTypeImpl = exports.LongAttributeTypeImpl = exports.RemoteBooleanAttributeTypeImpl = exports.BooleanAttributeTypeImpl = exports.RemoteAttributeTypeImpl = exports.AttributeTypeImpl = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    const concept_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/concept_pb"));
    var ValueType = dependencies_internal_1.AttributeType.ValueType;
    var isKeyable = dependencies_internal_1.AttributeType.ValueType.isKeyable;
    class AttributeTypeImpl extends dependencies_internal_1.ThingTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        getValueType() {
            return ValueType.OBJECT;
        }
        isKeyable() {
            return isKeyable(this.getValueType());
        }
        asRemote(transaction) {
            return new RemoteAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.AttributeTypeImpl = AttributeTypeImpl;
    AttributeTypeImpl.ROOT_LABEL = "attribute";
    class RemoteAttributeTypeImpl extends dependencies_internal_1.RemoteThingTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        getValueType() {
            return ValueType.OBJECT;
        }
        isKeyable() {
            return isKeyable(this.getValueType());
        }
        setSupertype(attributeType) {
            return super.setSupertype(attributeType);
        }
        getSupertype() {
            return super.getSupertype();
        }
        getSupertypes() {
            return super.getSupertypes();
        }
        getSubtypes() {
            return super.getSubtypes();
        }
        getInstances() {
            return super.getInstances();
        }
        getOwners(onlyKey) {
            const method = new concept_pb_1.default.Type.Req()
                .setAttributeTypeGetOwnersReq(new concept_pb_1.default.AttributeType.GetOwners.Req().setOnlyKey(onlyKey || false));
            return this.typeStream(method, res => res.getAttributeTypeGetOwnersRes().getOwnerList());
        }
        putInternal(valueProto) {
            return __awaiter(this, void 0, void 0, function* () {
                const method = new concept_pb_1.default.Type.Req().setAttributeTypePutReq(new concept_pb_1.default.AttributeType.Put.Req().setValue(valueProto));
                return dependencies_internal_1.ConceptProtoReader.attribute(yield this.execute(method).then(res => res.getAttributeTypePutRes().getAttribute()));
            });
        }
        getInternal(valueProto) {
            return __awaiter(this, void 0, void 0, function* () {
                const method = new concept_pb_1.default.Type.Req().setAttributeTypeGetReq(new concept_pb_1.default.AttributeType.Get.Req().setValue(valueProto));
                const response = yield this.execute(method).then(res => res.getAttributeTypeGetRes());
                return response.getResCase() === concept_pb_1.default.AttributeType.Get.Res.ResCase.ATTRIBUTE ? dependencies_internal_1.ConceptProtoReader.attribute(response.getAttribute()) : null;
            });
        }
        asRemote(transaction) {
            return new RemoteAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.RemoteAttributeTypeImpl = RemoteAttributeTypeImpl;
    class BooleanAttributeTypeImpl extends AttributeTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        static of(typeProto) {
            return new BooleanAttributeTypeImpl(typeProto.getLabel(), typeProto.getRoot());
        }
        getValueType() {
            return ValueType.BOOLEAN;
        }
        asRemote(transaction) {
            return new RemoteBooleanAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.BooleanAttributeTypeImpl = BooleanAttributeTypeImpl;
    class RemoteBooleanAttributeTypeImpl extends RemoteAttributeTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        getValueType() {
            return ValueType.BOOLEAN;
        }
        asRemote(transaction) {
            return new RemoteBooleanAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
        getSupertype() {
            return super.getSupertype();
        }
        getSupertypes() {
            return super.getSupertypes();
        }
        getSubtypes() {
            return super.getSubtypes();
        }
        getInstances() {
            return super.getInstances();
        }
        setSupertype(type) {
            return super.setSupertype(type);
        }
        put(value) {
            return this.putInternal(dependencies_internal_1.ConceptProtoBuilder.booleanAttributeValue(value));
        }
        get(value) {
            return this.getInternal(dependencies_internal_1.ConceptProtoBuilder.booleanAttributeValue(value));
        }
    }
    exports.RemoteBooleanAttributeTypeImpl = RemoteBooleanAttributeTypeImpl;
    class LongAttributeTypeImpl extends AttributeTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        static of(typeProto) {
            return new LongAttributeTypeImpl(typeProto.getLabel(), typeProto.getRoot());
        }
        getValueType() {
            return ValueType.LONG;
        }
        asRemote(transaction) {
            return new RemoteLongAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.LongAttributeTypeImpl = LongAttributeTypeImpl;
    class RemoteLongAttributeTypeImpl extends RemoteAttributeTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        getValueType() {
            return ValueType.LONG;
        }
        asRemote(transaction) {
            return new RemoteLongAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
        getSupertype() {
            return super.getSupertype();
        }
        getSupertypes() {
            return super.getSupertypes();
        }
        getSubtypes() {
            return super.getSubtypes();
        }
        getInstances() {
            return super.getInstances();
        }
        setSupertype(type) {
            return super.setSupertype(type);
        }
        put(value) {
            return this.putInternal(dependencies_internal_1.ConceptProtoBuilder.longAttributeValue(value));
        }
        get(value) {
            return this.getInternal(dependencies_internal_1.ConceptProtoBuilder.longAttributeValue(value));
        }
    }
    exports.RemoteLongAttributeTypeImpl = RemoteLongAttributeTypeImpl;
    class DoubleAttributeTypeImpl extends AttributeTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        static of(typeProto) {
            return new DoubleAttributeTypeImpl(typeProto.getLabel(), typeProto.getRoot());
        }
        getValueType() {
            return ValueType.DOUBLE;
        }
        asRemote(transaction) {
            return new RemoteDoubleAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.DoubleAttributeTypeImpl = DoubleAttributeTypeImpl;
    class RemoteDoubleAttributeTypeImpl extends RemoteAttributeTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        getValueType() {
            return ValueType.DOUBLE;
        }
        asRemote(transaction) {
            return new RemoteDoubleAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
        getSupertype() {
            return super.getSupertype();
        }
        getSupertypes() {
            return super.getSupertypes();
        }
        getSubtypes() {
            return super.getSubtypes();
        }
        getInstances() {
            return super.getInstances();
        }
        setSupertype(type) {
            return super.setSupertype(type);
        }
        put(value) {
            return this.putInternal(dependencies_internal_1.ConceptProtoBuilder.doubleAttributeValue(value));
        }
        get(value) {
            return this.getInternal(dependencies_internal_1.ConceptProtoBuilder.doubleAttributeValue(value));
        }
    }
    exports.RemoteDoubleAttributeTypeImpl = RemoteDoubleAttributeTypeImpl;
    class StringAttributeTypeImpl extends AttributeTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        static of(typeProto) {
            return new StringAttributeTypeImpl(typeProto.getLabel(), typeProto.getRoot());
        }
        getValueType() {
            return ValueType.STRING;
        }
        asRemote(transaction) {
            return new RemoteStringAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.StringAttributeTypeImpl = StringAttributeTypeImpl;
    class RemoteStringAttributeTypeImpl extends RemoteAttributeTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        getValueType() {
            return ValueType.STRING;
        }
        asRemote(transaction) {
            return new RemoteStringAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
        getSupertype() {
            return super.getSupertype();
        }
        getSupertypes() {
            return super.getSupertypes();
        }
        getSubtypes() {
            return super.getSubtypes();
        }
        getInstances() {
            return super.getInstances();
        }
        setSupertype(type) {
            return super.setSupertype(type);
        }
        put(value) {
            return this.putInternal(dependencies_internal_1.ConceptProtoBuilder.stringAttributeValue(value));
        }
        get(value) {
            return this.getInternal(dependencies_internal_1.ConceptProtoBuilder.stringAttributeValue(value));
        }
    }
    exports.RemoteStringAttributeTypeImpl = RemoteStringAttributeTypeImpl;
    class DateTimeAttributeTypeImpl extends AttributeTypeImpl {
        constructor(label, isRoot) {
            super(label, isRoot);
        }
        static of(typeProto) {
            return new DateTimeAttributeTypeImpl(typeProto.getLabel(), typeProto.getRoot());
        }
        getValueType() {
            return ValueType.DATETIME;
        }
        asRemote(transaction) {
            return new RemoteDateTimeAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
    }
    exports.DateTimeAttributeTypeImpl = DateTimeAttributeTypeImpl;
    class RemoteDateTimeAttributeTypeImpl extends RemoteAttributeTypeImpl {
        constructor(transaction, label, isRoot) {
            super(transaction, label, isRoot);
        }
        getValueType() {
            return ValueType.DATETIME;
        }
        asRemote(transaction) {
            return new RemoteDateTimeAttributeTypeImpl(transaction, this.getLabel(), this.isRoot());
        }
        getSupertype() {
            return super.getSupertype();
        }
        getSupertypes() {
            return super.getSupertypes();
        }
        getSubtypes() {
            return super.getSubtypes();
        }
        getInstances() {
            return super.getInstances();
        }
        setSupertype(type) {
            return super.setSupertype(type);
        }
        put(value) {
            return this.putInternal(dependencies_internal_1.ConceptProtoBuilder.dateTimeAttributeValue(value));
        }
        get(value) {
            return this.getInternal(dependencies_internal_1.ConceptProtoBuilder.dateTimeAttributeValue(value));
        }
    }
    exports.RemoteDateTimeAttributeTypeImpl = RemoteDateTimeAttributeTypeImpl;
});
//# sourceMappingURL=data:application/json;base64,