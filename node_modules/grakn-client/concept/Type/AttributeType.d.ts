/// <amd-module name="grakn-client/concept/Type/AttributeType" />
import { RemoteThingType, ThingType } from "./ThingType";
import { Grakn } from "../../Grakn";
import Transaction = Grakn.Transaction;
import { BooleanAttribute, DateTimeAttribute, DoubleAttribute, LongAttribute, StringAttribute } from "../Thing/Attribute";
import ValueType = AttributeType.ValueType;
import { Merge } from "../../common/utils";
import { Stream } from "../../rpc/Stream";
import ConceptProto from "graknlabs-grpc-protocol/protobuf/concept_pb";
export interface AttributeType extends ThingType {
    getValueType(): ValueType;
    isKeyable(): boolean;
    asRemote(transaction: Transaction): RemoteAttributeType;
}
export interface RemoteAttributeType extends Merge<RemoteThingType, AttributeType> {
    asRemote(transaction: Transaction): RemoteAttributeType;
    setSupertype(type: AttributeType): void;
    getSupertype(): AttributeType;
    getSupertypes(): Stream<any>;
    getSubtypes(): Stream<any>;
    getInstances(): Stream<any>;
    getOwners(): Stream<any>;
    getOwners(onlyKey: boolean): Stream<any>;
}
export interface BooleanAttributeType extends AttributeType {
    asRemote(transaction: Transaction): RemoteBooleanAttributeType;
}
export interface RemoteBooleanAttributeType extends Merge<RemoteAttributeType, BooleanAttributeType> {
    asRemote(transaction: Transaction): RemoteBooleanAttributeType;
    setSupertype(type: BooleanAttributeType): void;
    getSupertype(): BooleanAttributeType;
    getSupertypes(): Stream<any>;
    getSubtypes(): Stream<any>;
    getInstances(): Stream<any>;
    put(value: boolean): BooleanAttribute;
    get(value: boolean): BooleanAttribute;
}
export interface LongAttributeType extends AttributeType {
    asRemote(transaction: Transaction): RemoteLongAttributeType;
}
export interface RemoteLongAttributeType extends Merge<RemoteAttributeType, LongAttributeType> {
    asRemote(transaction: Transaction): RemoteLongAttributeType;
    setSupertype(type: LongAttributeType): void;
    getSupertype(): LongAttributeType;
    getSupertypes(): Stream<any>;
    getSubtypes(): Stream<any>;
    getInstances(): Stream<any>;
    put(value: number): LongAttribute;
    get(value: number): LongAttribute;
}
export interface DoubleAttributeType extends AttributeType {
    asRemote(transaction: Transaction): RemoteDoubleAttributeType;
}
export interface RemoteDoubleAttributeType extends Merge<RemoteAttributeType, DoubleAttributeType> {
    asRemote(transaction: Transaction): RemoteDoubleAttributeType;
    setSupertype(type: DoubleAttributeType): void;
    getSupertype(): DoubleAttributeType;
    getSupertypes(): Stream<any>;
    getSubtypes(): Stream<any>;
    getInstances(): Stream<any>;
    put(value: number): DoubleAttribute;
    get(value: number): DoubleAttribute;
}
export interface StringAttributeType extends AttributeType {
    asRemote(transaction: Transaction): RemoteStringAttributeType;
}
export interface RemoteStringAttributeType extends Merge<RemoteAttributeType, StringAttributeType> {
    asRemote(transaction: Transaction): RemoteStringAttributeType;
    setSupertype(type: StringAttributeType): void;
    getSupertype(): StringAttributeType;
    getSupertypes(): Stream<any>;
    getSubtypes(): Stream<any>;
    getInstances(): Stream<any>;
    put(value: string): StringAttribute;
    get(value: string): StringAttribute;
}
export interface DateTimeAttributeType extends AttributeType {
    asRemote(transaction: Transaction): RemoteDateTimeAttributeType;
}
export interface RemoteDateTimeAttributeType extends Merge<RemoteAttributeType, DateTimeAttributeType> {
    asRemote(transaction: Transaction): RemoteDateTimeAttributeType;
    setSupertype(type: DateTimeAttributeType): void;
    getSupertype(): DateTimeAttributeType;
    getSupertypes(): Stream<any>;
    getSubtypes(): Stream<any>;
    getInstances(): Stream<any>;
    put(value: Date): DateTimeAttribute;
    get(value: Date): DateTimeAttribute;
}
export declare namespace AttributeType {
    enum ValueType {
        OBJECT = 0,
        BOOLEAN = 1,
        LONG = 2,
        DOUBLE = 3,
        STRING = 4,
        DATETIME = 5
    }
    namespace ValueType {
        function of(valueType: ConceptProto.AttributeType.VALUE_TYPE): ValueType;
        function isKeyable(valueType: ValueType): boolean;
        function isWritable(valueType: ValueType): boolean;
    }
    type ValueClass = number | string | boolean | Date;
}
