/// <amd-module name="grakn-client/concept/ConceptManager" />
import { ThingType } from "./Type/ThingType";
import { EntityType } from "./Type/EntityType";
import { RelationType } from "./Type/RelationType";
import { AttributeType } from "./Type/AttributeType";
import { Type } from "./Type/Type";
import { Rule } from "./Type/Rule";
import { RPCTransaction } from "../rpc/RPCTransaction";
import { Thing } from "./Thing/Thing";
export declare class ConceptManager {
    private readonly _rpcTransaction;
    constructor(rpcTransaction: RPCTransaction);
    getRootThingType(): Promise<ThingType>;
    getRootEntityType(): Promise<EntityType>;
    getRootRelationType(): Promise<RelationType>;
    getRootAttributeType(): Promise<AttributeType>;
    putEntityType(label: string): Promise<EntityType>;
    getEntityType(label: string): EntityType | null;
    putRelationType(label: string): Promise<RelationType>;
    getRelationType(label: string): RelationType | null;
    putAttributeType(label: string): Promise<AttributeType>;
    getAttributeType(label: string): AttributeType | null;
    putRule(label: string, when: string, then: string): Promise<Rule>;
    getThing(iid: string): Promise<Thing | null>;
    getType(label: string): Promise<Type | null>;
    getRule(label: string): Promise<Rule | null>;
    private execute;
}
