/// <amd-module name="grakn-client/concept/schema/impl/RuleImpl" />
import { RemoteRule, Rule, Grakn, RPCTransaction } from "../../../dependencies_internal";
import ConceptProto from "graknlabs-grpc-protocol/protobuf/concept_pb";
import Transaction = Grakn.Transaction;
export declare class RuleImpl implements Rule {
    private readonly _label;
    private readonly _when;
    private readonly _then;
    protected constructor(label: string, when: string, then: string);
    static of(ruleProto: ConceptProto.Rule): RuleImpl;
    getLabel(): string;
    getThen(): string;
    getWhen(): string;
    asRemote(transaction: Transaction): RemoteRule;
    isRemote(): boolean;
    toString(): string;
}
export declare class RemoteRuleImpl implements RemoteRule {
    private _label;
    private readonly _when;
    private readonly _then;
    private readonly _rpcTransaction;
    constructor(transaction: Transaction, label: string, when: string, then: string);
    getLabel(): string;
    getThen(): string;
    getWhen(): string;
    setLabel(label: string): Promise<void>;
    delete(): Promise<void>;
    isDeleted(): Promise<boolean>;
    asRemote(transaction: Transaction): RemoteRule;
    isRemote(): boolean;
    protected execute(method: ConceptProto.Rule.Req): Promise<ConceptProto.Rule.Res>;
    protected get rpcTransaction(): RPCTransaction;
}
