/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/proto/ConceptProtoReader", ["require", "exports", "graknlabs-grpc-protocol/protobuf/concept_pb", "assert", "grakn-client/dependencies_internal"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConceptProtoReader = void 0;
    // TODO: Can we get rid of this?
    const concept_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/concept_pb"));
    const assert_1 = __importDefault(require("assert"));
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    var ConceptProtoReader;
    (function (ConceptProtoReader) {
        // This method cannot live in ThingImpl itself, because doing so creates a circular class reference
        // [ThingImpl -> EntityImpl -> ThingImpl] which causes a JavaScript runtime error
        function thing(thingProto) {
            switch (thingProto.getEncoding()) {
                case concept_pb_1.default.Thing.ENCODING.ENTITY:
                    return dependencies_internal_1.EntityImpl.of(thingProto);
                case concept_pb_1.default.Thing.ENCODING.RELATION:
                    return dependencies_internal_1.RelationImpl.of(thingProto);
                case concept_pb_1.default.Thing.ENCODING.ATTRIBUTE:
                    return attribute(thingProto);
                default:
                    throw "Bad encoding";
            }
        }
        ConceptProtoReader.thing = thing;
        function attribute(thingProto) {
            switch (thingProto.getValueType()) {
                case concept_pb_1.default.AttributeType.VALUE_TYPE.BOOLEAN:
                    return dependencies_internal_1.BooleanAttributeImpl.of(thingProto);
                case concept_pb_1.default.AttributeType.VALUE_TYPE.LONG:
                    return dependencies_internal_1.LongAttributeImpl.of(thingProto);
                case concept_pb_1.default.AttributeType.VALUE_TYPE.DOUBLE:
                    return dependencies_internal_1.DoubleAttributeImpl.of(thingProto);
                case concept_pb_1.default.AttributeType.VALUE_TYPE.STRING:
                    return dependencies_internal_1.StringAttributeImpl.of(thingProto);
                case concept_pb_1.default.AttributeType.VALUE_TYPE.DATETIME:
                    return dependencies_internal_1.DateTimeAttributeImpl.of(thingProto);
                default:
                    throw "Bad value type";
            }
        }
        ConceptProtoReader.attribute = attribute;
        function type(typeProto) {
            switch (typeProto.getEncoding()) {
                case concept_pb_1.default.Type.ENCODING.ROLE_TYPE:
                    return dependencies_internal_1.RoleTypeImpl.of(typeProto);
                default:
                    return thingType(typeProto);
            }
        }
        ConceptProtoReader.type = type;
        function thingType(typeProto) {
            switch (typeProto.getEncoding()) {
                case concept_pb_1.default.Type.ENCODING.ENTITY_TYPE:
                    return dependencies_internal_1.EntityTypeImpl.of(typeProto);
                case concept_pb_1.default.Type.ENCODING.RELATION_TYPE:
                    return dependencies_internal_1.RelationTypeImpl.of(typeProto);
                case concept_pb_1.default.Type.ENCODING.ATTRIBUTE_TYPE:
                    return attributeType(typeProto);
                case concept_pb_1.default.Type.ENCODING.THING_TYPE:
                    assert_1.default(typeProto.getRoot());
                    return new dependencies_internal_1.ThingTypeImpl(typeProto.getLabel(), typeProto.getRoot());
                default:
                    throw "Bad encoding";
            }
        }
        ConceptProtoReader.thingType = thingType;
        function attributeType(typeProto) {
            switch (typeProto.getValueType()) {
                case concept_pb_1.default.AttributeType.VALUE_TYPE.BOOLEAN:
                    return new dependencies_internal_1.BooleanAttributeTypeImpl(typeProto.getLabel(), typeProto.getRoot());
                case concept_pb_1.default.AttributeType.VALUE_TYPE.LONG:
                    return new dependencies_internal_1.LongAttributeTypeImpl(typeProto.getLabel(), typeProto.getRoot());
                case concept_pb_1.default.AttributeType.VALUE_TYPE.DOUBLE:
                    return new dependencies_internal_1.DoubleAttributeTypeImpl(typeProto.getLabel(), typeProto.getRoot());
                case concept_pb_1.default.AttributeType.VALUE_TYPE.STRING:
                    return new dependencies_internal_1.StringAttributeTypeImpl(typeProto.getLabel(), typeProto.getRoot());
                case concept_pb_1.default.AttributeType.VALUE_TYPE.DATETIME:
                    return new dependencies_internal_1.DateTimeAttributeTypeImpl(typeProto.getLabel(), typeProto.getRoot());
                case concept_pb_1.default.AttributeType.VALUE_TYPE.OBJECT:
                    assert_1.default(typeProto.getRoot());
                    return new dependencies_internal_1.AttributeTypeImpl(typeProto.getLabel(), typeProto.getRoot());
                default:
                    throw "Bad value type";
            }
        }
        ConceptProtoReader.attributeType = attributeType;
    })(ConceptProtoReader = exports.ConceptProtoReader || (exports.ConceptProtoReader = {}));
});
//# sourceMappingURL=data:application/json;base64,