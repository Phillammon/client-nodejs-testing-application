/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/proto/ConceptProtoBuilder", ["require", "exports", "graknlabs-protocol/protobuf/concept_pb", "grakn-client/dependencies_internal"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConceptProtoBuilder = void 0;
    // TODO: Can we get rid of this?
    const concept_pb_1 = __importDefault(require("graknlabs-protocol/protobuf/concept_pb"));
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    var ConceptProtoBuilder;
    (function (ConceptProtoBuilder) {
        function thing(thing) {
            return new concept_pb_1.default.Thing()
                .setIid(thing.getIID())
                .setEncoding(thingEncoding(thing));
        }
        ConceptProtoBuilder.thing = thing;
        function type(type) {
            const typeProto = new concept_pb_1.default.Type()
                .setLabel(type.getLabel())
                .setEncoding(typeEncoding(type));
            if (type instanceof dependencies_internal_1.RoleTypeImpl) {
                typeProto.setScope(type.getScope());
            }
            return typeProto;
        }
        ConceptProtoBuilder.type = type;
        function types(types) {
            return types.map(type);
        }
        ConceptProtoBuilder.types = types;
        // The 'attributeValue' functions are split up like this to avoid ambiguity between Long and Double
        function booleanAttributeValue(value) {
            return new concept_pb_1.default.Attribute.Value().setBoolean(value);
        }
        ConceptProtoBuilder.booleanAttributeValue = booleanAttributeValue;
        function longAttributeValue(value) {
            return new concept_pb_1.default.Attribute.Value().setLong(value);
        }
        ConceptProtoBuilder.longAttributeValue = longAttributeValue;
        function doubleAttributeValue(value) {
            return new concept_pb_1.default.Attribute.Value().setDouble(value);
        }
        ConceptProtoBuilder.doubleAttributeValue = doubleAttributeValue;
        function stringAttributeValue(value) {
            return new concept_pb_1.default.Attribute.Value().setString(value);
        }
        ConceptProtoBuilder.stringAttributeValue = stringAttributeValue;
        function dateTimeAttributeValue(value) {
            return new concept_pb_1.default.Attribute.Value().setDateTime(value.getTime());
        }
        ConceptProtoBuilder.dateTimeAttributeValue = dateTimeAttributeValue;
        function valueType(valueType) {
            switch (valueType) {
                case dependencies_internal_1.AttributeType.ValueType.OBJECT:
                    return concept_pb_1.default.AttributeType.VALUE_TYPE.OBJECT;
                case dependencies_internal_1.AttributeType.ValueType.BOOLEAN:
                    return concept_pb_1.default.AttributeType.VALUE_TYPE.BOOLEAN;
                case dependencies_internal_1.AttributeType.ValueType.LONG:
                    return concept_pb_1.default.AttributeType.VALUE_TYPE.LONG;
                case dependencies_internal_1.AttributeType.ValueType.DOUBLE:
                    return concept_pb_1.default.AttributeType.VALUE_TYPE.DOUBLE;
                case dependencies_internal_1.AttributeType.ValueType.STRING:
                    return concept_pb_1.default.AttributeType.VALUE_TYPE.STRING;
                case dependencies_internal_1.AttributeType.ValueType.DATETIME:
                    return concept_pb_1.default.AttributeType.VALUE_TYPE.DATETIME;
            }
        }
        ConceptProtoBuilder.valueType = valueType;
        function thingEncoding(thing) {
            if (thing instanceof dependencies_internal_1.EntityImpl) {
                return concept_pb_1.default.Thing.ENCODING.ENTITY;
            }
            else if (thing instanceof dependencies_internal_1.RelationImpl) {
                return concept_pb_1.default.Thing.ENCODING.RELATION;
            }
            else if (thing instanceof dependencies_internal_1.AttributeImpl) {
                return concept_pb_1.default.Thing.ENCODING.ATTRIBUTE;
            }
            else {
                throw new dependencies_internal_1.GraknClientError(dependencies_internal_1.ErrorMessage.Concept.BAD_ENCODING.message(thing));
            }
        }
        ConceptProtoBuilder.thingEncoding = thingEncoding;
        function typeEncoding(type) {
            if (type instanceof dependencies_internal_1.EntityTypeImpl) {
                return concept_pb_1.default.Type.ENCODING.ENTITY_TYPE;
            }
            else if (type instanceof dependencies_internal_1.RelationTypeImpl) {
                return concept_pb_1.default.Type.ENCODING.RELATION_TYPE;
            }
            else if (type instanceof dependencies_internal_1.AttributeTypeImpl) {
                return concept_pb_1.default.Type.ENCODING.ATTRIBUTE_TYPE;
            }
            else if (type instanceof dependencies_internal_1.RoleTypeImpl) {
                return concept_pb_1.default.Type.ENCODING.ROLE_TYPE;
            }
            else if (type instanceof dependencies_internal_1.ThingTypeImpl) {
                return concept_pb_1.default.Type.ENCODING.THING_TYPE;
            }
            else {
                throw new dependencies_internal_1.GraknClientError(dependencies_internal_1.ErrorMessage.Concept.BAD_ENCODING.message(type));
            }
        }
        ConceptProtoBuilder.typeEncoding = typeEncoding;
    })(ConceptProtoBuilder = exports.ConceptProtoBuilder || (exports.ConceptProtoBuilder = {}));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uY2VwdFByb3RvQnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NvbmNlcHQvcHJvdG8vQ29uY2VwdFByb3RvQnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFSCxnQ0FBZ0M7SUFFaEMsd0ZBQWtFO0lBQ2xFLDhFQVlxQztJQUVyQyxJQUFpQixtQkFBbUIsQ0F5Rm5DO0lBekZELFdBQWlCLG1CQUFtQjtRQUVoQyxTQUFnQixLQUFLLENBQUMsS0FBWTtZQUM5QixPQUFPLElBQUksb0JBQVksQ0FBQyxLQUFLLEVBQUU7aUJBQzFCLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7aUJBQ3RCLFdBQVcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMzQyxDQUFDO1FBSmUseUJBQUssUUFJcEIsQ0FBQTtRQUVELFNBQWdCLElBQUksQ0FBQyxJQUFVO1lBQzNCLE1BQU0sU0FBUyxHQUFHLElBQUksb0JBQVksQ0FBQyxJQUFJLEVBQUU7aUJBQ3BDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7aUJBQ3pCLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUVyQyxJQUFJLElBQUksWUFBWSxvQ0FBWSxFQUFFO2dCQUM5QixTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2FBQ3ZDO1lBRUQsT0FBTyxTQUFTLENBQUM7UUFDckIsQ0FBQztRQVZlLHdCQUFJLE9BVW5CLENBQUE7UUFFRCxTQUFnQixLQUFLLENBQUMsS0FBYTtZQUMvQixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsQ0FBQztRQUZlLHlCQUFLLFFBRXBCLENBQUE7UUFFRCxtR0FBbUc7UUFDbkcsU0FBZ0Is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SUFBSSxJQUFJLFlBQVksc0NBQWMsRUFBRTtnQkFDaEMsT0FBTyxvQkFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO2FBQ2pEO2lCQUFNLElBQUksSUFBSSxZQUFZLHdDQUFnQixFQUFFO2dCQUN6QyxPQUFPLG9CQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7YUFDbkQ7aUJBQU0sSUFBSSxJQUFJLFlBQVkseUNBQWlCLEVBQUU7Z0JBQzFDLE9BQU8sb0JBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQzthQUNwRDtpQkFBTSxJQUFJLElBQUksWUFBWSxvQ0FBWSxFQUFFO2dCQUNyQyxPQUFPLG9CQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7YUFDL0M7aUJBQU0sSUFBSSxJQUFJLFlBQVkscUNBQWEsRUFBRTtnQkFDdEMsT0FBTyxvQkFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDO2FBQ2hEO2lCQUFNO2dCQUNILE1BQU0sSUFBSSx3Q0FBZ0IsQ0FBQyxvQ0FBWSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7YUFDOUU7UUFDTCxDQUFDO1FBZGUsZ0NBQVksZUFjM0IsQ0FBQTtJQUNMLENBQUMsRUF6RmdCLG1CQUFtQixHQUFuQiwyQkFBbUIsS0FBbkIsMkJBQW1CLFFBeUZuQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBUT0RPOiBDYW4gd2UgZ2V0IHJpZCBvZiB0aGlzP1xuXG5pbXBvcnQgQ29uY2VwdFByb3RvIGZyb20gXCJncmFrbmxhYnMtcHJvdG9jb2wvcHJvdG9idWYvY29uY2VwdF9wYlwiO1xuaW1wb3J0IHtcbiAgICBUeXBlLFxuICAgIFRoaW5nLFxuICAgIEF0dHJpYnV0ZVR5cGUsXG4gICAgUm9sZVR5cGVJbXBsLFxuICAgIEVudGl0eUltcGwsXG4gICAgUmVsYXRpb25JbXBsLFxuICAgIEF0dHJpYnV0ZUltcGwsXG4gICAgRW50aXR5VHlwZUltcGwsXG4gICAgUmVsYXRpb25UeXBlSW1wbCxcbiAgICBBdHRyaWJ1dGVUeXBlSW1wbCxcbiAgICBUaGluZ1R5cGVJbXBsLCBHcmFrbkNsaWVudEVycm9yLCBFcnJvck1lc3NhZ2UsXG59IGZyb20gXCIuLi8uLi9kZXBlbmRlbmNpZXNfaW50ZXJuYWxcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBDb25jZXB0UHJvdG9CdWlsZGVyIHtcblxuICAgIGV4cG9ydCBmdW5jdGlvbiB0aGluZyh0aGluZzogVGhpbmcpOiBDb25jZXB0UHJvdG8uVGhpbmcge1xuICAgICAgICByZXR1cm4gbmV3IENvbmNlcHRQcm90by5UaGluZygpXG4gICAgICAgICAgICAuc2V0SWlkKHRoaW5nLmdldElJRCgpKVxuICAgICAgICAgICAgLnNldEVuY29kaW5nKHRoaW5nRW5jb2RpbmcodGhpbmcpKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gdHlwZSh0eXBlOiBUeXBlKTogQ29uY2VwdFByb3RvLlR5cGUge1xuICAgICAgICBjb25zdCB0eXBlUHJvdG8gPSBuZXcgQ29uY2VwdFByb3RvLlR5cGUoKVxuICAgICAgICAgICAgLnNldExhYmVsKHR5cGUuZ2V0TGFiZWwoKSlcbiAgICAgICAgICAgIC5zZXRFbmNvZGluZyh0eXBlRW5jb2RpbmcodHlwZSkpO1xuXG4gICAgICAgIGlmICh0eXBlIGluc3RhbmNlb2YgUm9sZVR5cGVJbXBsKSB7XG4gICAgICAgICAgICB0eXBlUHJvdG8uc2V0U2NvcGUodHlwZS5nZXRTY29wZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0eXBlUHJvdG87XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHR5cGVzKHR5cGVzOiBUeXBlW10pOiBDb25jZXB0UHJvdG8uVHlwZVtdIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzLm1hcCh0eXBlKTtcbiAgICB9XG5cbiAgICAvLyBUaGUgJ2F0dHJpYnV0ZVZhbHVlJyBmdW5jdGlvbnMgYXJlIHNwbGl0IHVwIGxpa2UgdGhpcyB0byBhdm9pZCBhbWJpZ3VpdHkgYmV0d2VlbiBMb25nIGFuZCBEb3VibGVcbiAgICBleHBvcnQgZnVuY3Rpb24gYm9vbGVhbkF0dHJpYnV0ZVZhbHVlKHZhbHVlOiBib29sZWFuKTogQ29uY2VwdFByb3RvLkF0dHJpYnV0ZS5WYWx1ZSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29uY2VwdFByb3RvLkF0dHJpYnV0ZS5WYWx1ZSgpLnNldEJvb2xlYW4odmFsdWUpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBsb25nQXR0cmlidXRlVmFsdWUodmFsdWU6IG51bWJlcik6IENvbmNlcHRQcm90by5BdHRyaWJ1dGUuVmFsdWUge1xuICAgICAgICByZXR1cm4gbmV3IENvbmNlcHRQcm90by5BdHRyaWJ1dGUuVmFsdWUoKS5zZXRMb25nKHZhbHVlKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gZG91YmxlQXR0cmlidXRlVmFsdWUodmFsdWU6IG51bWJlcik6IENvbmNlcHRQcm90by5BdHRyaWJ1dGUuVmFsdWUge1xuICAgICAgICByZXR1cm4gbmV3IENvbmNlcHRQcm90by5BdHRyaWJ1dGUuVmFsdWUoKS5zZXREb3VibGUodmFsdWUpO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBzdHJpbmdBdHRyaWJ1dGVWYWx1ZSh2YWx1ZTogc3RyaW5nKTogQ29uY2VwdFByb3RvLkF0dHJpYnV0ZS5WYWx1ZSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29uY2VwdFByb3RvLkF0dHJpYnV0ZS5WYWx1ZSgpLnNldFN0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRhdGVUaW1lQXR0cmlidXRlVmFsdWUodmFsdWU6IERhdGUpOiBDb25jZXB0UHJvdG8uQXR0cmlidXRlLlZhbHVlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb25jZXB0UHJvdG8uQXR0cmlidXRlLlZhbHVlKCkuc2V0RGF0ZVRpbWUodmFsdWUuZ2V0VGltZSgpKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gdmFsdWVUeXBlKHZhbHVlVHlwZTogQXR0cmlidXRlVHlwZS5WYWx1ZVR5cGUpOiBDb25jZXB0UHJvdG8uQXR0cmlidXRlVHlwZS5WQUxVRV9UWVBFIHtcbiAgICAgICAgc3dpdGNoICh2YWx1ZVR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5WYWx1ZVR5cGUuT0JKRUNUOlxuICAgICAgICAgICAgICAgIHJldHVybiBDb25jZXB0UHJvdG8uQXR0cmlidXRlVHlwZS5WQUxVRV9UWVBFLk9CSkVDVDtcbiAgICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5WYWx1ZVR5cGUuQk9PTEVBTjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29uY2VwdFByb3RvLkF0dHJpYnV0ZVR5cGUuVkFMVUVfVFlQRS5CT09MRUFOO1xuICAgICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLlZhbHVlVHlwZS5MT05HOlxuICAgICAgICAgICAgICAgIHJldHVybiBDb25jZXB0UHJvdG8uQXR0cmlidXRlVHlwZS5WQUxVRV9UWVBFLkxPTkc7XG4gICAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVmFsdWVUeXBlLkRPVUJMRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29uY2VwdFByb3RvLkF0dHJpYnV0ZVR5cGUuVkFMVUVfVFlQRS5ET1VCTEU7XG4gICAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVmFsdWVUeXBlLlNUUklORzpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29uY2VwdFByb3RvLkF0dHJpYnV0ZVR5cGUuVkFMVUVfVFlQRS5TVFJJTkc7XG4gICAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUuVmFsdWVUeXBlLkRBVEVUSU1FOlxuICAgICAgICAgICAgICAgIHJldHVybiBDb25jZXB0UHJvdG8uQXR0cmlidXRlVHlwZS5WQUxVRV9UWVBFLkRBVEVUSU1FO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHRoaW5nRW5jb2RpbmcodGhpbmc6IFRoaW5nKTogQ29uY2VwdFByb3RvLlRoaW5nLkVOQ09ESU5HIHtcbiAgICAgICAgaWYgKHRoaW5nIGluc3RhbmNlb2YgRW50aXR5SW1wbCkge1xuICAgICAgICAgICAgcmV0dXJuIENvbmNlcHRQcm90by5UaGluZy5FTkNPRElORy5FTlRJVFk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpbmcgaW5zdGFuY2VvZiBSZWxhdGlvbkltcGwpIHtcbiAgICAgICAgICAgIHJldHVybiBDb25jZXB0UHJvdG8uVGhpbmcuRU5DT0RJTkcuUkVMQVRJT047XG4gICAgICAgIH0gZWxzZSBpZiAodGhpbmcgaW5zdGFuY2VvZiBBdHRyaWJ1dGVJbXBsKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29uY2VwdFByb3RvLlRoaW5nLkVOQ09ESU5HLkFUVFJJQlVURTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBHcmFrbkNsaWVudEVycm9yKEVycm9yTWVzc2FnZS5Db25jZXB0LkJBRF9FTkNPRElORy5tZXNzYWdlKHRoaW5nKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiB0eXBlRW5jb2RpbmcodHlwZTogVHlwZSk6IENvbmNlcHRQcm90by5UeXBlLkVOQ09ESU5HIHtcbiAgICAgICAgaWYgKHR5cGUgaW5zdGFuY2VvZiBFbnRpdHlUeXBlSW1wbCkge1xuICAgICAgICAgICAgcmV0dXJuIENvbmNlcHRQcm90by5UeXBlLkVOQ09ESU5HLkVOVElUWV9UWVBFO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBSZWxhdGlvblR5cGVJbXBsKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29uY2VwdFByb3RvLlR5cGUuRU5DT0RJTkcuUkVMQVRJT05fVFlQRTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgQXR0cmlidXRlVHlwZUltcGwpIHtcbiAgICAgICAgICAgIHJldHVybiBDb25jZXB0UHJvdG8uVHlwZS5FTkNPRElORy5BVFRSSUJVVEVfVFlQRTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgUm9sZVR5cGVJbXBsKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29uY2VwdFByb3RvLlR5cGUuRU5DT0RJTkcuUk9MRV9UWVBFO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBUaGluZ1R5cGVJbXBsKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29uY2VwdFByb3RvLlR5cGUuRU5DT0RJTkcuVEhJTkdfVFlQRTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBHcmFrbkNsaWVudEVycm9yKEVycm9yTWVzc2FnZS5Db25jZXB0LkJBRF9FTkNPRElORy5tZXNzYWdlKHR5cGUpKVxuICAgICAgICB9XG4gICAgfVxufVxuIl19