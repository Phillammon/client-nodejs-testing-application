/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/concept/proto/ConceptProtoBuilder", ["require", "exports", "graknlabs-grpc-protocol/protobuf/concept_pb", "grakn-client/dependencies_internal"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConceptProtoBuilder = void 0;
    // TODO: Can we get rid of this?
    const concept_pb_1 = __importDefault(require("graknlabs-grpc-protocol/protobuf/concept_pb"));
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    var ConceptProtoBuilder;
    (function (ConceptProtoBuilder) {
        function thing(thing) {
            return new concept_pb_1.default.Thing()
                .setIid(thing.getIID())
                .setEncoding(thingEncoding(thing));
        }
        ConceptProtoBuilder.thing = thing;
        function type(type) {
            const typeProto = new concept_pb_1.default.Type()
                .setLabel(type.getLabel())
                .setEncoding(typeEncoding(type));
            if (type instanceof dependencies_internal_1.RoleTypeImpl) {
                typeProto.setScope(type.getScope());
            }
            return typeProto;
        }
        ConceptProtoBuilder.type = type;
        function types(types) {
            return types.map(type);
        }
        ConceptProtoBuilder.types = types;
        // The 'attributeValue' functions are split up like this to avoid ambiguity between Long and Double
        function booleanAttributeValue(value) {
            return new concept_pb_1.default.Attribute.Value().setBoolean(value);
        }
        ConceptProtoBuilder.booleanAttributeValue = booleanAttributeValue;
        function longAttributeValue(value) {
            return new concept_pb_1.default.Attribute.Value().setLong(value);
        }
        ConceptProtoBuilder.longAttributeValue = longAttributeValue;
        function doubleAttributeValue(value) {
            return new concept_pb_1.default.Attribute.Value().setDouble(value);
        }
        ConceptProtoBuilder.doubleAttributeValue = doubleAttributeValue;
        function stringAttributeValue(value) {
            return new concept_pb_1.default.Attribute.Value().setString(value);
        }
        ConceptProtoBuilder.stringAttributeValue = stringAttributeValue;
        function dateTimeAttributeValue(value) {
            return new concept_pb_1.default.Attribute.Value().setDateTime(value.getTime());
        }
        ConceptProtoBuilder.dateTimeAttributeValue = dateTimeAttributeValue;
        function valueType(valueType) {
            switch (valueType) {
                case dependencies_internal_1.AttributeType.ValueType.OBJECT:
                    return concept_pb_1.default.AttributeType.VALUE_TYPE.OBJECT;
                case dependencies_internal_1.AttributeType.ValueType.BOOLEAN:
                    return concept_pb_1.default.AttributeType.VALUE_TYPE.BOOLEAN;
                case dependencies_internal_1.AttributeType.ValueType.LONG:
                    return concept_pb_1.default.AttributeType.VALUE_TYPE.LONG;
                case dependencies_internal_1.AttributeType.ValueType.DOUBLE:
                    return concept_pb_1.default.AttributeType.VALUE_TYPE.DOUBLE;
                case dependencies_internal_1.AttributeType.ValueType.STRING:
                    return concept_pb_1.default.AttributeType.VALUE_TYPE.STRING;
                case dependencies_internal_1.AttributeType.ValueType.DATETIME:
                    return concept_pb_1.default.AttributeType.VALUE_TYPE.DATETIME;
                default:
                    throw "Value type not recognised";
            }
        }
        ConceptProtoBuilder.valueType = valueType;
        function thingEncoding(thing) {
            if (thing instanceof dependencies_internal_1.EntityImpl) {
                return concept_pb_1.default.Thing.ENCODING.ENTITY;
            }
            else if (thing instanceof dependencies_internal_1.RelationImpl) {
                return concept_pb_1.default.Thing.ENCODING.RELATION;
            }
            else if (thing instanceof dependencies_internal_1.AttributeImpl) {
                return concept_pb_1.default.Thing.ENCODING.ATTRIBUTE;
            }
            else {
                throw "Unrecognised Thing class";
            }
        }
        ConceptProtoBuilder.thingEncoding = thingEncoding;
        function typeEncoding(type) {
            if (type instanceof dependencies_internal_1.EntityTypeImpl) {
                return concept_pb_1.default.Type.ENCODING.ENTITY_TYPE;
            }
            else if (type instanceof dependencies_internal_1.RelationTypeImpl) {
                return concept_pb_1.default.Type.ENCODING.RELATION_TYPE;
            }
            else if (type instanceof dependencies_internal_1.AttributeTypeImpl) {
                return concept_pb_1.default.Type.ENCODING.ATTRIBUTE_TYPE;
            }
            else if (type instanceof dependencies_internal_1.RoleTypeImpl) {
                return concept_pb_1.default.Type.ENCODING.ROLE_TYPE;
            }
            else if (type instanceof dependencies_internal_1.ThingTypeImpl) {
                return concept_pb_1.default.Type.ENCODING.THING_TYPE;
            }
            else {
                throw "Unrecognised Type class";
            }
        }
        ConceptProtoBuilder.typeEncoding = typeEncoding;
    })(ConceptProtoBuilder = exports.ConceptProtoBuilder || (exports.ConceptProtoBuilder = {}));
});
//# sourceMappingURL=data:application/json;base64,