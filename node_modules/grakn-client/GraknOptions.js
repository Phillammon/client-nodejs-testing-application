/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("grakn-client/GraknOptions", ["require", "exports", "grakn-client/dependencies_internal"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GraknOptions = void 0;
    const dependencies_internal_1 = require("grakn-client/dependencies_internal");
    class GraknOptions {
        constructor() {
            this._infer = null;
            this._explain = null;
            this._batchSize = null;
        }
        infer() {
            return this._infer;
        }
        setInfer(infer) {
            this._infer = infer;
            return this;
        }
        explain() {
            return this._explain;
        }
        setExplain(explain) {
            this._explain = explain;
            return this;
        }
        batchSize() {
            return this._batchSize;
        }
        setBatchSize(batchSize) {
            if (batchSize < 1) {
                throw new dependencies_internal_1.GraknClientError(dependencies_internal_1.ErrorMessage.Client.NONPOSITIVE_BATCH_SIZE.message(batchSize));
            }
            this._batchSize = batchSize;
            return this;
        }
    }
    exports.GraknOptions = GraknOptions;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3Jha25PcHRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vR3Jha25PcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRzs7Ozs7Ozs7Ozs7OztJQUVILDhFQUdnQztJQUVoQyxNQUFhLFlBQVk7UUFLckI7WUFDSSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztZQUNyQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUMzQixDQUFDO1FBRUQsS0FBSztZQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN2QixDQUFDO1FBRUQsUUFBUSxDQUFDLEtBQWM7WUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDcEIsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztRQUVELE9BQU87WUFDSCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDekIsQ0FBQztRQUVELFVBQVUsQ0FBQyxPQUFnQjtZQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztZQUN4QixPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDO1FBRUQsU0FBUztZQUNMLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUMzQixDQUFDO1FBRUQsWUFBWSxDQUFDLFNBQWlCO1lBQzFCLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRTtnQkFDZixNQUFNLElBQUksd0NBQWdCLENBQUMsb0NBQVksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7YUFDNUY7WUFDRCxJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztZQUM1QixPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDO0tBQ0o7SUF4Q0Qsb0NBd0NDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gICAgR3Jha25DbGllbnRFcnJvcixcbiAgICBFcnJvck1lc3NhZ2UsXG59IGZyb20gXCIuL2RlcGVuZGVuY2llc19pbnRlcm5hbFwiXG5cbmV4cG9ydCBjbGFzcyBHcmFrbk9wdGlvbnMge1xuICAgIHByaXZhdGUgX2luZmVyOiBib29sZWFuO1xuICAgIHByaXZhdGUgX2V4cGxhaW46IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfYmF0Y2hTaXplOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5faW5mZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9leHBsYWluID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYmF0Y2hTaXplID0gbnVsbDtcbiAgICB9XG5cbiAgICBpbmZlcigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luZmVyO1xuICAgIH1cblxuICAgIHNldEluZmVyKGluZmVyOiBib29sZWFuKTogR3Jha25PcHRpb25zIHtcbiAgICAgICAgdGhpcy5faW5mZXIgPSBpbmZlcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZXhwbGFpbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4cGxhaW47XG4gICAgfVxuXG4gICAgc2V0RXhwbGFpbihleHBsYWluOiBib29sZWFuKTogR3Jha25PcHRpb25zIHtcbiAgICAgICAgdGhpcy5fZXhwbGFpbiA9IGV4cGxhaW47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGJhdGNoU2l6ZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmF0Y2hTaXplO1xuICAgIH1cblxuICAgIHNldEJhdGNoU2l6ZShiYXRjaFNpemU6IG51bWJlcik6IEdyYWtuT3B0aW9ucyB7XG4gICAgICAgIGlmIChiYXRjaFNpemUgPCAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgR3Jha25DbGllbnRFcnJvcihFcnJvck1lc3NhZ2UuQ2xpZW50Lk5PTlBPU0lUSVZFX0JBVENIX1NJWkUubWVzc2FnZShiYXRjaFNpemUpKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2JhdGNoU2l6ZSA9IGJhdGNoU2l6ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuIl19